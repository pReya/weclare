{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","shared/util/Logger.js","shared/actions/connection.js","server/actions/answers.js","server/selectors/questions.js","server/actions/server.js","server/components/ConnectFormServerContainer.js","shared/components/InfoPopoverIcon.js","server/components/EditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionListDropdown.js","server/components/QuestionList.js","shared/util/questionsSchema.js","server/actions/questions.js","server/components/QuestionEditor.js","shared/types.js","shared/components/QuestionCard.js","server/selectors/server.js","server/components/AskScreenContinueButton.js","server/components/AskScreen.js","shared/util/Helpers.js","server/reducers/server.js","server/reducers/answers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questions.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","shared/components/SpinnerCard.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","encodeURI","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","Nav","NavItem","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","inputIsInvalid","id","isValid","test","_this2","match","onChangeServerId","onClickConnect","serverId","buttonText","history","helpText","validationError","params","components_DefaultCard","Form","FormGroup","row","bsSize","type","onChange","e","newId","target","validateServerId","invalid","FormFeedback","FormText","Button","push","undefined","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","SET_PEER","SET_CONNECTION_STATUS","setConnectionStatus","newStatus","payload","setPeer","REGISTER_ANSWER","INIT_ANSWERS","registerAnswer","questionIdx","answerIdx","userId","dispatch","getState","acceptingAnswers","log","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","getAnswerCount","registeredAnswers","answer","getCurrentQuestion","currentQuestionIdx","ADD_CONNECTION","SET_SERVER_ID","setServerId","SET_CURRENT_QUESTION_IDX","TOGGLE_ACCEPTING_ANSWERS","startServer","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debugLevel","REACT_APP_PEERJS_DEBUG","_getState$server$ownS","Peer","host","debug","parseInt","on","info","dataHandler","addConnection","err","error","staticProps","withRouter","newServerId","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","EditorAnswerInput","isHovered","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","EditorAnswerInput_RadioInput","onSetCorrectAnswer","EditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_EditorAnswerInput","isCorrect","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","closeDropdown","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionList","questions","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionListDropdown","DownloadIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_MODE","EDIT_QUESTION_TYPE","DELETE_QUESTION","LOAD_QUESTIONS","SORT_QUESTION","selectQuestion","addQuestion","editQuestionText","editQuestionMode","newMode","oldMode","editQuestionType","newType","oldType","deleteQuestion","loadQuestions","newQuestions","sortQuestion","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","setCorrectSingleAnswer","setCorrectMultiAnswer","addAnswer","editAnswerText","deleteAnswer","sortAnswer","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","objectSpread","questionEditorActions","answerActions","QuestionEditor","loadQuestionsFromStorage","localStorage","getItem","JSON","parse","downloadFile","dataStr","encodeURIComponent","stringify","downloadAnchorNode","setAttribute","getFormattedDate","remove","saveToStorage","setItem","validateAndSaveToStorage","tv4","validate","QuestionSchema","saveFileToStorage","reader","FileReader","onload","readAsText","components_QuestionList","components_QuestionContent","xs","ContentSaveIcon_default","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","DQuestion","PropTypes","string","shape","progress","arrayOf","object","selectedAnswerIdx","QuestionCard","onClickAnswer","countedAnswers","Helmet","dangerouslySetInnerHTML","__html","selectedAnswer","isConnected","sendCurrentQuestionToClients","currentQuestion","forEach","send","toggleAcceptingAnswers","AskScreenContinueButton","buttonPhase","currentPhaseObj","0","react_md_spinner_lib_default","singleColor","additionalButtonProps","1","PlayIcon_default","2","PauseIcon_default","3","FormatListNumberedIcon_default","4","SkipForwardIcon_default","AskScreen","components_QuestionCard","components_AskScreenContinueButton","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","toConsumableArray","q","combineReducers","deepClonedState","questionsCount","idx","nanoid","newQuestion","_action$payload","_action$payload2","firstAnswerFound","_action$payload3","_action$payload4","filter","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","element","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","ConnectFormServerContainer","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","clickConnect","timeoutId","heartbeat","setTimeout","socket","_wsOpen","makePeerHeartbeater","reliable","SpinnerCard","color1","color2","color3","color4","AnswerScreen","initialState","prevProps","resetState","hasQuestion","provider","sendAnswer","components_SpinnerCard","clientStore","mainClientReducer","Client","ClientHeaderContainer","Switch","ConnectorContainer","About","fontFamily","snarkdown","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5e05aa9.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    encodeURI(\n                      `${window.location.origin}/client/connect/${ownServerId}`\n                    )\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between bg-white\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport {\n  Form,\n  FormText,\n  FormFeedback,\n  FormGroup,\n  Button,\n  Input,\n  Col\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nclass ConnectForm extends React.Component {\n  state = { inputIsInvalid: false };\n\n  validateServerId(id) {\n    const serverIdRex = /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/;\n    const isValid = !id || serverIdRex.test(id);\n    this.setState({ inputIsInvalid: !isValid });\n  }\n\n  render() {\n    const {\n      match,\n      onChangeServerId,\n      onClickConnect,\n      serverId,\n      title,\n      text,\n      buttonText,\n      history,\n      location,\n      helpText,\n      validationError\n    } = this.props;\n\n    const { inputIsInvalid } = this.state;\n\n    if (match && match.params && match.params.serverId) {\n      onChangeServerId(match.params.serverId);\n    }\n\n    return (\n      <DefaultCard title={title} text={text}>\n        <Form>\n          <FormGroup row className=\"form-row\">\n            <Col>\n              <Input\n                bsSize=\"lg\"\n                id=\"serverId\"\n                type=\"text\"\n                value={serverId}\n                onChange={e => {\n                  const newId = e.target.value;\n                  this.validateServerId(newId);\n                  onChangeServerId(newId);\n                }}\n                invalid={inputIsInvalid}\n              />\n              {validationError && (\n                <FormFeedback>{validationError}</FormFeedback>\n              )}\n              {helpText && <FormText>{helpText}</FormText>}\n            </Col>\n            <Col md={3}>\n              <Button\n                type=\"button\"\n                id=\"connect\"\n                className=\"btn-block\"\n                size=\"lg\"\n                onClick={() => {\n                  onClickConnect(serverId);\n                  if (history && location) {\n                    history.push(location);\n                  }\n                }}\n                disabled={inputIsInvalid}\n              >\n                {buttonText}\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </DefaultCard>\n    );\n  }\n}\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  validationError: PropTypes.string,\n  inputIsInvalid: PropTypes.bool,\n  match: ReactRouterPropTypes.match\n};\n\nConnectForm.defaultProps = {\n  helpText: undefined,\n  match: undefined,\n  buttonText: \"Connect\",\n  validationError: undefined,\n  inputIsInvalid: false\n};\n\nexport default ConnectForm;\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setConnectionStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n\n// export function sendNextQuestionToClients() {\n//   return (dispatch, getState) => {\n//     const {\n//       server: { connections = [], currentQuestionIdx },\n//       questionEditor: questions\n//     } = getState();\n//     // use getFormattedQuestion here – how?\n//     if (connections.length > 0 && formattedQuestion) {\n//       connections.forEach(connection =>\n//         connection.send(JSON.stringify(formattedQuestion))\n//       );\n//     } else {\n//       console.error(\"Can't send question to clients\");\n//     }\n//   };\n// }\n","// Server Actions\nexport const REGISTER_ANSWER = \"REGISTER_ANSWER\";\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\n\nexport function registerAnswer(questionIdx, answerIdx, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWER,\n        payload: {\n          questionIdx,\n          answerIdx,\n          userId\n        }\n      });\n    } else {\n      console.log(\"TEST\");\n    }\n  };\n}\n\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n\nexport function getAnswerCount(questionIdx) {\n  return (dispatch, getState) => {\n    const { registeredAnswers } = getState();\n    return registeredAnswers[questionIdx].map(answer => answer.length);\n  };\n}\n","const getCurrentQuestion = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n  return questions[currentQuestionIdx];\n};\n\nexport default getCurrentQuestion;\n","import Peer from \"peerjs\";\nimport Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport { registerAnswer } from \"./answers\";\nimport getCurrentQuestion from \"../selectors/questions\";\n\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: SET_CURRENT_QUESTION_IDX,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\nexport function toggleAcceptingAnswers() {\n  return {\n    type: TOGGLE_ACCEPTING_ANSWERS\n  };\n}\n\nexport function startServer() {\n  return (dispatch, getState) => {\n    const {\n      REACT_APP_PEERJS_SERVER: server,\n      REACT_APP_PEERJS_SECURE: secure,\n      REACT_APP_PEERJS_DEBUG: debugLevel\n    } = process.env;\n\n    const {\n      server: { ownServerId = null }\n    } = getState();\n\n    const peer = new Peer(ownServerId, {\n      host: server,\n      secure: secure === \"true\",\n      debug: parseInt(debugLevel, 10)\n    });\n\n    const dataHandler = data => {\n      const { type, payload } = data;\n      Logger.info(\"Received Data: \", data);\n      switch (type) {\n        case \"answer\":\n          console.log(\"Received answer\", payload);\n          dispatch(\n            registerAnswer(\n              payload.questionIdx,\n              payload.answerIdx,\n              payload.userId\n            )\n          );\n          break;\n        default:\n          console.log(\"Default\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    peer.on(\"open\", id => {\n      Logger.info(\"Successfully created Peer with id \", id);\n      dispatch(setConnectionStatus(1));\n      // Set Server ID again, in case the input was empty and PeerJS used a random ID\n      dispatch(setServerId(id));\n    });\n\n    peer.on(\"connection\", connection => {\n      Logger.info(\"New client connected with id: \", connection.peer);\n      connection.on(\"data\", data => dataHandler(data));\n      dispatch(setConnectionStatus(2));\n      dispatch(addConnection(connection));\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n\nexport function sendCurrentQuestionToClients() {\n  return (dispatch, getState) => {\n    console.log(\"Sending question to clients\");\n    const {\n      server: { connections }\n    } = getState();\n\n    const currentQuestion = getCurrentQuestion(getState());\n\n    if (connections.length > 0 && currentQuestion) {\n      connections.forEach(connection =>\n        connection.send(JSON.stringify(currentQuestion))\n      );\n    } else {\n      console.error(\"Can't send question to clients\");\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerId, startServer } from \"../actions/server\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: () => {\n    dispatch(startServer());\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Choose a Server Id\",\n  text:\n    \"Please pick a server ID that uniquely identifies your quiz session (e.g. 'algorithms_2_june_2018') or leave it empty to generate a random ID.\",\n  buttonText: \"Create\",\n  location: \"/server/ask\",\n  validationError: \"Only alphanumeric characters and -,_ or spaces are allowed.\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={18}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass EditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default EditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport EditorAnswerInput from \"./EditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">Question Text</Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  Answers{\" \"}\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <EditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile, closeDropdown } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n    if (typeof closeDropdown === \"function\") {\n      closeDropdown();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  closeDropdown: PropTypes.func\n};\n\nSingleFileInput.defaultProps = {\n  closeDropdown: null\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            closeDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nQuestionListDropdown.propTypes = {\n  onUploadFile: PropTypes.func.isRequired,\n  onUploadDropbox: PropTypes.func.isRequired\n};\n\nexport default QuestionListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionListDropdown from \"./QuestionListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon\n                              style={{\n                                marginBottom: \"3px\",\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const SORT_QUESTION = \"SORT_QUESTION\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { selectedQuestion } = getState();\n    if (selectedQuestion <= 0) {\n      dispatch(selectQuestion(0));\n    } else {\n      dispatch(selectQuestion(selectedQuestion - 1));\n    }\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport const SORT_ANSWER = \"SORT_ANSWER\";\n\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport tv4 from \"tv4\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport QuestionSchema from \"../../shared/util/questionsSchema\";\nimport * as questionEditorActions from \"../actions/questions\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = { ...questionEditorActions, ...answerActions };\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadQuestionsFromStorage();\n  }\n\n  static getFormattedDate = () => {\n    const today = new Date();\n    let dd = today.getDate();\n\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    return `${dd}-${mm}-${yyyy}`;\n  };\n\n  loadQuestionsFromStorage = () => {\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  };\n\n  downloadFile = data => {\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\n      \"download\",\n      `weclare-${QuestionEditor.getFormattedDate()}.json`\n    );\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    Logger.info(\"Created and started file download\");\n  };\n\n  saveToStorage = data => {\n    localStorage.setItem(\"weclare\", data);\n    Logger.info(\"Saved questionset to local storage\");\n  };\n\n  validateAndSaveToStorage = data => {\n    const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n    if (valid) {\n      Logger.info(\"Questionset was successfully validated\");\n      this.saveToStorage(data);\n      this.loadQuestionsFromStorage();\n    } else {\n      Logger.error(\"Imported file was invalid\", tv4.error);\n    }\n  };\n\n  saveFileToStorage = file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.validateAndSaveToStorage(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                this.saveToStorage(JSON.stringify(questions));\n                this.downloadFile(questions);\n              }}\n              onUploadFile={this.saveFileToStorage}\n              onUploadDropbox={this.validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                this.saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.array.isRequired,\n  // Questions\n  loadQuestions: PropTypes.func.isRequired,\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    text: null,\n    type: null,\n    answers: null\n  },\n  disabled: false,\n  selectedAnswerIdx: null\n};\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TQuestion, DQuestion } from \"../types\";\n\nconst QuestionCard = props => {\n  const {\n    question,\n    onClickAnswer,\n    countedAnswers,\n    disabled,\n    selectedAnswerIdx,\n    children\n  } = props;\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <DefaultCard\n        title=\"Answer question\"\n        badge={question.progress}\n        footer={children}\n      >\n        {question.text && (\n          <div\n            className=\"text-center mb-4 h4\"\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={selectedAnswerIdx !== i}\n              id={i}\n              key={i}\n              block\n              onClick={\n                onClickAnswer\n                  ? e => {\n                      const selectedAnswer = parseInt(e.target.id, 10);\n                      onClickAnswer(selectedAnswer);\n                    }\n                  : null\n              }\n              color=\"secondary\"\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge className=\"float-right\" color=\"secondary\">\n                  {countedAnswers[i] !== 0 && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","const isConnected = state => {\n  const {\n    server: { connections }\n  } = state;\n  return connections.length > 0;\n};\n\nexport default isConnected;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport MDSpinner from \"react-md-spinner\";\nimport {\n  toggleAcceptingAnswers,\n  sendCurrentQuestionToClients\n} from \"../actions/server\";\nimport isConnected from \"../selectors/server\";\n\nconst mapStateToProps = state => ({\n  isConnected: isConnected(state)\n});\n\nconst mapDispatchToProps = {\n  sendCurrentQuestionToClients,\n  toggleAcceptingAnswers\n};\n\nclass AskScreenContinueButton extends React.Component {\n  state = {\n    buttonPhase: 0\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.isConnected && state.buttonPhase === 0) {\n      return {\n        buttonPhase: 1\n      };\n    }\n    return null;\n  }\n\n  render() {\n    const { toggleAcceptingAnswers, sendCurrentQuestionToClients } = this.props;\n    const buttonStateMachine = {\n      // Waiting for clients, button disabled\n      0: {\n        text: (\n          <>\n            <MDSpinner singleColor=\"#8a817c\" size={16} /> Waiting for clients\n          </>\n        ),\n        color: \"primary\",\n        additionalButtonProps: {\n          outline: true,\n          disabled: true\n        }\n      },\n      // Clients connected, ready to send first question and accept answers\n      1: {\n        onClick: () => {\n          toggleAcceptingAnswers();\n          sendCurrentQuestionToClients();\n          this.setState({\n            buttonPhase: 2\n          });\n        },\n        text: (\n          <>\n            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start Quiz\n          </>\n        ),\n        color: \"secondary\"\n      },\n      2: {\n        onClick: () => {\n          // toggleAcceptingAnswers();\n          this.setState({\n            buttonPhase: 3\n          });\n        },\n        text: (\n          <>\n            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop Question\n          </>\n        ),\n        color: \"secondary\"\n      },\n      3: {\n        onClick: () => {\n          // countAnswers(registeredAnswers, currentQuestionIdx);\n          this.setState({\n            buttonPhase: 4\n          });\n        },\n        text: (\n          <>\n            <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} /> Show\n            Results\n          </>\n        ),\n        color: \"secondary\"\n      },\n      4: {\n        onClick: () => {\n          // setCurrentQuestionIdx(nextQuestionIdx);\n          this.setState({\n            buttonPhase: 0\n          });\n        },\n        text: (\n          <>\n            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} /> Next Question\n          </>\n        ),\n        color: \"secondary\"\n      }\n    };\n\n    const { buttonPhase } = this.state;\n    const currentPhaseObj = buttonStateMachine[buttonPhase];\n    return (\n      <Button\n        color={currentPhaseObj.color}\n        outline={currentPhaseObj.outline}\n        block\n        onClick={currentPhaseObj.onClick}\n        {...currentPhaseObj &&\n          currentPhaseObj.additionalButtonProps &&\n          currentPhaseObj.additionalButtonProps}\n      >\n        {currentPhaseObj.text}\n      </Button>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AskScreenContinueButton);\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport AskScreenContinueButton from \"./AskScreenContinueButton\";\nimport getCurrentQuestion from \"../selectors/questions\";\n\nclass AskScreen extends React.Component {\n  state = {\n    countedAnswers: null\n  };\n\n  render() {\n    const { countedAnswers } = this.state;\n    const { currentQuestion } = this.props;\n\n    return (\n      <Row className=\"justify-content-center\">\n        <QuestionCard\n          question={currentQuestion}\n          countedAnswers={countedAnswers}\n          disabled\n        >\n          <AskScreenContinueButton />\n        </QuestionCard>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentQuestion: getCurrentQuestion(state)\n});\n\nexport default connect(mapStateToProps)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n\nexport const updateQuestionIndexes = array =>\n  array.map((element, i) => ({ ...element, questionIdx: i }));\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestionIdx: 0,\n    acceptingAnswers: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestionIdx: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWER, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/Helpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWER: {\n      console.log(\"Reducer\", action.payload);\n      return changeInArray(state, action.payload.questionIdx, q =>\n        changeInArray(q, action.payload.answerIdx, a => {\n          a.push(action.payload.userId);\n          return a;\n        })\n      );\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questions\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./answers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questions\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray,\n  updateQuestionIndexes\n} from \"../../shared/util/Helpers\";\n\nconst newQuestion = (idx = 0) => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  questionIdx: idx,\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\n// This is the selected question in the questionEditor, don't confuse with\n// selected question in server state\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const questionsCount = state.length;\n      deepClonedState.push(newQuestion(questionsCount));\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      const reindexedArray = updateQuestionIndexes(deepClonedState);\n\n      return reindexedArray;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport ConnectFormServerContainer from \"./ConnectFormServerContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route\n            exact\n            path=\"/server/create\"\n            component={ConnectFormServerContainer}\n          />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\n// TODO: This is probably unnecessary b/c PeerJS keeps its own connection object\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport Logger from \"../../shared/util/Logger\";\nimport { setConnectionStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\n// Source: https://github.com/peers/peerjs/issues/227#issue-39009356\nconst makePeerHeartbeater = peer => {\n  let timeoutId = 0;\n  function heartbeat() {\n    timeoutId = setTimeout(heartbeat, 20000);\n    // eslint-disable-next-line\n    if (peer.socket._wsOpen()) {\n      peer.socket.send({ type: \"HEARTBEAT\" });\n      Logger.info(\"Sent heartbeat\");\n    }\n  }\n  // Start\n  heartbeat();\n  // return\n  return {\n    start() {\n      if (timeoutId === 0) {\n        heartbeat();\n      }\n    },\n    stop() {\n      clearTimeout(timeoutId);\n      timeoutId = 0;\n    }\n  };\n};\n\nconst clickConnect = (serverId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  const peer = new Peer({\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n\n  const heartbeater = makePeerHeartbeater(peer);\n\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setConnectionStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: false }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setConnectionStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setConnectionStatus(2));\n    connection.on(\"data\", data => {\n      const msg = JSON.parse(data);\n      console.log(\"Received data: \", msg);\n      dispatch(setCurrentQuestion(msg));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\",\n  validationError: \"Only alphanumeric characters and -,_ or spaces are allowed.\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex justify-content-center\">\n          <MDSpinner\n            color1=\"#8a817c\"\n            color2=\"#f44336\"\n            color3=\"#dc9125\"\n            color4=\"#5fa15d\"\n            size={size}\n          />\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\n\nimport { TQuestion, DQuestion } from \"../../shared/types\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  connection: state.client.connection\n});\n\nconst sendAnswer = (connection, answerIdx, questionIdx) => {\n  if (connection) {\n    connection.send({\n      type: \"answer\",\n      payload: {\n        questionIdx,\n        answerIdx,\n        userId: connection.provider.id\n      }\n    });\n  }\n};\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswerIdx: null\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n    }\n  }\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { currentQuestion, connection } = this.props;\n    const { disabled, selectedAnswerIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard\n            question={currentQuestion}\n            disabled={disabled}\n            selectedAnswerIdx={selectedAnswerIdx}\n            onClickAnswer={answerIdx => {\n              console.log(\"Sending back answer \", answerIdx, currentQuestion);\n              sendAnswer(connection, answerIdx, currentQuestion.questionIdx);\n              this.setState(\n                {\n                  disabled: true,\n                  selectedAnswerIdx: answerIdx\n                },\n                () => console.log(\"New state\", this.state)\n              );\n            }}\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for question\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectorContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport raw from \"raw.macro\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>\n              <div\n                className=\"markdown-body\"\n                style={{\n                  fontFamily: \"IBM Plex Sans\"\n                }}\n                dangerouslySetInnerHTML={{\n                  __html: snarkdown(raw(\"../public/README.MD\"))\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}