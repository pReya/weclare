{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/util/Logger.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","server/actions/server.js","server/actions/answers.js","shared/actions/connection.js","server/components/CreatorContainer.js","server/components/QuestionContent.js","server/components/QuestionList.js","server/actions/questionEditor.js","server/components/QuestionEditor.js","shared/types.js","shared/components/SpinnerCard.js","server/components/WaitScreen.js","shared/components/QuestionCard.js","server/components/AskScreen.js","shared/util/Helpers.js","server/reducers/questionEditor.js","server/reducers/server.js","server/reducers/registeredAnswers.js","shared/reducers/connection.js","server/reducers/main.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","reactstrap_es","href","GithubCircleIcon_default","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropDown","bind","assertThisInitialized","state","dropdownOpen","setState","_this$props","status","isServer","numberOfClients","ownServerId","value","client","server","concat","includes","addonType","isOpen","toggle","caret","header","divider","style","cursor","QrcodeIcon_default","document","queryCommandSupported","onClick","content","tempInput","body","appendChild","select","execCommand","removeChild","ClipboardTextIcon_default","LinkIcon_default","disabled","React","Component","defaultProps","Header","isClient","Fragment","expand","ConnectionIndicator_ConnectionIndicator","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","DefaultCard","title","text","children","badge","footer","md","color","pill","ConnectForm","onChangeServerId","onClickConnect","serverId","buttonText","history","location","components_DefaultCard","row","id","type","onChange","e","target","push","ADD_CONNECTION","SET_SERVER_ID","REGISTER_ANSWER","INIT_ANSWERS","SET_PEER","SET_CONNECTION_STATUS","setServerStatus","newStatus","payload","setPeer","dataHandler","dispatch","questionIdx","answerIdx","userId","info","log","getState","acceptingAnswers","createPeer","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","on","addConnection","err","error","staticProps","withRouter","newServerId","newId","components_ConnectForm","QuestionContent","question","selectedQuestion","onEditAnswerText","onEditQuestionText","onAddAnswer","onSetCorrectAnswer","onDeleteAnswer","onDeleteQuestion","for","sm","questionText","answers","map","i","QuestionContent_SingleChoiceAnswer","isCorrectAnswer","correctAnswers","number","answer","answerText","key","outline","block","SingleChoiceAnswer","addon","checked","name","close","QuestionList","questions","onSelectQuestion","onAddQuestion","flush","q","preventDefault","action","active","AddCircleOutlineIcon_default","paddingBottom","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","DELETE_QUESTION","LOAD_QUESTIONS","selectQuestion","SET_CORRECT_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","mapDispatchToProps","addQuestion","questionEditor","editQuestionText","deleteQuestion","addAnswer","editAnswerText","deleteAnswer","setCorrectAnswer","loadQuestions","newQuestions","initAnswers","emptyAnswerArray","array","QuestionEditor","localStorage","getItem","JSON","parse","components_QuestionList","components_QuestionContent","xs","setItem","stringify","DQuestion","PropTypes","string","shape","progress","questionType","arrayOf","object","SpinnerCard","size","Helmet","lib_default","color1","color2","color3","color4","hasClients","pluralizeClient","pluralizeVerb","components_SpinnerCard","QuestionCard","isDisabled","selectedAnswerIdx","correctAnswerIdx","_this2","onClickAnswer","countedAnswers","_this$state","selectedAnswer","AskScreen","buttonPhase","registeredAnswers","prevState","objectSpread","currentQuestionIdx","setCurrentQuestionIdx","toggleAcceptingAnswers","currentQuestionIdxNoNull","nextQuestionIdx","formattedQuestion","questionWithoutAnswer","objectWithoutProperties","currentQuestionIdxString","String","questionsCount","getFormattedQuestion","components_QuestionCard","forEach","send","sendQuestion","countAnswers","PlayIcon_default","PauseIcon_default","FormatListNumberedIcon_default","SkipForwardIcon_default","currentQuestion","changeInArray","index","changer","item","newQuestion","newAnswer","undefined","toConsumableArray","combineReducers","_action$payload","clonedQuestions","slice","_action$payload2","filter","_action$payload3","_action$payload4","store","createStore","mainReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","ServerHeaderContainer","Route","exact","path","component","CreatorContainer","WaitScreen","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","clickConnect","reliable","AnswerScreen","hasQuestion","provider","sendAnswer","Client","ClientHeaderContainer","ConnectorContainer","About","fetch","then","response","snarkdown","fontFamily","dangerouslySetInnerHTML","__html","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Switch","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAIe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCAAb,oDAIFH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,qCACNL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,2HCOOM,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEtBA,EAAKU,MAAQ,CACXC,cAAc,GANCX,gFAUF,IACPW,EAAiBR,KAAKO,MAAtBC,aACRR,KAAKS,SAAS,CACZD,cAAeA,qCASV,IAAAE,EACoDV,KAAKJ,MAAxDe,EADDD,EACCC,OAAQC,EADTF,EACSE,SAAUC,EADnBH,EACmBG,gBAAiBC,EADpCJ,EACoCI,YACnCN,EAAiBR,KAAKO,MAAtBC,aAWFO,EAVqB,CACzBC,OAAQ,CAAC,qBAAY,oBAAqB,mBAAe,gBACzDC,OAAQ,CACN,qBACA,iCAFM,UAAAC,OAGDL,EAHC,sBAIN,iBAGkBD,EAAW,SAAW,UACID,GAChD,OACEvB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYD,UAAU,mCACnBqB,GAAY,CAAC,EAAG,EAAG,GAAGO,SAASR,GAC9BvB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE4B,UAAU,UACVC,OAAQb,EACRc,OAAQtB,KAAKI,gBAEbhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAgB+B,OAAK,EAAChC,UAAU,oBAAhC,GAAA2B,OACMJ,EADN,MAGA1B,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcgC,QAAM,GAApB,SACApC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAciC,SAAO,IACrBrC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAckC,MAAO,CAAEC,OAAQ,YAC7BvC,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAYE,UAAU,eADxB,qBAKCsC,SAASC,sBAAsB,SAC9B1C,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEuC,QAAS,WApEH,IAAAC,EAChBC,EADgBD,EAqEYlB,GApE5BmB,EAAYJ,SAASvC,cAAc,UAC/BoC,MAAQ,kDAClBO,EAAUlB,MAAQiB,EAClBH,SAASK,KAAKC,YAAYF,GAC1BA,EAAUG,SACVP,SAASQ,YAAY,QACrBR,SAASK,KAAKI,YAAYL,IAgEVP,MAAO,CAAEC,OAAQ,YAEjBvC,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CAAmBE,UAAU,eAN/B,gBAWFH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAckC,MAAO,CAAEC,OAAQ,YAC7BvC,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CAAUE,UAAU,eADtB,oBAOF,KACJH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOD,UAAU,oBAAoBwB,MAAOA,EAAO0B,UAAQ,YA5ElBC,IAAMC,WAyFvDhD,EAAoBiD,aAAe,CACjChC,UAAU,EACVC,gBAAiB,EACjBC,YAAa,ICvGf,IAAM+B,EAAS,SAAAjD,GAAS,IACde,EAA6Df,EAA7De,OAAQE,EAAqDjB,EAArDiB,gBAAiBD,EAAoChB,EAApCgB,SAAUkC,EAA0BlD,EAA1BkD,SAAUhC,EAAgBlB,EAAhBkB,YACrD,OACE1B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEwD,OAAO,KACPzD,UAAU,wEAEVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAaC,KAAK,KAAlB,UAEGmB,EAAW,UAAY,YAExBA,GAAYkC,IACZ1D,EAAAC,EAAAC,cAAC2D,EAAD,CACErC,SAAUA,EACVD,OAAQA,EACRE,gBAAiBA,EACjBC,YAAaA,IAIjB1B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,YACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAS0D,IAAKC,IAAMC,GAAG,KAAvB,SAIFhE,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAS0D,IAAKC,IAAMC,GAAG,UAAvB,eAmBdP,EAAOD,aAAe,CACpBhC,UAAU,EACVkC,UAAU,EACVjC,gBAAiB,EACjBC,YAAa,GACbH,OAAQ,GAGKkC,QCzDAQ,cARS,SAAA9C,GAAK,MAAK,CAChCI,OAAQJ,EAAM+C,WAAW3C,OACzBE,gBAAiBN,EAAM+C,WAAWC,KAC9BzD,OAAO0D,KAAKjD,EAAM+C,WAAWC,KAAKE,aAAaC,OAC/C,KACJ5C,YAAaP,EAAMU,OAAOH,cAGbuC,CAAyB,SAAAzD,GAAK,OAC3CR,EAAAC,EAAAC,cAACqE,EAAD7D,OAAA8D,OAAA,CAAQhD,UAAQ,GAAKhB,gCCaRiE,oGAzBDC,GAAc,QAAAC,EAAAC,UAAAN,OAANO,EAAM,IAAAC,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAANF,EAAME,EAAA,GAAAH,UAAAG,GACxBN,EAAOO,YAAY,OAAQN,EAAKG,iCAGrBH,GAAc,QAAAO,EAAAL,UAAAN,OAANO,EAAM,IAAAC,MAAAG,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANL,EAAMK,EAAA,GAAAN,UAAAM,GACzBT,EAAOO,YAAY,QAASN,EAAKG,gCAGvBH,GAAc,QAAAS,EAAAP,UAAAN,OAANO,EAAM,IAAAC,MAAAK,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANP,EAAMO,EAAA,GAAAR,UAAAQ,GACxBX,EAAOO,YAAY,OAAQN,EAAKG,iCAGrBH,GAAc,QAAAW,EAAAT,UAAAN,OAANO,EAAM,IAAAC,MAAAO,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANT,EAAMS,EAAA,GAAAV,UAAAU,GACzBb,EAAOO,YAAY,QAASN,EAAKG,uCAGhBU,EAASb,EAAKG,GAC3BA,EAAKP,OAAS,EAChBkB,QAAQD,GAASb,EAAKG,GAEtBW,QAAQD,GAASb,mBCTvB,SAASe,EAAYjF,GAAO,IAClBkF,EAAyClF,EAAzCkF,MAAOC,EAAkCnF,EAAlCmF,KAAMC,EAA4BpF,EAA5BoF,SAAUC,EAAkBrF,EAAlBqF,MAAOC,EAAWtF,EAAXsF,OAEtC,OACE9F,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2F,GAAG,KACN/F,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACGyF,EACC7F,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uCACXuF,EACD1F,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4F,MAAM,OAAOC,MAAI,GACrBJ,IAIL7F,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQuF,IAG1B1F,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACGuF,GAAQ3F,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAWuF,GACnBC,GAEFE,GAAU9F,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAa0F,KAchCL,EAAYjC,aAAe,CACzBmC,KAAM,KACNC,SAAU,KACVC,MAAO,KACPC,OAAQ,MAGKL,QCjDTS,EAAc,SAAA1F,GAAS,IAEzB2F,EAQE3F,EARF2F,iBACAC,EAOE5F,EAPF4F,eACAC,EAME7F,EANF6F,SACAX,EAKElF,EALFkF,MACAC,EAIEnF,EAJFmF,KACAW,EAGE9F,EAHF8F,WACAC,EAEE/F,EAFF+F,QACAC,EACEhG,EADFgG,SAGF,OACExG,EAAAC,EAAAC,cAACuG,EAAD,CAAaf,MAAOA,EAAOC,KAAMA,GAC/B3F,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWsG,KAAG,EAACvG,UAAU,YACvBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2F,GAAI,GACP/F,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEuG,GAAG,WACHC,KAAK,OACLjF,MAAO0E,EACPQ,SAAU,SAAAC,GAAC,OAAIX,EAAiBW,EAAEC,OAAOpF,WAG7C3B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2F,GAAI,GACP/F,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEwG,KAAK,SACLD,GAAG,UACHxG,UAAU,YACVwC,QAAS,WACPyD,EAAeC,GACXE,GAAWC,GACbD,EAAQS,KAAKR,KAIhBF,QAoBfJ,EAAY1C,aAAe,CACzB8C,WAAY,WAGCJ,QCjEFe,EAAiB,iBACjBC,EAAgB,gBCDtB,IAAMC,EAAkB,kBAClBC,EAAe,eCFrB,IAAMC,EAAW,WACXC,EAAwB,wBAE9B,SAASC,EAAgBC,GAC9B,MAAO,CACLZ,KAAMU,EACNG,QAAS,CACPD,cAKC,SAASE,EAAQvD,GACtB,MAAO,CACLyC,KAAMS,EACNI,QAAS,CACPtD,SCLN,IAAMwD,EAAc,SAAC9C,EAAM+C,GAAa,IFPTC,EAAaC,EAAWC,EEQ7CnB,EAAkB/B,EAAlB+B,KAAMa,EAAY5C,EAAZ4C,QAEd,OADAhD,EAAOuD,KAAK,kBAAmBnD,GACvB+B,GACN,IAAK,SACHpB,QAAQyC,IAAI,kBAAmBR,GAC/BG,GFbyBC,EEcRJ,EAAQI,YFdaC,EEcAL,EAAQK,UFdGC,EEcQN,EAAQM,OFb9D,SAACH,EAAUM,GACGA,IAAXrG,OAEGsG,iBACTP,EAAS,CACPhB,KAAMO,EACNM,QAAS,CACPI,cACAC,YACAC,YAIJvC,QAAQyC,IAAI,WEEZ,MACF,QACEzC,QAAQyC,IAAI,aAIZG,EAAa,SAAC1G,EAAakG,GAAa,IAAAS,EAKxCC,kKAHuBzG,EAFiBwG,EAE1CE,wBACyBC,EAHiBH,EAG1CI,wBACwBC,EAJkBL,EAI1CM,uBAEIxE,EAAO,IAAIyE,IAAKlH,EAAa,CACjCmH,KAAMhH,EACN2G,OAAmB,SAAXA,EACRE,MAAOI,SAASJ,EAAO,MAEzBd,EAASF,EAAQvD,IAEjBA,EAAK4E,GAAG,OAAQ,SAAApC,GACdlC,EAAOuD,KAAK,qCAAsCrB,GAClDiB,EAASL,EAAgB,MAG3BpD,EAAK4E,GAAG,aAAc,SAAA7E,GACpBO,EAAOuD,KAAK,iCAAkC9D,EAAWC,MACzDD,EAAW6E,GAAG,OAAQ,SAAAlE,GAAI,OAAI8C,EAAY9C,EAAM+C,KAChDA,EAASL,EAAgB,IACzBK,EH1CG,SAAuB1D,GAC5B,MAAO,CACL0C,KAAMK,EACNQ,QAAS,CACPvD,eGsCO8E,CAAc9E,MAGzBC,EAAK4E,GAAG,QAAS,SAAAE,GACfxE,EAAOyE,MAAM,WAAYD,GACzBrB,EAASL,EAAgB,OAevB4B,GAAc,CAClBzD,MAAO,yBACPC,KACE,6EACFW,WAAY,SACZE,SAAU,gBAGG4C,eACbnF,YAbsB,SAAA9C,GAAK,MAAK,CAChCkF,SAAUlF,EAAMU,OAAOH,cARE,SAAAkG,GAAQ,MAAK,CACtCzB,iBAAkB,SAAAkD,GAAW,OAAIzB,EH1C1B,CACLhB,KAAMM,EACNO,QAAS,CACP6B,MGuCkDD,MACtDjD,eAAgB,SAAA1E,GACd0G,EAAW1G,EAAakG,MAiB1B3D,CAGE,SAAAzD,GAAK,OACLR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,0BACbH,EAAAC,EAAAC,cAACqJ,EAAD7I,OAAA8D,OAAA,GAAiBhE,EAAW2I,SCjE5BK,GAAkB,SAAAhJ,GAAS,IAE7BiJ,EAQEjJ,EARFiJ,SACAC,EAOElJ,EAPFkJ,iBACAC,EAMEnJ,EANFmJ,iBACAC,EAKEpJ,EALFoJ,mBACAC,EAIErJ,EAJFqJ,YACAC,EAGEtJ,EAHFsJ,mBACAC,EAEEvJ,EAFFuJ,eACAC,EACExJ,EADFwJ,iBAEF,OACEhK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBAEFH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACuB,MAApBsJ,EACC1J,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWsG,KAAG,EAACvG,UAAU,YACvBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO6J,IAAI,WAAWC,GAAI,GAA1B,iBAGAlK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEuG,GAAG,WACHC,KAAK,OACLC,SAAU,SAAAC,GAAC,OACT8C,EAAmBF,EAAkB5C,EAAEC,OAAOpF,QAEhDA,MAAO8H,EAASU,gBAGpBnK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWsG,KAAG,EAACvG,UAAU,YACvBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO8J,GAAI,GAAX,sCACCT,EAASW,QAAQC,IAAI,SAACpK,EAAGqK,GAAJ,OACpBtK,EAAAC,EAAAC,cAACqK,GAAD,CACEC,gBAAiBf,EAASgB,iBAAmBH,EAC7CZ,iBAAkBA,EAClBgB,OAAQJ,EACRK,OAAQ1K,EAAE2K,WACVC,IAAKP,EACLX,iBAAkB,SAAA7C,GAChB6C,EAAiBD,EAAkB5C,EAAEC,OAAOpF,MAAO2I,IAErDR,mBAAoBA,EACpBC,eAAgBA,MAGpB/J,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0K,SAAO,EACPC,OAAK,EACL/E,MAAM,UACNrD,QAAS,kBAAMkH,EAAYH,KAJ7B,cAQA1J,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0K,SAAO,EACPC,OAAK,EACL/E,MAAM,SACNrD,QAAS,kBAAMqH,EAAiBN,KAJlC,qBAWJ,0BAsBVF,GAAgBhG,aAAe,CAC7BiG,SAAU,GACVC,iBAAkB,GAGpB,IAAMsB,GAAqB,SAAAxK,GAAS,IAEhCmK,EAOEnK,EAPFmK,OACAD,EAMElK,EANFkK,OACAhB,EAKElJ,EALFkJ,iBACAc,EAIEhK,EAJFgK,gBACAb,EAGEnJ,EAHFmJ,iBACAG,EAEEtJ,EAFFsJ,mBACAC,EACEvJ,EADFuJ,eAEF,OACE/J,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYD,UAAU,QACpBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiB4B,UAAU,WACzBhC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE6K,OAAK,EACLC,QAASV,EACT5D,KAAK,QACLuE,KAAK,SACLtE,SAAU,WACRiD,EAAmBJ,EAAkBgB,QAK7C1K,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOuB,MAAOgJ,EAAQ9D,SAAU8C,IAChC3J,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiB4B,UAAU,UACzBhC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0K,SAAO,EACPM,OAAK,EACLzI,QAAS,WACPoH,EAAeL,EAAkBgB,UAmBhClB,0BCnJT6B,GAAe,SAAA7K,GAAS,IAE1B8K,EAIE9K,EAJF8K,UACAC,EAGE/K,EAHF+K,iBACA7B,EAEElJ,EAFFkJ,iBACA8B,EACEhL,EADFgL,cAEF,OACExL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uCAAd,YACY,IACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4F,MAAM,OAAOC,MAAI,GACrBqF,EAAUhH,UAKjBtE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWqL,OAAK,GACbH,EAAUjB,IAAI,SAACqB,EAAGpB,GAAJ,OACbtK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEyK,IAAKP,EACLxG,IAAI,IACJzD,KAAK,IACLsC,QAAS,SAAAmE,GACPA,EAAE6E,iBACFJ,EAAiBjB,IAEnBsB,QAAM,EACNC,OAAQnC,IAAqBY,GAE7BtK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAmBD,UAAU,QAC1BuL,EAAEvB,iBAIa,IAArBmB,EAAUhH,QACTtE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAeiD,UAAQ,GACrBrD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAmBD,UAAU,QAA7B,kBAINH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0D,IAAI,SACJ3D,UAAU,mBACVwC,QAAS,WACP6I,MAGFxL,EAAAC,EAAAC,cAAC4L,GAAA7L,EAAD,CACEE,UAAU,eACVmC,MAAO,CAAEyJ,cAAe,SAT5B,SAwBNV,GAAa7H,aAAe,CAC1B8H,UAAW,CAAC,gBACZ5B,iBAAkB,MAEL2B,UCpFFW,GAAkB,kBAClBC,GAAe,eACfC,GAAqB,qBACrBC,GAAkB,kBAClBC,GAAiB,iBAEvB,SAASC,GAAexE,GAC7B,MAAO,CACLjB,KAAMoF,GACNvE,QAAS,CACPI,gBAmDC,IAAMyE,GAAqB,qBACrBC,GAAa,aACbC,GAAmB,mBACnBC,GAAgB,gBC7C7B,IAKMC,GAAqB,CACzBL,kBACAM,YDXK,WACL,OAAO,SAAC/E,EAAUM,GAEhBN,EAAS,CAAEhB,KAAMqF,KAIjBrE,EAASyE,GADkBnE,IAAnB0E,eAC+BtI,OAAS,MCKlDuI,iBDDK,SAA0BhF,EAAasC,GAC5C,MAAO,CACLvD,KAAMsF,GACNzE,QAAS,CACPI,cACAsC,kBCHJ2C,eDQK,SAAwBjF,GAC7B,OAAO,SAACD,EAAUM,GAChBN,EAAS,CACPhB,KAAMuF,GACN1E,QAAS,CACPI,iBAMJD,EAASyE,GADoBnE,IAArBwB,iBACmC,MClB7CqD,UD+CK,SAAmBlF,GACxB,MAAO,CACLjB,KAAM2F,GACN9E,QAAS,CACPI,iBClDJmF,eDuDK,SAAwBnF,EAAa+C,EAAY9C,GACtD,MAAO,CACLlB,KAAM4F,GACN/E,QAAS,CACPI,cACA+C,aACA9C,eC5DJmF,aDiEK,SAAsBpF,EAAaC,GACxC,MAAO,CACLlB,KAAM6F,GACNhF,QAAS,CACPI,cACAC,eCrEJoF,iBDkCK,SAA0BrF,EAAaC,GAC5C,MAAO,CACLlB,KAAM0F,GACN7E,QAAS,CACPI,cACAC,eCtCJqF,cDkBK,SAAuBC,GAC5B,MAAO,CACLxG,KAAMwF,GACN3E,QAAS,CACP2F,kBCrBJC,YNHK,WAEL,OADA7H,QAAQyC,IAAI,yCACL,SAACL,EAAUM,GAAa,IAEvBoF,EADqBpF,IAAnB0E,eACgCvC,IAAI,SAAAZ,GAAQ,OAClDA,EAASW,QAAQC,IAAI,iBAAM,OAE7BzC,EAAS,CACPhB,KAAMQ,EACNK,QAAS,CACP8F,MAAOD,QMJTE,eACJ,SAAAA,EAAYhN,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4M,GAAA,IAETL,GADR1M,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8M,GAAAzM,KAAAH,KAAMJ,KACyBA,MAAvB2M,cACFC,EAAeK,aAAaC,QAAQ,WAHzB,OAIbN,GACFD,EAAcQ,KAAKC,MAAMR,IALV3M,wEASV,IAAAa,EAgBHV,KAAKJ,MAbPkJ,EAHKpI,EAGLoI,iBACA4B,EAJKhK,EAILgK,UACA/E,EALKjF,EAKLiF,QAEAoG,EAPKrL,EAOLqL,YACAN,EARK/K,EAQL+K,eACAQ,EATKvL,EASLuL,iBACAC,EAVKxL,EAULwL,eACAC,EAXKzL,EAWLyL,UACAC,EAZK1L,EAYL0L,eACAC,EAbK3L,EAaL2L,aACAC,EAdK5L,EAcL4L,iBACAG,EAfK/L,EAeL+L,YAGF,OACErN,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,+BACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2F,GAAG,KACN/F,EAAAC,EAAAC,cAAC2N,GAAD,CACEvC,UAAWA,EACX5B,iBAAkBA,EAClB6B,iBAAkBc,EAClBb,cAAemB,KAGnB3M,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2F,GAAG,KACN/F,EAAAC,EAAAC,cAAC4N,GAAD,CACErE,SAAU6B,EAAU5B,GACpBA,iBAAkBA,EAClBE,mBAAoBiD,EACpBlD,iBAAkBqD,EAClBnD,YAAakD,EACbjD,mBAAoBoD,EACpBnD,eAAgBkD,EAChBjD,iBAAkB8C,MAIxB9M,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,uBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2N,GAAG,QACN/N,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0K,SAAO,EACPC,OAAK,EACLpI,QAAS,WACP0K,IACAI,aAAaO,QAAQ,UAAWL,KAAKM,UAAU3C,IAC/C7G,EAAOuD,KAAK,sCACRzB,GACFA,EAAQS,KAAK,mBAGjBhB,MAAM,WAXR,6BAtDiB1C,IAAMC,WA4EpB6F,eACbnF,YA/FsB,SAAA9C,GAAK,MAAK,CAChCmK,UAAWnK,EAAMyL,eACjBlD,iBAAkBvI,EAAMuI,mBA+FtBgD,GAFFzI,CAGEuJ,4CChGSU,IAnBJC,KAAUC,OACXD,KAAUzD,OAQOyD,KAAUE,MAAM,CACvC5E,SAAU0E,KAAUE,MAAM,CACxBC,SAAUH,KAAUC,OACpBvG,YAAasG,KAAUzD,OACvBP,aAAcgE,KAAUC,OACxBG,aAAcJ,KAAUC,OACxBhE,QAAS+D,KAAUK,QAAQL,KAAUM,YAIhB,CACvBhF,SAAU,CACR6E,SAAU,GACVzG,YAAa,KACbsC,aAAc,KACdoE,aAAc,KACdnE,QAAS,QCtBPsE,GAAc,SAAAlO,GAAS,IACnBkF,EAAgBlF,EAAhBkF,MAAOiJ,EAASnO,EAATmO,KAEf,OACE3O,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAAC0O,EAAA,OAAD,KACE5O,EAAAC,EAAAC,cAAA,aAAQwF,IAEV1F,EAAAC,EAAAC,cAACuG,EAAD,CAAaf,MAAOA,GAClB1F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAC2O,GAAA5O,EAAD,CACE6O,OAAO,UACPC,OAAO,UACPC,OAAO,UACPC,OAAO,UACPN,KAAMA,QASlBD,GAAYlL,aDvBgB,CAC1BkC,MAAO,UACPiJ,KAAM,ICuBOD,UCOf,IAKezK,eALS,SAAA9C,GAAK,MAAK,CAChCI,OAAQJ,EAAM+C,WAAW3C,OACzB8C,YAAalD,EAAMU,OAAOwC,cAGbJ,CAAyBmF,YArCxC,SAAoB5I,GAAO,IACjB6D,EAAyB7D,EAAzB6D,YAAakC,EAAY/F,EAAZ+F,QACf2I,EAAa7K,EAAYC,OAAS,EAClC6K,EAAyC,IAAvB9K,EAAYC,OAAe,SAAW,UACxD8K,EAAuC,IAAvB/K,EAAYC,OAAe,KAAO,MAExD,OACEtE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,0BACZ+O,EACClP,EAAAC,EAAAC,cAACuG,EAAD,CACEf,MAAM,iBACNC,KAAI,mBAAA7D,OAAqBsN,EAArB,KAAAtN,OACFuC,EAAYC,OADV,KAAAxC,OAEAqN,EAFA,6FAIJnP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE4F,MAAM,YACN+E,OAAK,EACLpI,QAAS,WACP4D,EAAQS,KAAK,iBAJjB,eAWFhH,EAAAC,EAAAC,cAACmP,GAAD,CAAa3J,MAAM,kIC3BrB4J,eACJ,SAAAA,EAAY9O,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0O,IACjB7O,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4O,GAAAvO,KAAAH,KAAMJ,KACDW,MAAQ,CACXoO,WAAqB/O,EAAM6C,SAC3BmM,kBAAmB,KACnBC,iBAAkB,MALHhP,wEASV,IAAAiP,EAAA9O,KAAAU,EAC6CV,KAAKJ,MAAjDiJ,EADDnI,EACCmI,SAAUkG,EADXrO,EACWqO,cAAeC,EAD1BtO,EAC0BsO,eAD1BC,EAEmCjP,KAAKO,MAAvCoO,EAFDM,EAECN,WAAYC,EAFbK,EAEaL,kBAEpB,OACExP,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAAC0O,EAAA,OAAD,KACE5O,EAAAC,EAAAC,cAAA,iCAEFF,EAAAC,EAAAC,cAACuG,EAAD/F,OAAA8D,OAAA,CACEkB,MAAM,kBACNG,MAAO4D,EAAS6E,UACZ1N,KAAKJ,OAERiJ,EAASU,cACRnK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBsJ,EAASU,cAE5CV,EAASW,SACRX,EAASW,QAAQC,IAAI,SAACM,EAAQL,GAAT,OACnBtK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0K,QAAS0E,IAAsBlF,EAC/B3D,GAAI2D,EACJO,IAAKP,EACLS,OAAK,EACLpI,QACEgN,EACI,SAAA7I,GACE,IAAMgJ,EAAiBhH,SAAShC,EAAEC,OAAOJ,GAAI,IAC7CgJ,EAAcG,GACdJ,EAAKrO,SAAS,CACZkO,YAAY,EACZC,kBAAmBM,KAGvB,KAEN9J,MAAM,YACN3C,SAAUkM,GAET5E,EAAOC,WACR5K,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOD,UAAU,cAAc6F,MAAM,aAClC4J,GAAkBA,EAAetF,gBAnDzBhH,IAAMC,WA8DjC+L,GAAa9L,aAAe,CAAEiG,SAAUyE,IAEzBoB,UC3BTS,8MACJ5O,MAAQ,CACN6O,YAAa,EACbJ,eAAgB,kFAGLK,EAAmBpI,GAC9B,IAAM+H,EAAiBK,EAAkBpI,GAAawC,IACpD,SAAAM,GAAM,OAAIA,EAAOrG,SAEnB1D,KAAKS,SAAS,SAAA6O,GAAS,OAAAxP,OAAAyP,GAAA,EAAAzP,CAAA,GAAUwP,EAAV,CAAqBN,sDAGrC,IAAAF,EAAA9O,KAAAU,EAUHV,KAAKJ,MARP6D,EAFK/C,EAEL+C,YACAiH,EAHKhK,EAGLgK,UACA8E,EAJK9O,EAIL8O,mBACAC,EALK/O,EAKL+O,sBACAC,EANKhP,EAMLgP,uBAGAL,GATK3O,EAOLiF,QAPKjF,EAQLC,OARKD,EASL2O,mBATKJ,EAWiCjP,KAAKO,MAArC6O,EAXDH,EAWCG,YAAaJ,EAXdC,EAWcD,eACfV,EAAa7K,EAAYC,OAAS,EAClCiM,EAA2BH,GAE7B,EACEI,EAAkBD,EAA2B,EAC7CE,EA1DmB,SAACnF,EAAW8E,GACvC,GAAI9E,GAAaA,EAAU8E,GAAqB,CAC9C,IAAM3G,EAAW6B,EAAU8E,GAEAM,GAA0BjH,EAA7CgB,eAHsC/J,OAAAiQ,GAAA,EAAAjQ,CAGO+I,EAHP,qBAIxCmH,EAA2BC,OAAOT,EAAqB,GACvDU,EAAiBpQ,OAAO0D,KAAKkH,GAAWhH,OAC9C,MAAO,CACLmF,SAAS/I,OAAAyP,GAAA,EAAAzP,CAAA,GACJgQ,EADG,CAEN7I,YAAauI,EACb9B,SAAQ,GAAAxM,OAAK8O,EAAL,KAAA9O,OAAiCgP,MAI/C,OAAO,KA2CqBC,CACxBzF,EACAiF,GAGF,OACEvQ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,0BACZ+O,EACClP,EAAAC,EAAAC,cAAC8Q,GAAD,CACEvH,SAAUgH,EAAkBhH,SAC5BmG,eAAgBA,EAChBvM,UAAQ,EACRyC,OACEoJ,GACElP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE4F,MAAM,YACN+E,OAAK,EACLpI,QAAS,WACP,OAAQqN,GACN,KAAK,GA3DN,SAACS,EAAmBpM,GACnCA,EAAYC,OAAS,GAAKmM,EAC5BpM,EAAY4M,QAAQ,SAAA/M,GAAU,OAC5BA,EAAWgN,KAAKvD,KAAKM,UAAUwC,MAGjCjL,QAAQ0D,MAAM,kCAsDMiI,CAAaV,EAAmBpM,GAChCiM,IACAZ,EAAKrO,SAAS,CACZ2O,YAAa,IAEf,MACF,KAAK,EACHM,IACAZ,EAAKrO,SAAS,CACZ2O,YAAa,IAEf,MACF,KAAK,EAEHN,EAAK0B,aACHnB,EACAM,GAEFb,EAAKrO,SAAS,CACZ2O,YAAa,IAEf,MACF,KAAK,EACHK,EAAsBG,GACtBd,EAAKrO,SAAS,CACZ2O,YAAa,OAOnB,WACA,OAAQA,GACN,KAAK,EACH,OACEhQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACmR,GAAApR,EAAD,CAAUqC,MAAO,CAAEyJ,cAAe,SADpC,mBAKJ,KAAK,EACH,OACE/L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACoR,GAAArR,EAAD,CAAWqC,MAAO,CAAEyJ,cAAe,SADrC,kBAKJ,KAAK,EACH,OACE/L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACqR,GAAAtR,EAAD,CACEqC,MAAO,CAAEyJ,cAAe,SACvB,IAHL,gBAOJ,KAAK,EACH,OACE/L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACsR,GAAAvR,EAAD,CAAiBqC,MAAO,CAAEyJ,cAAe,SAAY,IADvD,iBAKJ,QACE,OAAO/L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,OAjCX,MAyCV3D,EAAAC,EAAAC,cAACmP,GAAD,CAAa3J,MAAM,qCA3HLpC,IAAMC,WA0IxBmJ,GAAqB,CACzB2D,sBZ9JK,SAA+BxI,GACpC,MAAO,CACLjB,KAAM,2BACNa,QAAS,CACPI,iBY2JJyI,uBZtJK,WACL,MAAO,CACL1J,KAAM,8BYuJK3C,eAbS,SAAA9C,GAAK,MAAK,CAChCI,OAAQJ,EAAM+C,WAAW3C,OACzB8C,YAAalD,EAAMU,OAAOwC,YAC1BiH,UAAWnK,EAAMyL,eACjBwD,mBAAoBjP,EAAMU,OAAO4P,gBACjCxB,kBAAmB9O,EAAM8O,oBAUzBvD,GAFazI,CAGbmF,YAAW2G,cC7LA2B,GAAgB,SAACnE,EAAOoE,EAAOC,GAAf,OAC3BrE,EAAMlD,IAAI,SAACwH,EAAMvH,GAAP,OAAcqH,IAAUrH,EAAIsH,EAAQC,GAAQA,KCalDC,GAAc,CAClBvD,aAAc,eACdpE,aAAc,eACdM,eAAgB,KAChBL,QAAS,CACP,CACEQ,WAAY,YAEd,CACEA,WAAY,cAKZmH,GAAY,CAChBnH,WAAY,cCtBD/I,GAAS,WAQjB,IAPHV,EAOGyD,UAAAN,OAAA,QAAA0N,IAAApN,UAAA,GAAAA,UAAA,GAPK,CACNP,YAAa,GACb3C,YAAa,GACb+P,gBAAiB,KACjBtJ,kBAAkB,GAEpByD,EACGhH,UAAAN,OAAA,EAAAM,UAAA,QAAAoN,EACH,OAAQpG,EAAOhF,MACb,IfdoC,2BeelC,OAAOlG,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBsQ,gBAAiB7F,EAAOnE,QAAQI,cAGrD,KAAKZ,EACH,OAAOvG,OAAAyP,GAAA,EAAAzP,CAAA,GACFS,EADL,CAEEkD,YAAY3D,OAAAuR,GAAA,EAAAvR,CAAKS,EAAMkD,aAAZvC,OAAA,CAAyB8J,EAAOnE,QAAQvD,eAGvD,KAAKgD,EACH,OAAOxG,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBO,YAAakK,EAAOnE,QAAQ6B,QAEjD,If1BoC,2Be2BlC,OAAO5I,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBgH,kBAAmBhH,EAAMgH,mBAE9C,QACE,OAAOhH,IC5BA8O,GAAoB,WAAwB,IAAvB9O,EAAuByD,UAAAN,OAAA,QAAA0N,IAAApN,UAAA,GAAAA,UAAA,GAAf,GAAIgH,EAAWhH,UAAAN,OAAA,EAAAM,UAAA,QAAAoN,EACvD,OAAQpG,EAAOhF,MACb,KAAKQ,EAEH,OADA5B,QAAQyC,IAAI,iBACL2D,EAAOnE,QAAQ8F,MAExB,KAAKpG,EAEH,OADA3B,QAAQyC,IAAI,UAAW2D,EAAOnE,SACvBiK,GAAcvQ,EAAOyK,EAAOnE,QAAQI,YAAa,SAAA6D,GAAC,OACvDgG,GAAchG,EAAGE,EAAOnE,QAAQK,UAAW,SAAA7H,GAEzC,OADAA,EAAE+G,KAAK4E,EAAOnE,QAAQM,QACf9H,MAKb,QACE,OAAOkB,ICrBA+C,GAAa,WAMrB,IALH/C,EAKGyD,UAAAN,OAAA,QAAA0N,IAAApN,UAAA,GAAAA,UAAA,GALK,CACNT,KAAM,KACN5C,OAAQ,GAEVqK,EACGhH,UAAAN,OAAA,EAAAM,UAAA,QAAAoN,EACH,OAAQpG,EAAOhF,MACb,KAAKU,EACH,OAAO5G,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBI,OAAQqK,EAAOnE,QAAQD,YAE5C,KAAKH,EACH,OAAO3G,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBgD,KAAMyH,EAAOnE,QAAQtD,OAE1C,QACE,OAAOhD,ICXE+Q,6BAAgB,CAC7BjC,qBACA/L,cACArC,UACA+K,eJkC4B,WAAwB,IAAvBzL,EAAuByD,UAAAN,OAAA,QAAA0N,IAAApN,UAAA,GAAAA,UAAA,GAAf,GAAIgH,EAAWhH,UAAAN,OAAA,EAAAM,UAAA,QAAAoN,EACpD,OAAQpG,EAAOhF,MACb,KAAKqF,GACH,OAAOvL,OAAAuR,GAAA,EAAAvR,CAAIS,GAAXW,OAAA,CAAkBgQ,KAEpB,KAAK5F,GAAoB,IAAAiG,EAUevG,EAAOnE,QAArCI,EAVesK,EAUftK,YAAasC,EAVEgI,EAUFhI,aAEfiI,EAAkBjR,EAAMkR,QAM9B,OALAD,EAAgBvK,GAAhBnH,OAAAyP,GAAA,EAAAzP,CAAA,GACK0R,EAAgBvK,GADrB,CAEEsC,iBAGKiI,EAET,KAAKjG,GAMH,OALqBzL,OAAAuR,GAAA,EAAAvR,CAChBS,EAAMkR,MAAM,EAAGzG,EAAOnE,QAAQI,cADd/F,OAAApB,OAAAuR,GAAA,EAAAvR,CAEhBS,EAAMkR,MAAMzG,EAAOnE,QAAQI,YAAc,KAMhD,KAAK4E,GAAe,IAAA6F,EACiB1G,EAAOnE,QAAlCI,EADUyK,EACVzK,YAAaC,EADHwK,EACGxK,UACrB,OAAO4J,GAAcvQ,EAAO0G,EAAa,SAAA6D,GAAC,OAAAhL,OAAAyP,GAAA,EAAAzP,CAAA,GACrCgL,EADqC,CAExCtB,SD/EsBmD,EC+EC7B,EAAEtB,QD/EIuH,EC+EK7J,ED9ExCyF,EAAMgF,OAAO,SAACV,EAAMvH,GAAP,OAAaqH,IAAUrH,OADT,IAACiD,EAAOoE,ICmFjC,KAAKpF,GAAY,IACP1E,EAAgB+D,EAAOnE,QAAvBI,YAEFuK,EAAkBjR,EAAMkR,QAK9B,OAJAD,EAAgBvK,GAAhBnH,OAAAyP,GAAA,EAAAzP,CAAA,GACKS,EAAM0G,GADX,CAEEuC,QAAQ1J,OAAAuR,GAAA,EAAAvR,CAAKS,EAAM0G,GAAauC,SAAzBtI,OAAA,CAAkCiQ,OAEpCK,EAGT,KAAK5F,GAAkB,IAAAgG,EAC0B5G,EAAOnE,QAA9CI,EADa2K,EACb3K,YAAa+C,EADA4H,EACA5H,WAAY9C,EADZ0K,EACY1K,UAajC,OAAO4J,GAAcvQ,EAAO0G,EAAa,SAAA6D,GAAC,OAAAhL,OAAAyP,GAAA,EAAAzP,CAAA,GACrCgL,EADqC,CAExCtB,QAASsH,GAAchG,EAAEtB,QAAStC,EAAW,SAAA7H,GAAC,OAAAS,OAAAyP,GAAA,EAAAzP,CAAA,GACzCT,EADyC,CAE5C2K,qBAKN,KAAK0B,GAAoB,IAAAmG,EACY7G,EAAOnE,QAAlCI,EADe4K,EACf5K,YAAaC,EADE2K,EACF3K,UACrB,OAAO4J,GAAcvQ,EAAO0G,EAAa,SAAA6D,GAAC,OAAAhL,OAAAyP,GAAA,EAAAzP,CAAA,GACrCgL,EADqC,CAExCjB,eAAgB3C,MAIpB,KAAKsE,GAEH,OADyBR,EAAOnE,QAAxB2F,aAIV,QACE,OAAOjM,II3HXuI,iBJuB8B,WAA0B,IAAzBvI,EAAyByD,UAAAN,OAAA,QAAA0N,IAAApN,UAAA,GAAAA,UAAA,GAAjB,KAAMgH,EAAWhH,UAAAN,OAAA,EAAAM,UAAA,QAAAoN,EACxD,OAAQpG,EAAOhF,MACb,KAAKoF,GACH,OAAOJ,EAAOnE,QAAQI,YAExB,QACE,OAAO1G,MKxBPuR,GAAQC,sBACZC,GACAC,8BAAoBC,0BAAgBC,OAGvBC,GAAA,kBACbhT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+S,EAAA,EAAD,CAAUP,MAAOA,IACf1S,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACgT,EAAD,MACAlT,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWC,KAC9CvT,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAW9F,KAC9CxN,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,UAAWE,KAC5CxT,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWvD,KAC3C/P,EAAAC,EAAAC,cAACH,EAAD,WC9BGkH,GAAiB,iBACjBwM,GAAuB,uBACvBC,GAAuB,uBCG7B,IAAM9R,GAAS,WAajB,IAZHT,EAYGyD,UAAAN,OAAA,QAAA0N,IAAApN,UAAA,GAAAA,UAAA,GAZK,CACNV,WAAY,KACZyP,eAAgB,GAChB9L,YAAa,KACb4J,gBAAiB,IAOnB7F,EACGhH,UAAAN,OAAA,EAAAM,UAAA,QAAAoN,EACH,OAAQpG,EAAOhF,MACb,KAAKK,GACH,OAAOvG,OAAAyP,GAAA,EAAAzP,CAAA,GACFS,EADL,CAEE+C,WAAY0H,EAAOnE,QAAQvD,aAG/B,KAAKuP,GACH,OAAO/S,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBwS,eAAgB/H,EAAOnE,QAAQ6B,QAEpD,KAAKoK,GACH,OAAOhT,OAAAyP,GAAA,EAAAzP,CAAA,GAAKS,EAAZ,CAAmBsQ,gBAAiB7F,EAAOnE,QAAQqK,cAErD,QACE,OAAO3Q,IC9BE+Q,6BAAgB,CAC7BhO,cACAtC,YCEaqC,eAJS,SAAA9C,GAAK,MAAK,CAChCI,OAAQJ,EAAM+C,WAAW3C,SAGZ0C,CAAyB,SAAAzD,GAAK,OAC3CR,EAAAC,EAAAC,cAACqE,EAAD7D,OAAA8D,OAAA,CAAQd,UAAQ,GAAKlD,MCGjBoT,GAAe,SAACvN,EAAUuB,GAAa,IAAAS,EAKvCC,kKAHuBzG,EAFgBwG,EAEzCE,wBACyBC,EAHgBH,EAGzCI,wBACwBC,EAJiBL,EAIzCM,uBAGIxE,EAAO,IAAIyE,IAAK,CACpBC,KAAMhH,EACN2G,OAAmB,SAAXA,EACRE,MAAOI,SAASJ,EAAO,MAGzBd,EAASF,EAAQvD,IAEjBA,EAAK4E,GAAG,QAAS,SAAAE,GACfzD,QAAQ0D,MAAMD,GACdrB,EAASL,EAAgB,MAG3B,IAAMrD,EAAaC,EAAKF,QACtBoC,EACA,CAAEwN,UAAU,IAEdjM,EJ/BK,SAAuB1D,GAC5B,MAAO,CACL0C,KAAMK,GACNQ,QAAS,CACPvD,eI2BK8E,CAAc9E,IACvB0D,EAASL,EAAgB,IAEzBrD,EAAW6E,GAAG,OAAQ,WACpBvD,QAAQyC,IAAI,oBACZL,EAASL,EAAgB,IACzBrD,EAAW6E,GAAG,OAAQ,SAAAlE,GACpB,IJpB6BiN,EIoBvBpN,EAAMiJ,KAAKC,MAAM/I,GACvBW,QAAQyC,IAAI,kBAAmBvD,GAC/BkD,GJtB6BkK,EIsBDpN,EAAI+E,SJrB7B,CACL7C,KAAM8M,GACNjM,QAAS,CACPqK,uBIgCA3I,GAAc,CAClBzD,MAAO,oBACPC,KACE,mFACFW,WAAY,UACZE,SAAU,kBAGGvC,eAZS,SAAA9C,GAAK,MAAK,CAChCkF,SAAUlF,EAAMS,OAAO+R,iBANE,SAAA/L,GAAQ,MAAK,CACtCzB,iBAAkB,SAAAkD,GAAW,OAAIzB,EJpC1B,CACLhB,KAAM6M,GACNhM,QAAS,CACP6B,MIiCwDD,MAC5DjD,eAAgB,SAAAC,GAAQ,OAAIuN,GAAavN,EAAUuB,MAetC3D,CAGb,SAAAzD,GAAK,OACLR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,0BACbH,EAAAC,EAAAC,cAACqJ,EAAD7I,OAAA8D,OAAA,GAAiBhE,EAAW2I,QC9C1B2K,GAAe,SAAAtT,GAAS,IACpBiR,EAAgCjR,EAAhCiR,gBAAiBvN,EAAe1D,EAAf0D,WACnB6P,EAAcrT,OAAO0D,KAAKqN,GAAiBnN,OAAS,EAC1D,OACEtE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKD,UAAU,0BACZ4T,EACC/T,EAAAC,EAAAC,cAAC8Q,GAAD,CACEvH,SAAUgI,EACV9B,cAAe,SAAA7H,GACbtC,QAAQyC,IAAI,uBAAwBH,EAAW2J,GAtBxC,SAACvN,EAAY4D,EAAWD,GACrC3D,GACFA,EAAWgN,KAAK,CACdtK,KAAM,SACNa,QAAS,CACPI,cACAC,YACAC,OAAQ7D,EAAW8P,SAASrN,MAgBxBsN,CAAW/P,EAAY4D,EAAW2J,EAAgB5J,gBAItD7H,EAAAC,EAAAC,cAACmP,GAAD,CAAa3J,MAAM,2BAS3BoO,GAAatQ,aAAe,CAC1BiO,gBAAiBvD,IAGJjK,mBA7CS,SAAA9C,GAAK,MAAK,CAChCsQ,gBAAiBtQ,EAAMS,OAAO6P,gBAC9BvN,WAAY/C,EAAMS,OAAOsC,aA2CZD,CAAyB6P,ICvClCpB,GAAQC,sBACZC,GACAC,8BAAoBC,0BAAgBC,OAkBvBmB,GAfA,kBACblU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+S,EAAA,EAAD,CAAUP,MAAOA,IACf1S,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACiU,GAAD,MACAnU,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAWc,KAC/CpU,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWQ,KAC9C9T,EAAAC,EAAAC,cAACH,EAAD,oBC2BKsU,uBA9Cb,SAAAA,EAAY7T,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyT,IACjB5T,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2T,GAAAtT,KAAAH,KAAMJ,KAEDW,MAAQ,CACX0D,KAAM,IAJSpE,mFAQC,IAAAiP,EAAA9O,KAClB0T,MAAK,GAAAxS,OAAIwG,GAAJ,eACFiM,KAAK,SAAAC,GAAQ,OAAIA,EAAS7O,SAC1B4O,KAAK,SAAA5O,GAAI,OAAI8O,aAAU9O,KACvB4O,KAAK,SAAA1P,GAAI,OAAI6K,EAAKrO,SAAS,CAAEwD,4CAGzB,IACCA,EAASjE,KAAKO,MAAd0D,KACR,OACE7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2F,GAAG,MACN/F,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,UAEFH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OACEC,UAAU,gBACVmC,MAAO,CACLoS,WAAY,iBAEdC,wBAAyB,CAAEC,OAAQ/P,SAM7C7E,EAAAC,EAAAC,cAACH,EAAD,eAxCUuD,IAAMC,YCHpBsR,GAAY,SAAArU,GAAS,IACjB4B,EAAkC5B,EAAlC4B,OAAQuD,EAA0BnF,EAA1BmF,KAAMC,EAAoBpF,EAApBoF,SAAUkP,EAAUtU,EAAVsU,MAChC,OACE9U,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQiC,IAExBpC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,QACE6U,KAAK,MACLC,aAAW,UACX7U,UAAU,UACVmC,MAAO,CAAE2S,SAAU,QAElBH,GAGH9U,EAAAC,EAAAC,cAAA,YAAOyF,IAERC,MAOXiP,GAAUrR,aAAe,CACvBpB,OAAQ,GACRuD,KAAM,GACNC,SAAU,GACVkP,MAAO,IAUMD,UCYAK,GAlDG,kBAChBlV,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gEACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,WACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qHAMFH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK8J,GAAG,KACNlK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAACiV,GAAD,CACE/S,OAAO,eACPuD,KAAK,iGACLmP,MAAM,kCAEN9U,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0D,IAAKC,IACLC,GAAG,kBACH7D,UAAU,4CAHZ,gBAUNH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK8J,GAAG,KACNlK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAACiV,GAAD,CACE/S,OAAO,kBACPuD,KAAK,2GACLmP,MAAM,kCAEN9U,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0D,IAAKC,IACLC,GAAG,iBACH7D,UAAU,4CAHZ,mBAWRH,EAAAC,EAAAC,cAACH,EAAD,QC3BWqV,GAjBH,kBACVpV,EAAAC,EAAAC,cAACmV,EAAA,EAAD,CAAQC,SAAUhN,IAChBtI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0O,EAAA,OAAD,CACE2G,cAAc,eACdC,aAAa,yDAEfxV,EAAAC,EAAAC,cAACuV,EAAA,EAAD,KACEzV,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOE,KAAK,IAAID,OAAK,EAACE,UAAW4B,KACjClV,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWN,KACjChT,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWY,KACjClU,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWe,SCXpBqB,QACW,cAA7BC,OAAOnP,SAASoP,UAEe,UAA7BD,OAAOnP,SAASoP,UAEhBD,OAAOnP,SAASoP,SAASC,MACvB,kECTNC,IAASC,OAAO/V,EAAAC,EAAAC,cAAC8V,GAAD,MAASvT,SAASwT,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.92a820c5.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropDown() {\n    const { dropdownOpen } = this.state;\n    this.setState({\n      dropdownOpen: !dropdownOpen\n    });\n  }\n\n  // \"<span role='img' aria-label='keyboard'>🎮</span> Ready\",\n  // \"<span role='img' aria-label='questionmark'>❓</span> Waiting for connections\",\n  // `<span role='img' aria-label='success'>✅</span> ${numberOfClients} Clients Connected`,\n  // \"<span role='img' aria-label='cross'>❌</span> Error\"\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropDown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport { Form, FormGroup, Button, Input, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nconst ConnectForm = props => {\n  const {\n    onChangeServerId,\n    onClickConnect,\n    serverId,\n    title,\n    text,\n    buttonText,\n    history,\n    location\n  } = props;\n\n  return (\n    <DefaultCard title={title} text={text}>\n      <Form>\n        <FormGroup row className=\"form-row\">\n          <Col md={6}>\n            <Input\n              id=\"serverId\"\n              type=\"text\"\n              value={serverId}\n              onChange={e => onChangeServerId(e.target.value)}\n            />\n          </Col>\n          <Col md={3}>\n            <Button\n              type=\"button\"\n              id=\"connect\"\n              className=\"btn-block\"\n              onClick={() => {\n                onClickConnect(serverId);\n                if (history && location) {\n                  history.push(location);\n                }\n              }}\n            >\n              {buttonText}\n            </Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    </DefaultCard>\n  );\n};\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired\n};\n\nConnectForm.defaultProps = {\n  buttonText: \"Connect\"\n};\n\nexport default ConnectForm;\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: \"SET_CURRENT_QUESTION_IDX\",\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function toggleAcceptingAnswers() {\n  return {\n    type: \"TOGGLE_ACCEPTING_ANSWERS\"\n  };\n}\n","// Server Actions\nexport const REGISTER_ANSWER = \"REGISTER_ANSWER\";\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\n\nexport function registerAnswer(questionIdx, answerIdx, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWER,\n        payload: {\n          questionIdx,\n          answerIdx,\n          userId\n        }\n      });\n    } else {\n      console.log(\"TEST\");\n    }\n  };\n}\n\n// const initAnswerState = () => {\n//   return {\n//     type: INIT_ANSWERS,\n//     payload: {\n//       emptyAnswerArray\n//     }\n//   };\n// };\n\nexport function initAnswers() {\n  console.log(\"Arrived in initAnswers Action Creator\");\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setServerStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport Logger from \"../../shared/util/Logger\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { addConnection, setServerId } from \"../actions/server\";\nimport { registerAnswer } from \"../actions/answers\";\nimport { setPeer, setServerStatus } from \"../../shared/actions/connection\";\n\nconst dataHandler = (data, dispatch) => {\n  const { type, payload } = data;\n  Logger.info(\"Received Data: \", data);\n  switch (type) {\n    case \"answer\":\n      console.log(\"Received answer\", payload);\n      dispatch(\n        registerAnswer(payload.questionIdx, payload.answerIdx, payload.userId)\n      );\n      break;\n    default:\n      console.log(\"Default\");\n  }\n};\n\nconst createPeer = (ownServerId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n  const peer = new Peer(ownServerId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n  dispatch(setPeer(peer));\n\n  peer.on(\"open\", id => {\n    Logger.info(\"Successfully created Peer with id \", id);\n    dispatch(setServerStatus(1));\n  });\n\n  peer.on(\"connection\", connection => {\n    Logger.info(\"New client connected with id: \", connection.peer);\n    connection.on(\"data\", data => dataHandler(data, dispatch));\n    dispatch(setServerStatus(2));\n    dispatch(addConnection(connection));\n  });\n\n  peer.on(\"error\", err => {\n    Logger.error(\"FEHLER: \", err);\n    dispatch(setServerStatus(3));\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: ownServerId => {\n    createPeer(ownServerId, dispatch);\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Create a New Server Id\",\n  text:\n    \"Please define your individual Server Id that you can give to participants.\",\n  buttonText: \"Create\",\n  location: \"/server/wait\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Form,\n  FormGroup,\n  Button,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Label\n} from \"reactstrap\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onAddAnswer,\n    onSetCorrectAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup row className=\"form-row\">\n              <Label for=\"question\" sm={2}>\n                Question Text\n              </Label>\n              <Input\n                id=\"question\"\n                type=\"text\"\n                onChange={e =>\n                  onEditQuestionText(selectedQuestion, e.target.value)\n                }\n                value={question.questionText}\n              />\n            </FormGroup>\n            <FormGroup row className=\"form-row\">\n              <Label sm={8}>Answers (Check the correct answer)</Label>\n              {question.answers.map((a, i) => (\n                <SingleChoiceAnswer\n                  isCorrectAnswer={question.correctAnswers === i}\n                  selectedQuestion={selectedQuestion}\n                  number={i}\n                  answer={a.answerText}\n                  key={i}\n                  onEditAnswerText={e => {\n                    onEditAnswerText(selectedQuestion, e.target.value, i);\n                  }}\n                  onSetCorrectAnswer={onSetCorrectAnswer}\n                  onDeleteAnswer={onDeleteAnswer}\n                />\n              ))}\n              <Button\n                outline\n                block\n                color=\"success\"\n                onClick={() => onAddAnswer(selectedQuestion)}\n              >\n                Add answer\n              </Button>\n              <Button\n                outline\n                block\n                color=\"danger\"\n                onClick={() => onDeleteQuestion(selectedQuestion)}\n              >\n                Delete Question\n              </Button>\n            </FormGroup>\n          </Form>\n        ) : (\n          \"No question selected\"\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    questionType: PropTypes.string,\n    questionText: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nconst SingleChoiceAnswer = props => {\n  const {\n    answer,\n    number,\n    selectedQuestion,\n    isCorrectAnswer,\n    onEditAnswerText,\n    onSetCorrectAnswer,\n    onDeleteAnswer\n  } = props;\n  return (\n    <InputGroup className=\"mb-2\">\n      <InputGroupAddon addonType=\"prepend\">\n        <InputGroupText>\n          <Input\n            addon\n            checked={isCorrectAnswer}\n            type=\"radio\"\n            name=\"answer\"\n            onChange={() => {\n              onSetCorrectAnswer(selectedQuestion, number);\n            }}\n          />\n        </InputGroupText>\n      </InputGroupAddon>\n      <Input value={answer} onChange={onEditAnswerText} />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>\n          <Button\n            outline\n            close\n            onClick={() => {\n              onDeleteAnswer(selectedQuestion, number);\n            }}\n          />\n        </InputGroupText>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n};\n\nSingleChoiceAnswer.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport PropTypes from \"prop-types\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\n\nimport {\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    selectedQuestion,\n    onAddQuestion\n  } = props;\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions{\" \"}\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n\n      <ListGroup flush>\n        {questions.map((q, i) => (\n          <ListGroupItem\n            key={i}\n            tag=\"a\"\n            href=\"#\"\n            onClick={e => {\n              e.preventDefault();\n              onSelectQuestion(i);\n            }}\n            action\n            active={selectedQuestion === i}\n          >\n            <ListGroupItemText className=\"mb-0\">\n              {q.questionText}\n            </ListGroupItemText>\n          </ListGroupItem>\n        ))}\n        {questions.length === 0 && (\n          <ListGroupItem disabled>\n            <ListGroupItemText className=\"mb-0\">No questions</ListGroupItemText>\n          </ListGroupItem>\n        )}\n      </ListGroup>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, questionText) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      questionText\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    // 2: select newest question as `selectedQuestion`\n    const { selectedQuestion } = getState();\n    dispatch(selectQuestion(selectedQuestion - 1));\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_ANSWER = \"SET_CORRECT_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\n\nexport function setCorrectAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, answerText, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      answerText,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport {\n  selectQuestion,\n  addQuestion,\n  editQuestionText,\n  deleteQuestion,\n  loadQuestions,\n  setCorrectAnswer,\n  addAnswer,\n  editAnswerText,\n  deleteAnswer\n} from \"../actions/questionEditor\";\nimport { initAnswers } from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = {\n  selectQuestion,\n  addQuestion,\n  editQuestionText,\n  deleteQuestion,\n  addAnswer,\n  editAnswerText,\n  deleteAnswer,\n  setCorrectAnswer,\n  loadQuestions,\n  initAnswers\n};\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  }\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectAnswer,\n      initAnswers\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectAnswer={setCorrectAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                localStorage.setItem(\"weclare\", JSON.stringify(questions));\n                Logger.info(\"Saved questionset to local Storage\");\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              Save & Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    questionText: PropTypes.string,\n    questionType: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    questionText: null,\n    questionType: null,\n    answers: null\n  }\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex justify-content-center\">\n          <MDSpinner\n            color1=\"#8a817c\"\n            color2=\"#f44336\"\n            color3=\"#dc9125\"\n            color4=\"#5fa15d\"\n            size={size}\n          />\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Row } from \"reactstrap\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\n\nfunction WaitScreen(props) {\n  const { connections, history } = props;\n  const hasClients = connections.length > 0;\n  const pluralizeClient = connections.length === 1 ? \"client\" : \"clients\";\n  const pluralizeVerb = connections.length === 1 ? \"is\" : \"are\";\n\n  return (\n    <Row className=\"justify-content-center\">\n      {hasClients ? (\n        <DefaultCard\n          title=\"Start the quiz\"\n          text={`Currently there ${pluralizeVerb} ${\n            connections.length\n          } ${pluralizeClient} connected. You can choose to wait for more participants or go ahead and start the quiz.`}\n        >\n          <Button\n            color=\"secondary\"\n            block\n            onClick={() => {\n              history.push(\"/server/ask\");\n            }}\n          >\n            Start Quiz\n          </Button>\n        </DefaultCard>\n      ) : (\n        <SpinnerCard title=\"Waiting for participants\" />\n      )}\n    </Row>\n  );\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections\n});\n\nexport default connect(mapStateToProps)(withRouter(WaitScreen));\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TQuestion, DQuestion } from \"../types\";\n\nclass QuestionCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDisabled: false || props.disabled,\n      selectedAnswerIdx: null,\n      correctAnswerIdx: null\n    };\n  }\n\n  render() {\n    const { question, onClickAnswer, countedAnswers } = this.props;\n    const { isDisabled, selectedAnswerIdx } = this.state;\n\n    return (\n      <>\n        <Helmet>\n          <title>Answer question</title>\n        </Helmet>\n        <DefaultCard\n          title=\"Answer question\"\n          badge={question.progress}\n          {...this.props}\n        >\n          {question.questionText && (\n            <h4 className=\"text-center mb-4\">{question.questionText}</h4>\n          )}\n          {question.answers &&\n            question.answers.map((answer, i) => (\n              <Button\n                outline={selectedAnswerIdx !== i}\n                id={i}\n                key={i}\n                block\n                onClick={\n                  onClickAnswer\n                    ? e => {\n                        const selectedAnswer = parseInt(e.target.id, 10);\n                        onClickAnswer(selectedAnswer);\n                        this.setState({\n                          isDisabled: true,\n                          selectedAnswerIdx: selectedAnswer\n                        });\n                      }\n                    : null\n                }\n                color=\"secondary\"\n                disabled={isDisabled}\n              >\n                {answer.answerText}\n                <Badge className=\"float-right\" color=\"secondary\">\n                  {countedAnswers && countedAnswers[i]}\n                </Badge>\n              </Button>\n            ))}\n        </DefaultCard>\n      </>\n    );\n  }\n}\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n} from \"../actions/server\";\n\nconst getFormattedQuestion = (questions, currentQuestionIdx) => {\n  if (questions && questions[currentQuestionIdx]) {\n    const question = questions[currentQuestionIdx];\n\n    const { correctAnswers, ...questionWithoutAnswer } = question;\n    const currentQuestionIdxString = String(currentQuestionIdx + 1);\n    const questionsCount = Object.keys(questions).length;\n    return {\n      question: {\n        ...questionWithoutAnswer,\n        questionIdx: currentQuestionIdx,\n        progress: `${currentQuestionIdxString}/${questionsCount}`\n      }\n    };\n  }\n  return null;\n};\n\nconst sendQuestion = (formattedQuestion, connections) => {\n  if (connections.length > 0 && formattedQuestion) {\n    connections.forEach(connection =>\n      connection.send(JSON.stringify(formattedQuestion))\n    );\n  } else {\n    console.error(\"Can't send question to clients\");\n  }\n};\n\nclass AskScreen extends React.Component {\n  state = {\n    buttonPhase: 0,\n    countedAnswers: null\n  };\n\n  countAnswers(registeredAnswers, questionIdx) {\n    const countedAnswers = registeredAnswers[questionIdx].map(\n      answer => answer.length\n    );\n    this.setState(prevState => ({ ...prevState, countedAnswers }));\n  }\n\n  render() {\n    const {\n      connections,\n      questions,\n      currentQuestionIdx,\n      setCurrentQuestionIdx,\n      toggleAcceptingAnswers,\n      history,\n      status,\n      registeredAnswers\n    } = this.props;\n    const { buttonPhase, countedAnswers } = this.state;\n    const hasClients = connections.length > 0;\n    const currentQuestionIdxNoNull = currentQuestionIdx\n      ? currentQuestionIdx\n      : 0;\n    const nextQuestionIdx = currentQuestionIdxNoNull + 1;\n    const formattedQuestion = getFormattedQuestion(\n      questions,\n      currentQuestionIdxNoNull\n    );\n\n    return (\n      <Row className=\"justify-content-center\">\n        {hasClients ? (\n          <QuestionCard\n            question={formattedQuestion.question}\n            countedAnswers={countedAnswers}\n            disabled\n            footer={\n              hasClients && (\n                <Button\n                  color=\"secondary\"\n                  block\n                  onClick={() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        sendQuestion(formattedQuestion, connections);\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 1\n                        });\n                        break;\n                      case 1:\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 2\n                        });\n                        break;\n                      case 2:\n                        // Show voting results\n                        this.countAnswers(\n                          registeredAnswers,\n                          currentQuestionIdxNoNull\n                        );\n                        this.setState({\n                          buttonPhase: 3\n                        });\n                        break;\n                      case 3:\n                        setCurrentQuestionIdx(nextQuestionIdx);\n                        this.setState({\n                          buttonPhase: 0\n                        });\n                        break;\n                      default:\n                    }\n                  }}\n                >\n                  {(() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        return (\n                          <>\n                            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start\n                            question\n                          </>\n                        );\n                      case 1:\n                        return (\n                          <>\n                            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop\n                            Question\n                          </>\n                        );\n                      case 2:\n                        return (\n                          <>\n                            <FormatListNumberedIcon\n                              style={{ paddingBottom: \"3px\" }}\n                            />{\" \"}\n                            Show Results\n                          </>\n                        );\n                      case 3:\n                        return (\n                          <>\n                            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                            Next Question\n                          </>\n                        );\n                      default:\n                        return <></>;\n                    }\n                  })()}\n                </Button>\n              )\n            }\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for participants\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections,\n  questions: state.questionEditor,\n  currentQuestionIdx: state.server.currentQuestion,\n  registeredAnswers: state.registeredAnswers\n});\n\nconst mapDispatchToProps = {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n","import {\n  ADD_QUESTION,\n  EDIT_QUESTION_TEXT,\n  DELETE_QUESTION,\n  ADD_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_ANSWER,\n  DELETE_ANSWER,\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questionEditor\";\n\nimport { changeInArray, deleteInArray } from \"../../shared/util/Helpers\";\n\nconst newQuestion = {\n  questionType: \"singleChoice\",\n  questionText: \"New question\",\n  correctAnswers: null,\n  answers: [\n    {\n      answerText: \"Answer A\"\n    },\n    {\n      answerText: \"Answer B\"\n    }\n  ]\n};\n\nconst newAnswer = {\n  answerText: \"New answer\"\n};\n\n// Reducers\n\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION:\n      return [...state, newQuestion];\n\n    case EDIT_QUESTION_TEXT: {\n      // return changeInArray(\n      //   state.questions,\n      //   state.selectedQuestion,\n      //   q => ({\n      //     ...q,\n      //     questionText: action.payload.questionText\n      //   })\n      // );\n\n      const { questionIdx, questionText } = action.payload;\n\n      const clonedQuestions = state.slice();\n      clonedQuestions[questionIdx] = {\n        ...clonedQuestions[questionIdx],\n        questionText\n      };\n\n      return clonedQuestions;\n    }\n    case DELETE_QUESTION: {\n      const clonedQuestions = [\n        ...state.slice(0, action.payload.questionIdx),\n        ...state.slice(action.payload.questionIdx + 1)\n      ];\n\n      return clonedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n\n      const clonedQuestions = state.slice();\n      clonedQuestions[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer]\n      };\n      return clonedQuestions;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, answerText, answerIdx } = action.payload;\n\n      // const clonedQuestions = state.slice();\n      // const clonedQuestion = Object.assign({}, clonedQuestions[questionIdx]);\n      // const clonedAnswers = clonedQuestion.answers.slice();\n      // const clonedAnswer = Object.assign({}, clonedAnswers[answerIdx]);\n      // clonedAnswer.answerText = answerText;\n      // clonedAnswers[answerIdx] = clonedAnswer;\n      // clonedQuestion.answers = clonedAnswers;\n      // clonedQuestions[questionIdx] = clonedQuestion;\n\n      // return clonedQuestions;\n\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          answerText\n        }))\n      }));\n    }\n\n    case SET_CORRECT_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        correctAnswers: answerIdx\n      }));\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestion: null,\n    acceptingAnswers: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestion: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWER, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/Helpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      console.log(\"HELLO REDUCER\");\n      return action.payload.array;\n    }\n    case REGISTER_ANSWER: {\n      console.log(\"Reducer\", action.payload);\n      return changeInArray(state, action.payload.questionIdx, q =>\n        changeInArray(q, action.payload.answerIdx, a => {\n          a.push(action.payload.userId);\n          return a;\n        })\n      );\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questionEditor\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./registeredAnswers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport CreatorContainer from \"./CreatorContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport WaitScreen from \"./WaitScreen\";\nimport AskScreen from \"./AskScreen\";\nimport mainReducer from \"../reducers/main\";\n\nconst store = createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={store}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/server/create\" component={CreatorContainer} />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/wait\" component={WaitScreen} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\nconst clickConnect = (serverId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  const peer = new Peer({\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setServerStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: false }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setServerStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setServerStatus(2));\n    connection.on(\"data\", data => {\n      const msg = JSON.parse(data);\n      console.log(\"Received data: \", msg);\n      dispatch(setCurrentQuestion(msg.question));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\n\nimport { TQuestion, DQuestion } from \"../../shared/types\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  connection: state.client.connection\n});\n\nconst sendAnswer = (connection, answerIdx, questionIdx) => {\n  if (connection) {\n    connection.send({\n      type: \"answer\",\n      payload: {\n        questionIdx,\n        answerIdx,\n        userId: connection.provider.id\n      }\n    });\n  }\n};\n\nconst AnswerScreen = props => {\n  const { currentQuestion, connection } = props;\n  const hasQuestion = Object.keys(currentQuestion).length > 0;\n  return (\n    <Row className=\"justify-content-center\">\n      {hasQuestion ? (\n        <QuestionCard\n          question={currentQuestion}\n          onClickAnswer={answerIdx => {\n            console.log(\"Sending back answer \", answerIdx, currentQuestion);\n            sendAnswer(connection, answerIdx, currentQuestion.questionIdx);\n          }}\n        />\n      ) : (\n        <SpinnerCard title=\"Waiting for question\" />\n      )}\n    </Row>\n  );\n};\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport mainReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst store = createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={store}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/client/connect\" component={ConnectorContainer} />\n          <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/README.MD`)\n      .then(response => response.text())\n      .then(text => snarkdown(text))\n      .then(data => this.setState({ data }));\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <Header />\n        <Container>\n          <Row>\n            <Col md=\"12\">\n              <Card className=\"shadow\">\n                <CardHeader>\n                  <h6 className=\"my-0\">About</h6>\n                </CardHeader>\n                <CardBody>\n                  <div\n                    className=\"markdown-body\"\n                    style={{\n                      fontFamily: \"IBM Plex Sans\"\n                    }}\n                    dangerouslySetInnerHTML={{ __html: data }}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Footer />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\nimport \"./scss/App.scss\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./scss/custom.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}