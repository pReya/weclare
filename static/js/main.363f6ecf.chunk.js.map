{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/util/Logger.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","server/actions/server.js","server/actions/answers.js","shared/actions/connection.js","server/components/CreatorContainer.js","shared/components/InfoPopoverIcon.js","server/components/EditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionContent.js","shared/components/SingleFileInput.jsx","server/components/DropboxChooser.js","server/components/QuestionList.js","shared/util/questionsSchema.js","server/actions/questionEditor.js","server/components/QuestionEditor.js","shared/types.js","shared/components/SpinnerCard.js","server/components/WaitScreen.js","shared/components/QuestionCard.js","server/components/AskScreen.js","shared/util/Helpers.js","server/reducers/server.js","server/reducers/registeredAnswers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questionEditor.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropDown","bind","assertThisInitialized","state","dropdownOpen","setState","_this$props","status","isServer","numberOfClients","ownServerId","value","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","style","cursor","QrcodeIcon_default","document","queryCommandSupported","onClick","content","tempInput","body","appendChild","select","execCommand","removeChild","copyToClipboard","ClipboardTextIcon_default","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","Nav","NavItem","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","onChangeServerId","onClickConnect","serverId","buttonText","history","location","components_DefaultCard","Form","FormGroup","row","id","type","onChange","e","target","Button","push","ADD_CONNECTION","SET_SERVER_ID","REGISTER_ANSWER","INIT_ANSWERS","registerAnswer","questionIdx","answerIdx","userId","dispatch","getState","acceptingAnswers","payload","log","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","SET_PEER","SET_CONNECTION_STATUS","setServerStatus","newStatus","setPeer","createPeer","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","on","info","dataHandler","addConnection","err","error","staticProps","withRouter","newServerId","newId","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","size","UncontrolledPopover","trigger","PopoverBody","EditorAnswerInput","isHovered","_this2","answer","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","EditorAnswerInput_RadioInput","onSetCorrectAnswer","EditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_EditorAnswerInput","isCorrect","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","window","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionList","questions","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","onUploadFile","onUploadDropbox","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","UncontrolledButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","DownloadIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_MODE","EDIT_QUESTION_TYPE","DELETE_QUESTION","LOAD_QUESTIONS","SORT_QUESTION","selectQuestion","addQuestion","editQuestionText","editQuestionMode","newMode","oldMode","editQuestionType","newType","oldType","deleteQuestion","loadQuestions","newQuestions","sortQuestion","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","setCorrectSingleAnswer","setCorrectMultiAnswer","addAnswer","editAnswerText","deleteAnswer","sortAnswer","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","objectSpread","questionEditorActions","answerActions","QuestionEditor","loadQuestionsFromStorage","localStorage","getItem","JSON","parse","downloadFile","dataStr","encodeURIComponent","stringify","downloadAnchorNode","setAttribute","getFormattedDate","remove","saveToStorage","setItem","validateAndSaveToStorage","tv4","validate","QuestionSchema","saveFileToStorage","reader","FileReader","onload","readAsText","components_QuestionList","components_QuestionContent","xs","ContentSaveIcon_default","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","DQuestion","PropTypes","string","shape","progress","arrayOf","object","selectedAnswerIdx","SpinnerCard","Helmet","react_md_spinner_lib_default","color1","color2","color3","color4","hasClients","pluralizeClient","pluralizeVerb","components_SpinnerCard","QuestionCard","onClickAnswer","countedAnswers","dangerouslySetInnerHTML","__html","selectedAnswer","AskScreen","buttonPhase","registeredAnswers","prevState","currentQuestionIdx","setCurrentQuestionIdx","toggleAcceptingAnswers","_this$state","currentQuestionIdxNoNull","nextQuestionIdx","formattedQuestion","questionWithoutAnswer","esm_extends","currentQuestionIdxString","String","questionsCount","getFormattedQuestion","components_QuestionCard","forEach","send","sendQuestion","countAnswers","PlayIcon_default","PauseIcon_default","FormatListNumberedIcon_default","SkipForwardIcon_default","currentQuestion","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","undefined","toConsumableArray","q","combineReducers","deepClonedState","nanoid","_action$payload","_action$payload2","firstAnswerFound","_action$payload3","_action$payload4","filter","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","CreatorContainer","WaitScreen","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","newQuestion","clickConnect","timeoutId","heartbeat","setTimeout","socket","_wsOpen","makePeerHeartbeater","reliable","AnswerScreen","initialState","prevProps","resetState","hasQuestion","provider","sendAnswer","clientStore","mainClientReducer","Client","ClientHeaderContainer","ConnectorContainer","About","snarkdown","fontFamily","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Switch","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.363f6ecf.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropDown() {\n    const { dropdownOpen } = this.state;\n    this.setState({\n      dropdownOpen: !dropdownOpen\n    });\n  }\n\n  // \"<span role='img' aria-label='keyboard'>🎮</span> Ready\",\n  // \"<span role='img' aria-label='questionmark'>❓</span> Waiting for connections\",\n  // `<span role='img' aria-label='success'>✅</span> ${numberOfClients} Clients Connected`,\n  // \"<span role='img' aria-label='cross'>❌</span> Error\"\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropDown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between bg-white\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport { Form, FormGroup, Button, Input, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nconst ConnectForm = props => {\n  const {\n    onChangeServerId,\n    onClickConnect,\n    serverId,\n    title,\n    text,\n    buttonText,\n    history,\n    location\n  } = props;\n\n  return (\n    <DefaultCard title={title} text={text}>\n      <Form>\n        <FormGroup row className=\"form-row\">\n          <Col md={6}>\n            <Input\n              id=\"serverId\"\n              type=\"text\"\n              value={serverId}\n              onChange={e => onChangeServerId(e.target.value)}\n            />\n          </Col>\n          <Col md={3}>\n            <Button\n              type=\"button\"\n              id=\"connect\"\n              className=\"btn-block\"\n              onClick={() => {\n                onClickConnect(serverId);\n                if (history && location) {\n                  history.push(location);\n                }\n              }}\n            >\n              {buttonText}\n            </Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    </DefaultCard>\n  );\n};\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired\n};\n\nConnectForm.defaultProps = {\n  buttonText: \"Connect\"\n};\n\nexport default ConnectForm;\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: \"SET_CURRENT_QUESTION_IDX\",\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function toggleAcceptingAnswers() {\n  return {\n    type: \"TOGGLE_ACCEPTING_ANSWERS\"\n  };\n}\n","// Server Actions\nexport const REGISTER_ANSWER = \"REGISTER_ANSWER\";\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\n\nexport function registerAnswer(questionIdx, answerIdx, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWER,\n        payload: {\n          questionIdx,\n          answerIdx,\n          userId\n        }\n      });\n    } else {\n      console.log(\"TEST\");\n    }\n  };\n}\n\n// const initAnswerState = () => {\n//   return {\n//     type: INIT_ANSWERS,\n//     payload: {\n//       emptyAnswerArray\n//     }\n//   };\n// };\n\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setServerStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport Logger from \"../../shared/util/Logger\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { addConnection, setServerId } from \"../actions/server\";\nimport { registerAnswer } from \"../actions/answers\";\nimport { setPeer, setServerStatus } from \"../../shared/actions/connection\";\n\nconst dataHandler = (data, dispatch) => {\n  const { type, payload } = data;\n  Logger.info(\"Received Data: \", data);\n  switch (type) {\n    case \"answer\":\n      console.log(\"Received answer\", payload);\n      dispatch(\n        registerAnswer(payload.questionIdx, payload.answerIdx, payload.userId)\n      );\n      break;\n    default:\n      console.log(\"Default\");\n  }\n};\n\nconst createPeer = (ownServerId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n  const peer = new Peer(ownServerId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n  dispatch(setPeer(peer));\n\n  peer.on(\"open\", id => {\n    Logger.info(\"Successfully created Peer with id \", id);\n    dispatch(setServerStatus(1));\n  });\n\n  peer.on(\"connection\", connection => {\n    Logger.info(\"New client connected with id: \", connection.peer);\n    connection.on(\"data\", data => dataHandler(data, dispatch));\n    dispatch(setServerStatus(2));\n    dispatch(addConnection(connection));\n  });\n\n  peer.on(\"error\", err => {\n    Logger.error(\"FEHLER: \", err);\n    dispatch(setServerStatus(3));\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: ownServerId => {\n    createPeer(ownServerId, dispatch);\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Create a New Server Id\",\n  text:\n    \"Please define your individual Server Id that you can give to participants.\",\n  buttonText: \"Create\",\n  location: \"/server/wait\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={18}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass EditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default EditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport EditorAnswerInput from \"./EditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">Question Text</Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  Answers{\" \"}\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <EditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon style={{ marginBottom: \"3px\" }} />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color=\"light\" caret>\n              <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem>\n                <SingleFileInput onSelectFile={file => onUploadFile(file)}>\n                  <div>\n                    <FileUploadIcon className=\"text-secondary\" /> File\n                  </div>\n                </SingleFileInput>\n              </DropdownItem>\n              <DropdownItem>\n                <DropboxChooser\n                  appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n                  linkType=\"direct\"\n                  success={e => {\n                    fetch(e[0].link)\n                      .then(response => response.text())\n                      .then(text => onUploadDropbox(text));\n                  }}\n                >\n                  <DropboxIcon className=\"text-secondary\" /> Dropbox\n                </DropboxChooser>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const SORT_QUESTION = \"SORT_QUESTION\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { selectedQuestion } = getState();\n    if (selectedQuestion <= 0) {\n      dispatch(selectQuestion(0));\n    } else {\n      dispatch(selectQuestion(selectedQuestion - 1));\n    }\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport const SORT_ANSWER = \"SORT_ANSWER\";\n\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport tv4 from \"tv4\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport QuestionSchema from \"../../shared/util/questionsSchema\";\nimport * as questionEditorActions from \"../actions/questionEditor\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = { ...questionEditorActions, ...answerActions };\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadQuestionsFromStorage();\n  }\n\n  static getFormattedDate = () => {\n    const today = new Date();\n    let dd = today.getDate();\n\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    return `${dd}-${mm}-${yyyy}`;\n  };\n\n  loadQuestionsFromStorage = () => {\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  };\n\n  downloadFile = data => {\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\n      \"download\",\n      `weclare-${QuestionEditor.getFormattedDate()}.json`\n    );\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    Logger.info(\"Created and started file download\");\n  };\n\n  saveToStorage = data => {\n    localStorage.setItem(\"weclare\", data);\n    Logger.info(\"Saved questionset to local storage\");\n  };\n\n  validateAndSaveToStorage = data => {\n    const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n    if (valid) {\n      Logger.info(\"Questionset was successfully validated\");\n      this.saveToStorage(data);\n      this.loadQuestionsFromStorage();\n    } else {\n      Logger.error(\"Imported file was invalid\", tv4.error);\n    }\n  };\n\n  saveFileToStorage = file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.validateAndSaveToStorage(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                this.saveToStorage(JSON.stringify(questions));\n                this.downloadFile(questions);\n              }}\n              onUploadFile={this.saveFileToStorage}\n              onUploadDropbox={this.validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                this.saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.array.isRequired,\n  // Questions\n  loadQuestions: PropTypes.func.isRequired,\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    text: null,\n    type: null,\n    answers: null\n  },\n  disabled: false,\n  selectedAnswerIdx: null\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex justify-content-center\">\n          <MDSpinner\n            color1=\"#8a817c\"\n            color2=\"#f44336\"\n            color3=\"#dc9125\"\n            color4=\"#5fa15d\"\n            size={size}\n          />\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Row } from \"reactstrap\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\n\nfunction WaitScreen(props) {\n  const { connections, history } = props;\n  const hasClients = connections.length > 0;\n  const pluralizeClient = connections.length === 1 ? \"client\" : \"clients\";\n  const pluralizeVerb = connections.length === 1 ? \"is\" : \"are\";\n\n  return (\n    <Row className=\"justify-content-center\">\n      {hasClients ? (\n        <DefaultCard\n          title=\"Start the quiz\"\n          text={`Currently there ${pluralizeVerb} ${\n            connections.length\n          } ${pluralizeClient} connected. You can choose to wait for more participants or just go ahead and start the quiz.`}\n        >\n          <Button\n            color=\"secondary\"\n            block\n            onClick={() => {\n              history.push(\"/server/ask\");\n            }}\n          >\n            Start Quiz\n          </Button>\n        </DefaultCard>\n      ) : (\n        <SpinnerCard title=\"Waiting for participants\" />\n      )}\n    </Row>\n  );\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections\n});\n\nexport default connect(mapStateToProps)(withRouter(WaitScreen));\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TQuestion, DQuestion } from \"../types\";\n\nconst QuestionCard = props => {\n  const {\n    question,\n    onClickAnswer,\n    countedAnswers,\n    disabled,\n    selectedAnswerIdx\n  } = props;\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <DefaultCard title=\"Answer question\" badge={question.progress} {...props}>\n        {question.text && (\n          <div\n            className=\"text-center mb-4 h4\"\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={selectedAnswerIdx !== i}\n              id={i}\n              key={i}\n              block\n              onClick={\n                onClickAnswer\n                  ? e => {\n                      const selectedAnswer = parseInt(e.target.id, 10);\n                      onClickAnswer(selectedAnswer);\n                    }\n                  : null\n              }\n              color=\"secondary\"\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge className=\"float-right\" color=\"secondary\">\n                  {countedAnswers[i] !== 0 && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n} from \"../actions/server\";\n\nconst getFormattedQuestion = (questions, currentQuestionIdx) => {\n  if (questions && questions[currentQuestionIdx]) {\n    const question = questions[currentQuestionIdx];\n\n    const { ...questionWithoutAnswer } = question;\n    const currentQuestionIdxString = String(currentQuestionIdx + 1);\n    const questionsCount = Object.keys(questions).length;\n    return {\n      question: {\n        ...questionWithoutAnswer,\n        questionIdx: currentQuestionIdx,\n        progress: `${currentQuestionIdxString}/${questionsCount}`\n      }\n    };\n  }\n  return null;\n};\n\nconst sendQuestion = (formattedQuestion, connections) => {\n  if (connections.length > 0 && formattedQuestion) {\n    connections.forEach(connection =>\n      connection.send(JSON.stringify(formattedQuestion))\n    );\n  } else {\n    console.error(\"Can't send question to clients\");\n  }\n};\n\nclass AskScreen extends React.Component {\n  state = {\n    buttonPhase: 0,\n    countedAnswers: null\n  };\n\n  countAnswers(registeredAnswers, questionIdx) {\n    const countedAnswers = registeredAnswers[questionIdx].map(\n      answer => answer.length\n    );\n    this.setState(prevState => ({ ...prevState, countedAnswers }));\n  }\n\n  render() {\n    const {\n      connections,\n      questions,\n      currentQuestionIdx,\n      setCurrentQuestionIdx,\n      toggleAcceptingAnswers,\n      history,\n      status,\n      registeredAnswers\n    } = this.props;\n    const { buttonPhase, countedAnswers } = this.state;\n    const hasClients = connections.length > 0;\n    const currentQuestionIdxNoNull = currentQuestionIdx\n      ? currentQuestionIdx\n      : 0;\n    const nextQuestionIdx = currentQuestionIdxNoNull + 1;\n    const formattedQuestion = getFormattedQuestion(\n      questions,\n      currentQuestionIdxNoNull\n    );\n    return (\n      <Row className=\"justify-content-center\">\n        {hasClients ? (\n          <QuestionCard\n            question={formattedQuestion.question}\n            countedAnswers={countedAnswers}\n            disabled\n            footer={\n              hasClients && (\n                <Button\n                  color=\"secondary\"\n                  block\n                  onClick={() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        sendQuestion(formattedQuestion, connections);\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 1\n                        });\n                        break;\n                      case 1:\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 2\n                        });\n                        break;\n                      case 2:\n                        // Show voting results\n                        this.countAnswers(\n                          registeredAnswers,\n                          currentQuestionIdxNoNull\n                        );\n                        this.setState({\n                          buttonPhase: 3\n                        });\n                        break;\n                      case 3:\n                        setCurrentQuestionIdx(nextQuestionIdx);\n                        this.setState({\n                          buttonPhase: 0\n                        });\n                        break;\n                      default:\n                    }\n                  }}\n                >\n                  {(() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        return (\n                          <>\n                            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start\n                            question\n                          </>\n                        );\n                      case 1:\n                        return (\n                          <>\n                            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop\n                            Question\n                          </>\n                        );\n                      case 2:\n                        return (\n                          <>\n                            <FormatListNumberedIcon\n                              style={{ paddingBottom: \"3px\" }}\n                            />{\" \"}\n                            Show Results\n                          </>\n                        );\n                      case 3:\n                        return (\n                          <>\n                            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                            Next Question\n                          </>\n                        );\n                      default:\n                        return <></>;\n                    }\n                  })()}\n                </Button>\n              )\n            }\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for participants\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections,\n  questions: state.questionEditor,\n  currentQuestionIdx: state.server.currentQuestion,\n  registeredAnswers: state.registeredAnswers\n});\n\nconst mapDispatchToProps = {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestion: null,\n    acceptingAnswers: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestion: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWER, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/Helpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWER: {\n      console.log(\"Reducer\", action.payload);\n      return changeInArray(state, action.payload.questionIdx, q =>\n        changeInArray(q, action.payload.answerIdx, a => {\n          a.push(action.payload.userId);\n          return a;\n        })\n      );\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questionEditor\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./registeredAnswers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questionEditor\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray\n} from \"../../shared/util/Helpers\";\n\nconst newQuestion = () => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState.push(newQuestion());\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      console.log(\"Mode reducer: \", action.payload);\n      const { questionIdx, newMode, oldMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      console.log(\"Type reducer: \", action.payload);\n      const { questionIdx, newType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      return deepClonedState;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport CreatorContainer from \"./CreatorContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport WaitScreen from \"./WaitScreen\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/server/create\" component={CreatorContainer} />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/wait\" component={WaitScreen} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport Logger from \"../../shared/util/Logger\";\nimport { setServerStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\n// Source: https://github.com/peers/peerjs/issues/227#issue-39009356\nconst makePeerHeartbeater = peer => {\n  let timeoutId = 0;\n  function heartbeat() {\n    timeoutId = setTimeout(heartbeat, 20000);\n    // eslint-disable-next-line\n    if (peer.socket._wsOpen()) {\n      peer.socket.send({ type: \"HEARTBEAT\" });\n      Logger.info(\"Sent heartbeat\");\n    }\n  }\n  // Start\n  heartbeat();\n  // return\n  return {\n    start() {\n      if (timeoutId === 0) {\n        heartbeat();\n      }\n    },\n    stop() {\n      clearTimeout(timeoutId);\n      timeoutId = 0;\n    }\n  };\n};\n\nconst clickConnect = (serverId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  const peer = new Peer({\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n\n  const heartbeater = makePeerHeartbeater(peer);\n\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setServerStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: false }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setServerStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setServerStatus(2));\n    connection.on(\"data\", data => {\n      const msg = JSON.parse(data);\n      console.log(\"Received data: \", msg);\n      dispatch(setCurrentQuestion(msg.question));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\n\nimport { TQuestion, DQuestion } from \"../../shared/types\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  connection: state.client.connection\n});\n\nconst sendAnswer = (connection, answerIdx, questionIdx) => {\n  if (connection) {\n    connection.send({\n      type: \"answer\",\n      payload: {\n        questionIdx,\n        answerIdx,\n        userId: connection.provider.id\n      }\n    });\n  }\n};\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswerIdx: null\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n    }\n  }\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { currentQuestion, connection } = this.props;\n    const { disabled, selectedAnswerIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard\n            question={currentQuestion}\n            disabled={disabled}\n            selectedAnswerIdx={selectedAnswerIdx}\n            onClickAnswer={answerIdx => {\n              console.log(\"Sending back answer \", answerIdx, currentQuestion);\n              sendAnswer(connection, answerIdx, currentQuestion.questionIdx);\n              this.setState(\n                {\n                  disabled: true,\n                  selectedAnswerIdx: answerIdx\n                },\n                () => console.log(\"New state\", this.state)\n              );\n            }}\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for question\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/client/connect\" component={ConnectorContainer} />\n          <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/README.MD`)\n      .then(response => response.text())\n      .then(text => snarkdown(text))\n      .then(data => this.setState({ data }));\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <Header />\n        <Container>\n          <Row>\n            <Col md=\"12\">\n              <Card className=\"shadow\">\n                <CardHeader>\n                  <h6 className=\"my-0\">About</h6>\n                </CardHeader>\n                <CardBody>\n                  <div\n                    className=\"markdown-body\"\n                    style={{\n                      fontFamily: \"IBM Plex Sans\"\n                    }}\n                    dangerouslySetInnerHTML={{ __html: data }}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Footer />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}