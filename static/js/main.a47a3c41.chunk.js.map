{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","util/Logger.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","server/actions/server.js","shared/actions/connection.js","server/components/CreatorContainer.js","server/components/QuestionContent.js","server/components/QuestionList.js","server/actions/questionEditor.js","server/components/QuestionEditor.js","server/components/Waiter.js","server/reducers/helpers.js","server/reducers/questionEditor.js","server/reducers/server.js","shared/reducers/connection.js","server/reducers/main.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","reactstrap_es","href","GithubCircleIcon_default","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropDown","bind","assertThisInitialized","state","dropdownOpen","setState","_this$props","status","isServer","numberOfClients","ownServerId","value","client","server","concat","includes","addonType","isOpen","toggle","caret","header","divider","style","cursor","QrcodeIcon_default","document","queryCommandSupported","onClick","content","tempInput","body","appendChild","select","execCommand","removeChild","ClipboardTextIcon_default","LinkIcon_default","disabled","React","Component","defaultProps","Header","isClient","Fragment","expand","ConnectionIndicator_ConnectionIndicator","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","DefaultCard","title","text","children","badge","md","color","pill","ConnectForm","onChangeServerId","onClickConnect","serverId","buttonText","history","location","components_DefaultCard","row","id","type","onChange","e","target","push","ADD_CONNECTION","SET_SERVER_ID","SET_PEER","SET_CONNECTION_STATUS","setServerStatus","newStatus","payload","setPeer","createPeer","dispatch","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","on","info","addConnection","err","error","staticProps","withRouter","newServerId","newId","components_ConnectForm","QuestionContent","question","selectedQuestion","onEditAnswerText","onEditQuestionText","onAddAnswer","onSetCorrectAnswer","onDeleteAnswer","onDeleteQuestion","for","sm","questionText","answers","map","i","QuestionContent_SingleChoiceAnswer","isCorrectAnswer","correctAnswers","number","answer","answerText","key","outline","block","SingleChoiceAnswer","addon","checked","name","close","QuestionList","questions","onSelectQuestion","onAddQuestion","flush","q","preventDefault","action","active","Add_default","paddingBottom","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","DELETE_QUESTION","LOAD_QUESTIONS","selectQuestion","questionIdx","SET_CORRECT_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","mapDispatchToProps","addQuestion","getState","questionEditor","editQuestionText","deleteQuestion","addAnswer","editAnswerText","answerIdx","deleteAnswer","setCorrectAnswer","loadQuestions","newQuestions","QuestionEditor","localStorage","getItem","JSON","parse","components_QuestionList","components_QuestionContent","setItem","stringify","sendCurrentQuestion","currentQuestionIdx","questionWithoutAnswer","objectWithoutProperties","objectSpread","String","forEach","send","setCurrentQuestionIdx","currentQuestion","hasClients","nextQuestionIdx","Helmet","lib_default","color1","color2","color3","color4","size","changeInArray","array","index","changer","item","newQuestion","questionType","newAnswer","undefined","toConsumableArray","combineReducers","_action$payload","clonedQuestions","slice","_action$payload2","filter","_action$payload3","_action$payload4","store","createStore","mainReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","ServerHeaderContainer","Route","exact","path","component","CreatorContainer","Waiter","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","clickConnect","reliable","log","Client","ClientHeaderContainer","ConnectorContainer","AnswerScreen","About","_this2","fetch","then","response","snarkdown","fontFamily","dangerouslySetInnerHTML","__html","SelectBox","emoji","role","aria-label","fontSize","StartPage","src_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Switch","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a47a3c41.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropDown() {\n    const { dropdownOpen } = this.state;\n    this.setState({\n      dropdownOpen: !dropdownOpen\n    });\n  }\n\n  // \"<span role='img' aria-label='keyboard'>🎮</span> Ready\",\n  // \"<span role='img' aria-label='questionmark'>❓</span> Waiting for connections\",\n  // `<span role='img' aria-label='success'>✅</span> ${numberOfClients} Clients Connected`,\n  // \"<span role='img' aria-label='cross'>❌</span> Error\"\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropDown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","import React from \"react\";\nimport { Card, CardHeader, CardBody, CardText, Col, Badge } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport { Form, FormGroup, Button, Input, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nconst ConnectForm = props => {\n  const {\n    onChangeServerId,\n    onClickConnect,\n    serverId,\n    title,\n    text,\n    buttonText,\n    history,\n    location\n  } = props;\n\n  return (\n    <DefaultCard title={title} text={text}>\n      <Form>\n        <FormGroup row className=\"form-row\">\n          <Col md={6}>\n            <Input\n              id=\"serverId\"\n              type=\"text\"\n              value={serverId}\n              onChange={e => onChangeServerId(e.target.value)}\n            />\n          </Col>\n          <Col md={3}>\n            <Button\n              type=\"button\"\n              id=\"connect\"\n              className=\"btn-block\"\n              onClick={() => {\n                onClickConnect(serverId);\n                if (history && location) {\n                  history.push(location);\n                }\n              }}\n            >\n              {buttonText}\n            </Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    </DefaultCard>\n  );\n};\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired\n};\n\nConnectForm.defaultProps = {\n  buttonText: \"Connect\"\n};\n\nexport default ConnectForm;\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: \"SET_CURRENT_QUESTION_IDX\",\n    payload: {\n      questionIdx\n    }\n  };\n}\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setServerStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport Logger from \"../../util/Logger\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { addConnection, setServerId } from \"../actions/server\";\nimport { setPeer, setServerStatus } from \"../../shared/actions/connection\";\n\nconst createPeer = (ownServerId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n  const peer = new Peer(ownServerId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n  dispatch(setPeer(peer));\n\n  peer.on(\"open\", id => {\n    Logger.info(\"Successfully created Peer with id \", id);\n    dispatch(setServerStatus(1));\n  });\n\n  peer.on(\"connection\", connection => {\n    Logger.info(\"New client connected with id: \", connection.peer);\n    connection.on(\"data\", data => Logger.info(\"Received Data: \", data));\n    dispatch(setServerStatus(2));\n    dispatch(addConnection(connection));\n  });\n\n  peer.on(\"error\", err => {\n    Logger.error(\"FEHLER: \", err);\n    dispatch(setServerStatus(3));\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: ownServerId => {\n    createPeer(ownServerId, dispatch);\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Create a New Server Id\",\n  text:\n    \"Please define your individual Server Id that you can give to participants.\",\n  buttonText: \"Create\",\n  location: \"/server/wait\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Form,\n  FormGroup,\n  Button,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Label\n} from \"reactstrap\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onAddAnswer,\n    onSetCorrectAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup row className=\"form-row\">\n              <Label for=\"question\" sm={2}>\n                Question Text\n              </Label>\n              <Input\n                id=\"question\"\n                type=\"text\"\n                onChange={e =>\n                  onEditQuestionText(selectedQuestion, e.target.value)\n                }\n                value={question.questionText}\n              />\n            </FormGroup>\n            <FormGroup row className=\"form-row\">\n              <Label sm={8}>Answers (Check the correct answer)</Label>\n              {question.answers.map((a, i) => (\n                <SingleChoiceAnswer\n                  isCorrectAnswer={question.correctAnswers === i}\n                  selectedQuestion={selectedQuestion}\n                  number={i}\n                  answer={a.answerText}\n                  key={i}\n                  onEditAnswerText={e => {\n                    onEditAnswerText(selectedQuestion, e.target.value, i);\n                  }}\n                  onSetCorrectAnswer={onSetCorrectAnswer}\n                  onDeleteAnswer={onDeleteAnswer}\n                />\n              ))}\n              <Button\n                outline\n                block\n                color=\"success\"\n                onClick={() => onAddAnswer(selectedQuestion)}\n              >\n                Add answer\n              </Button>\n              <Button\n                outline\n                block\n                color=\"danger\"\n                onClick={() => onDeleteQuestion(selectedQuestion)}\n              >\n                Delete Question\n              </Button>\n            </FormGroup>\n          </Form>\n        ) : (\n          \"No question selected\"\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    questionType: PropTypes.string,\n    questionText: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nconst SingleChoiceAnswer = props => {\n  const {\n    answer,\n    number,\n    selectedQuestion,\n    isCorrectAnswer,\n    onEditAnswerText,\n    onSetCorrectAnswer,\n    onDeleteAnswer\n  } = props;\n  return (\n    <InputGroup className=\"mb-2\">\n      <InputGroupAddon addonType=\"prepend\">\n        <InputGroupText>\n          <Input\n            addon\n            checked={isCorrectAnswer}\n            type=\"radio\"\n            name=\"answer\"\n            onChange={() => {\n              onSetCorrectAnswer(selectedQuestion, number);\n            }}\n          />\n        </InputGroupText>\n      </InputGroupAddon>\n      <Input value={answer} onChange={onEditAnswerText} />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>\n          <Button\n            outline\n            close\n            onClick={() => {\n              onDeleteAnswer(selectedQuestion, number);\n            }}\n          />\n        </InputGroupText>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n};\n\nSingleChoiceAnswer.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport PropTypes from \"prop-types\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nimport {\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    selectedQuestion,\n    onAddQuestion\n  } = props;\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions{\" \"}\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n\n      <ListGroup flush>\n        {questions.map((q, i) => (\n          <ListGroupItem\n            key={i}\n            tag=\"a\"\n            href=\"#\"\n            onClick={e => {\n              e.preventDefault();\n              onSelectQuestion(i);\n            }}\n            action\n            active={selectedQuestion === i}\n          >\n            <ListGroupItemText className=\"mb-0\">\n              {q.questionText}\n            </ListGroupItemText>\n          </ListGroupItem>\n        ))}\n        {questions.length === 0 && (\n          <ListGroupItem disabled>\n            <ListGroupItemText className=\"mb-0\">No questions</ListGroupItemText>\n          </ListGroupItem>\n        )}\n      </ListGroup>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddIcon className=\"text-success\" style={{ paddingBottom: \"3px\" }} />\n        Add\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, questionText) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      questionText\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    // 2: select newest question as `selectedQuestion`\n    const { selectedQuestion } = getState();\n    dispatch(selectQuestion(selectedQuestion - 1));\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_ANSWER = \"SET_CORRECT_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\n\nexport function setCorrectAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, answerText, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      answerText,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Logger from \"../../util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport {\n  selectQuestion,\n  addQuestion,\n  editQuestionText,\n  deleteQuestion,\n  loadQuestions,\n  setCorrectAnswer,\n  addAnswer,\n  editAnswerText,\n  deleteAnswer\n} from \"../actions/questionEditor\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = {\n  selectQuestion,\n  addQuestion,\n  editQuestionText,\n  deleteQuestion,\n  addAnswer,\n  editAnswerText,\n  deleteAnswer,\n  setCorrectAnswer,\n  loadQuestions\n};\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  }\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      location,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectAnswer\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectAnswer={setCorrectAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col md=\"2\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                localStorage.setItem(\"weclare\", JSON.stringify(questions));\n                Logger.info(\"Saved questionset to local Storage\");\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              Save & Continue\n            </Button>\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\nimport { setCurrentQuestionIdx } from \"../actions/server\";\n\nconst sendCurrentQuestion = (connections, questions, currentQuestionIdx) => {\n  const question = questions[currentQuestionIdx];\n  if (question) {\n    const { correctAnswers, ...questionWithoutAnswer } = question;\n    const msg = {\n      question: {\n        ...questionWithoutAnswer,\n        questionIdx: String(currentQuestionIdx + 1)\n      }\n    };\n    if (connections.length > 0 && questions.length > 0) {\n      connections.forEach(connection => connection.send(JSON.stringify(msg)));\n    }\n  } else {\n    console.error(\"Can't send question to clients\");\n  }\n};\n\nfunction Waiter(props) {\n  const {\n    connections,\n    questions,\n    currentQuestionIdx,\n    setCurrentQuestionIdx,\n    history,\n    status\n  } = props;\n  const hasClients = connections.length > 0;\n  const nextQuestionIdx = currentQuestionIdx + 1;\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {hasClients ? \"Send question\" : \"Waiting for participants\"}\n        </title>\n      </Helmet>\n      <Row className=\"justify-content-center\">\n        <DefaultCard\n          title={hasClients ? \"Send questions\" : \"Waiting for participants\"}\n          text={hasClients ? \"Do you want to start the quiz?\" : \"\"}\n        >\n          {hasClients ? (\n            <Button\n              outline\n              block\n              color=\"success\"\n              onClick={() => {\n                sendCurrentQuestion(connections, questions, currentQuestionIdx);\n                setCurrentQuestionIdx(nextQuestionIdx);\n              }}\n            >\n              Send Next Question\n            </Button>\n          ) : (\n            <div className=\"d-flex justify-content-center\">\n              <MDSpinner\n                color1=\"#8a817c\"\n                color2=\"#f44336\"\n                color3=\"#dc9125\"\n                color4=\"#5fa15d\"\n                size={30}\n              />\n            </div>\n          )}\n        </DefaultCard>\n      </Row>\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections,\n  questions: state.questionEditor,\n  currentQuestionIdx: state.server.currentQuestion\n});\n\nconst mapDispatchToProps = {\n  setCurrentQuestionIdx\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(Waiter));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n","import {\n  ADD_QUESTION,\n  EDIT_QUESTION_TEXT,\n  DELETE_QUESTION,\n  ADD_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_ANSWER,\n  DELETE_ANSWER,\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questionEditor\";\n\nimport { changeInArray, deleteInArray } from \"./helpers\";\n\nconst newQuestion = {\n  questionType: \"singleChoice\",\n  questionText: \"New question\",\n  correctAnswers: null,\n  answers: [\n    {\n      answerText: \"Answer A\"\n    },\n    {\n      answerText: \"Answer B\"\n    }\n  ]\n};\n\nconst newAnswer = {\n  answerText: \"New answer\"\n};\n\n// Reducers\n\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION:\n      return [...state, newQuestion];\n\n    case EDIT_QUESTION_TEXT: {\n      // return changeInArray(\n      //   state.questions,\n      //   state.selectedQuestion,\n      //   q => ({\n      //     ...q,\n      //     questionText: action.payload.questionText\n      //   })\n      // );\n\n      const { questionIdx, questionText } = action.payload;\n\n      const clonedQuestions = state.slice();\n      clonedQuestions[questionIdx] = {\n        ...clonedQuestions[questionIdx],\n        questionText\n      };\n\n      return clonedQuestions;\n    }\n    case DELETE_QUESTION: {\n      const clonedQuestions = [\n        ...state.slice(0, action.payload.questionIdx),\n        ...state.slice(action.payload.questionIdx + 1)\n      ];\n\n      return clonedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n\n      const clonedQuestions = state.slice();\n      clonedQuestions[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer]\n      };\n      return clonedQuestions;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, answerText, answerIdx } = action.payload;\n\n      // const clonedQuestions = state.slice();\n      // const clonedQuestion = Object.assign({}, clonedQuestions[questionIdx]);\n      // const clonedAnswers = clonedQuestion.answers.slice();\n      // const clonedAnswer = Object.assign({}, clonedAnswers[answerIdx]);\n      // clonedAnswer.answerText = answerText;\n      // clonedAnswers[answerIdx] = clonedAnswer;\n      // clonedQuestion.answers = clonedAnswers;\n      // clonedQuestions[questionIdx] = clonedQuestion;\n\n      // return clonedQuestions;\n\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          answerText\n        }))\n      }));\n    }\n\n    case SET_CORRECT_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        correctAnswers: answerIdx\n      }));\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestion: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestion: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questionEditor\";\nimport { server } from \"./server\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport CreatorContainer from \"./CreatorContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport Waiter from \"./Waiter\";\nimport mainReducer from \"../reducers/main\";\n\nconst store = createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={store}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/server/create\" component={CreatorContainer} />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/wait\" component={Waiter} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connections: [],\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\nconst clickConnect = (serverId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  const peer = new Peer({\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setServerStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: true }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setServerStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setServerStatus(2));\n    connection.on(\"data\", data => {\n      const msg = JSON.parse(data);\n      console.log(\"Received data: \", msg);\n      dispatch(setCurrentQuestion(msg.question));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  questionIdx: state.client.questionIdx\n});\n\nconst AnswerScreen = props => {\n  const { currentQuestion } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <Row className=\"justify-content-center\">\n        <DefaultCard\n          title={\n            currentQuestion.length > 0\n              ? \"Answer question\"\n              : \"Waiting for question to be sent\"\n          }\n          badge={currentQuestion.questionIdx}\n        >\n          {currentQuestion.length > 0 ? (\n            <>\n              <h4 className=\"text-center mb-4\">\n                {currentQuestion.questionText}\n              </h4>\n              {currentQuestion.answers &&\n                currentQuestion.answers.map((question, i) => (\n                  <Button outline key={i} block color=\"success\">\n                    {question.answerText}\n                  </Button>\n                ))}\n            </>\n          ) : (\n            <div className=\"d-flex justify-content-center\">\n              <MDSpinner\n                color1=\"#8a817c\"\n                color2=\"#f44336\"\n                color3=\"#dc9125\"\n                color4=\"#5fa15d\"\n                size={30}\n              />\n            </div>\n          )}\n        </DefaultCard>\n      </Row>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport mainReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst store = createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={store}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/client/connect\" component={ConnectorContainer} />\n          <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/README.MD`)\n      .then(response => response.text())\n      .then(text => snarkdown(text))\n      .then(data => this.setState({ data }));\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <Header />\n        <Container>\n          <Row>\n            <Col md=\"12\">\n              <Card className=\"shadow\">\n                <CardHeader>\n                  <h6 className=\"my-0\">About</h6>\n                </CardHeader>\n                <CardBody>\n                  <div\n                    className=\"markdown-body\"\n                    style={{\n                      fontFamily: \"IBM Plex Sans\"\n                    }}\n                    dangerouslySetInnerHTML={{ __html: data }}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Footer />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./SelectBox\";\nimport \"./scss/App.scss\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./scss/custom.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}