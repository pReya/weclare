{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","shared/util/Logger.js","shared/actions/connection.js","server/actions/answers.js","server/selectors/questions.js","shared/util/NetworkHelpers.js","server/actions/server.js","server/components/ConnectFormServerContainer.js","shared/components/InfoPopoverIcon.js","server/components/EditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionListDropdown.js","server/components/QuestionList.js","shared/util/questionsSchema.js","server/actions/questions.js","server/components/QuestionEditor.js","shared/types.js","shared/components/QuestionCard.js","server/selectors/server.js","server/components/AskScreenContinueButton.js","server/selectors/answers.js","server/components/AskScreen.js","shared/util/QuestionHelpers.js","server/reducers/server.js","server/reducers/answers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questions.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectFormClientContainer.js","shared/components/SpinnerCard.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js","../node_modules/peerjs/dist sync"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","encodeURI","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","Nav","NavItem","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","inputIsInvalid","id","isValid","test","_this2","match","onChangeServerId","onClickConnect","serverId","buttonText","history","helpText","validationError","params","components_DefaultCard","Form","FormGroup","row","bsSize","type","onChange","e","newId","target","validateServerId","invalid","FormFeedback","FormText","Button","push","undefined","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","SET_PEER","SET_CONNECTION_STATUS","setConnectionStatus","newStatus","payload","setPeer","REGISTER_ANSWER","registerAnswer","questionIdx","answerIdx","userId","dispatch","getState","acceptingAnswers","INIT_ANSWERS","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","getCurrentQuestion","currentQuestionIdx","getCurrentQuestionNoSolution","currentQuestion","objectSpread","answer","isCorrect","objectWithoutProperties","createPeer","ownId","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","ADD_CONNECTION","SET_SERVER_ID","setServerId","SET_CURRENT_QUESTION_IDX","TOGGLE_ACCEPTING_ANSWERS","startServer","_getState$server$ownS","on","info","log","dataHandler","addConnection","err","error","staticProps","withRouter","newServerId","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","EditorAnswerInput","isHovered","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","EditorAnswerInput_RadioInput","onSetCorrectAnswer","EditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_EditorAnswerInput","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","closeDropdown","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionList","questions","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionListDropdown","DownloadIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_MODE","EDIT_QUESTION_TYPE","DELETE_QUESTION","LOAD_QUESTIONS","SORT_QUESTION","selectQuestion","addQuestion","editQuestionText","editQuestionMode","newMode","oldMode","editQuestionType","newType","oldType","deleteQuestion","_getState2","loadQuestions","newQuestions","sortQuestion","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","setCorrectSingleAnswer","setCorrectMultiAnswer","addAnswer","editAnswerText","deleteAnswer","sortAnswer","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","questionEditorActions","answerActions","QuestionEditor","loadQuestionsFromStorage","localStorage","getItem","JSON","parse","downloadFile","dataStr","encodeURIComponent","stringify","downloadAnchorNode","setAttribute","getFormattedDate","remove","saveToStorage","setItem","validateAndSaveToStorage","tv4","validate","QuestionSchema","saveFileToStorage","reader","FileReader","onload","readAsText","components_QuestionList","components_QuestionContent","xs","ContentSaveIcon_default","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","DQuestion","PropTypes","string","shape","progress","arrayOf","object","selectedAnswerIdx","QuestionCard","onClickAnswer","countedAnswers","Helmet","dangerouslySetInnerHTML","__html","selectedAnswer","isConnected","sendCurrentQuestionToClients","currentQuestionNoSolution","forEach","send","toggleAcceptingAnswers","AskScreenContinueButton","buttonPhase","nextButtonPhase","toggleShowVoteCount","currentPhaseObj","0","react_md_spinner_lib_default","singleColor","additionalButtonProps","1","PlayIcon_default","2","PauseIcon_default","3","FormatListNumberedIcon_default","4","SkipForwardIcon_default","getAnswerCountForCurrentQuestion","registeredAnswers","AskScreen","showVoteCount","components_QuestionCard","components_AskScreenContinueButton","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","toConsumableArray","q","combineReducers","deepClonedState","questionsCount","idx","nanoid","newQuestion","_action$payload","_action$payload2","firstAnswerFound","_action$payload3","updatedQuestions","_action$payload4","filter","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","element","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","ConnectFormServerContainer","components_Footer","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","connectToServer","_getState2$client$rem","remoteServerId","dataObj","reliable","SpinnerCard","color1","color2","color3","color4","AnswerScreen","initialState","prevProps","resetState","onSendAnswer","hasQuestion","components_SpinnerCard","_getState$client","_getState$client$conn","_getState$client$curr","provider","sendAnswer","clientStore","mainClientReducer","Client","ClientHeaderContainer","Switch","ConnectFormClientContainer","About","fontFamily","snarkdown","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.3b0a4b13.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nconst Footer = () => (\n  <div>\n    <hr />\n    <footer className=\"container\">\n      <Row>\n        <Col>\n          <a className=\"font-weight-light text-muted\" href=\"/about\">\n            &copy; 2018 Moritz Stückler – HAW Hamburg\n          </a>\n        </Col>\n        <Col className=\"text-right\">\n          <a href=\"https://github.com/pReya/weclare/\">\n            <GithubCircleIcon />\n          </a>\n        </Col>\n      </Row>\n    </footer>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    encodeURI(\n                      `${window.location.origin}/client/connect/${ownServerId}`\n                    )\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between bg-white\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport {\n  Form,\n  FormText,\n  FormFeedback,\n  FormGroup,\n  Button,\n  Input,\n  Col\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nclass ConnectForm extends React.Component {\n  state = { inputIsInvalid: false };\n\n  validateServerId(id) {\n    const serverIdRex = /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/;\n    const isValid = !id || serverIdRex.test(id);\n    this.setState({ inputIsInvalid: !isValid });\n  }\n\n  render() {\n    const {\n      match,\n      onChangeServerId,\n      onClickConnect,\n      serverId,\n      title,\n      text,\n      buttonText,\n      history,\n      location,\n      helpText,\n      validationError\n    } = this.props;\n\n    const { inputIsInvalid } = this.state;\n\n    if (match && match.params && match.params.serverId) {\n      onChangeServerId(match.params.serverId);\n    }\n\n    return (\n      <DefaultCard title={title} text={text}>\n        <Form>\n          <FormGroup row className=\"form-row\">\n            <Col>\n              <Input\n                bsSize=\"lg\"\n                id=\"serverId\"\n                type=\"text\"\n                value={serverId}\n                onChange={e => {\n                  const newId = e.target.value;\n                  this.validateServerId(newId);\n                  onChangeServerId(newId);\n                }}\n                invalid={inputIsInvalid}\n              />\n              {validationError && (\n                <FormFeedback>{validationError}</FormFeedback>\n              )}\n              {helpText && <FormText>{helpText}</FormText>}\n            </Col>\n            <Col md={3}>\n              <Button\n                type=\"button\"\n                id=\"connect\"\n                className=\"btn-block\"\n                size=\"lg\"\n                onClick={() => {\n                  onClickConnect(serverId);\n                  if (history && location) {\n                    history.push(location);\n                  }\n                }}\n                disabled={inputIsInvalid}\n              >\n                {buttonText}\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </DefaultCard>\n    );\n  }\n}\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  validationError: PropTypes.string,\n  inputIsInvalid: PropTypes.bool,\n  match: ReactRouterPropTypes.match\n};\n\nConnectForm.defaultProps = {\n  helpText: undefined,\n  match: undefined,\n  buttonText: \"Connect\",\n  validationError: undefined,\n  inputIsInvalid: false\n};\n\nexport default ConnectForm;\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setConnectionStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n\n// export function sendNextQuestionToClients() {\n//   return (dispatch, getState) => {\n//     const {\n//       server: { connections = [], currentQuestionIdx },\n//       questionEditor: questions\n//     } = getState();\n//     // use getFormattedQuestion here – how?\n//     if (connections.length > 0 && formattedQuestion) {\n//       connections.forEach(connection =>\n//         connection.send(JSON.stringify(formattedQuestion))\n//       );\n//     } else {\n//       console.error(\"Can't send question to clients\");\n//     }\n//   };\n// }\n","// Server Answer Actions\nexport const REGISTER_ANSWER = \"REGISTER_ANSWER\";\nexport function registerAnswer(questionIdx, answerIdx, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWER,\n        payload: {\n          questionIdx,\n          answerIdx,\n          userId\n        }\n      });\n    }\n  };\n}\n\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const getCurrentQuestion = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n  return questions[currentQuestionIdx];\n};\n\nexport const getCurrentQuestionNoSolution = state => {\n  const currentQuestion = getCurrentQuestion(state);\n\n  return {\n    ...currentQuestion,\n    answers: currentQuestion.answers.map(answer => {\n      const { isCorrect, ...answerNoSolution } = answer;\n      return answerNoSolution;\n    })\n  };\n};\n","import Peer from \"peerjs\";\n\nconst createPeer = ownId => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  return new Peer(ownId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n};\n\nexport default createPeer;\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport { registerAnswer } from \"./answers\";\nimport { getCurrentQuestionNoSolution } from \"../selectors/questions\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: SET_CURRENT_QUESTION_IDX,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\nexport function toggleAcceptingAnswers() {\n  return {\n    type: TOGGLE_ACCEPTING_ANSWERS\n  };\n}\n\nexport function startServer() {\n  return (dispatch, getState) => {\n    const {\n      server: { ownServerId = null }\n    } = getState();\n\n    const peer = createPeer(ownServerId);\n\n    const dataHandler = data => {\n      const { type, payload } = data;\n      Logger.info(\"Received Data: \", data);\n      switch (type) {\n        case \"answer\":\n          console.log(\"Received answer\", payload);\n          dispatch(\n            registerAnswer(\n              payload.questionIdx,\n              payload.answerIdx,\n              payload.userId\n            )\n          );\n          break;\n        default:\n          console.log(\"Default\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    peer.on(\"open\", id => {\n      Logger.info(`Successfully created peer with ID \"${id}\"`);\n      dispatch(setConnectionStatus(1));\n      // Set Server ID again, in case the input was empty and PeerJS used a random ID\n      dispatch(setServerId(id));\n    });\n\n    peer.on(\"connection\", connection => {\n      Logger.info(\"New client connected with id: \", connection.peer);\n      connection.on(\"data\", data => dataHandler(data));\n      dispatch(setConnectionStatus(2));\n      dispatch(addConnection(connection));\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n\nexport function sendCurrentQuestionToClients() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    const currentQuestionNoSolution = getCurrentQuestionNoSolution(getState());\n\n    const msg = {\n      type: \"question\",\n      payload: currentQuestionNoSolution\n    };\n\n    if (connections.length > 0 && currentQuestionNoSolution) {\n      Logger.info(\"Sending question to clients\", currentQuestionNoSolution);\n      connections.forEach(connection => connection.send(JSON.stringify(msg)));\n    } else {\n      Logger.error(\"Can't send question to clients\");\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerId, startServer } from \"../actions/server\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: () => {\n    dispatch(startServer());\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Choose a Server ID\",\n  text:\n    \"Please pick a server ID that uniquely identifies your quiz session (e.g. 'algorithms_2_2018') or leave it empty to generate a random ID.\",\n  buttonText: \"Create\",\n  location: \"/server/ask\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={18}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass EditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default EditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport EditorAnswerInput from \"./EditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">Question Text</Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  Answers{\" \"}\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <EditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile, closeDropdown } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n    if (typeof closeDropdown === \"function\") {\n      closeDropdown();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  closeDropdown: PropTypes.func\n};\n\nSingleFileInput.defaultProps = {\n  closeDropdown: null\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            closeDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nQuestionListDropdown.propTypes = {\n  onUploadFile: PropTypes.func.isRequired,\n  onUploadDropbox: PropTypes.func.isRequired\n};\n\nexport default QuestionListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionListDropdown from \"./QuestionListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon\n                              style={{\n                                marginBottom: \"3px\",\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const SORT_QUESTION = \"SORT_QUESTION\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { selectedQuestion, questionEditor: questions } = getState();\n    if (questionIdx <= selectedQuestion) {\n      dispatch(selectQuestion(selectedQuestion - 1));\n      if (questions.length === 0) {\n        dispatch(selectQuestion(null));\n      }\n    }\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport const SORT_ANSWER = \"SORT_ANSWER\";\n\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport tv4 from \"tv4\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport QuestionSchema from \"../../shared/util/questionsSchema\";\nimport * as questionEditorActions from \"../actions/questions\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = { ...questionEditorActions, ...answerActions };\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadQuestionsFromStorage();\n  }\n\n  static getFormattedDate = () => {\n    const today = new Date();\n    let dd = today.getDate();\n\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    return `${dd}-${mm}-${yyyy}`;\n  };\n\n  loadQuestionsFromStorage = () => {\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  };\n\n  downloadFile = data => {\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\n      \"download\",\n      `weclare-${QuestionEditor.getFormattedDate()}.json`\n    );\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    Logger.info(\"Created and started file download\");\n  };\n\n  saveToStorage = data => {\n    localStorage.setItem(\"weclare\", data);\n    Logger.info(\"Saved questionset to local storage\");\n  };\n\n  validateAndSaveToStorage = data => {\n    const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n    if (valid) {\n      Logger.info(\"Questionset was successfully validated\");\n      this.saveToStorage(data);\n      this.loadQuestionsFromStorage();\n    } else {\n      Logger.error(\"Imported file was invalid\", tv4.error);\n    }\n  };\n\n  saveFileToStorage = file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.validateAndSaveToStorage(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                this.saveToStorage(JSON.stringify(questions));\n                this.downloadFile(questions);\n              }}\n              onUploadFile={this.saveFileToStorage}\n              onUploadDropbox={this.validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                this.saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n              disabled={!questions.length > 0}\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.array.isRequired,\n  // Questions\n  loadQuestions: PropTypes.func.isRequired,\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    text: null,\n    type: null,\n    answers: null\n  },\n  disabled: false,\n  selectedAnswerIdx: null\n};\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TQuestion, DQuestion } from \"../types\";\n\nconst QuestionCard = props => {\n  const {\n    question,\n    onClickAnswer,\n    countedAnswers,\n    disabled,\n    selectedAnswerIdx,\n    children\n  } = props;\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <DefaultCard\n        title=\"Answer question\"\n        badge={question.progress}\n        footer={children}\n      >\n        {question.text && (\n          <div\n            className=\"text-center mb-4 h4\"\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={selectedAnswerIdx !== i}\n              id={i}\n              key={i}\n              block\n              onClick={\n                onClickAnswer\n                  ? e => {\n                      const selectedAnswer = parseInt(e.target.id, 10);\n                      onClickAnswer(selectedAnswer);\n                    }\n                  : null\n              }\n              color=\"secondary\"\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge className=\"float-right\" color=\"secondary\">\n                  {countedAnswers[i] !== 0 && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","const isConnected = state => {\n  const {\n    server: { connections }\n  } = state;\n  return connections.length > 0;\n};\n\nexport default isConnected;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport MDSpinner from \"react-md-spinner\";\nimport {\n  toggleAcceptingAnswers,\n  sendCurrentQuestionToClients\n} from \"../actions/server\";\nimport isConnected from \"../selectors/server\";\n\nconst mapStateToProps = state => ({\n  isConnected: isConnected(state)\n});\n\nconst mapDispatchToProps = {\n  sendCurrentQuestionToClients,\n  toggleAcceptingAnswers\n};\n\nclass AskScreenContinueButton extends React.Component {\n  state = {\n    buttonPhase: 0\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.isConnected && state.buttonPhase === 0) {\n      return {\n        buttonPhase: 1\n      };\n    }\n    return null;\n  }\n\n  nextButtonPhase = () => {\n    const { buttonPhase } = this.state;\n    // Transition from 0 -> 1 must happen in getDerivedStateFromProps()\n    if (buttonPhase > 0) {\n      this.setState(prevState => ({\n        buttonPhase: (prevState.buttonPhase + 1) % 5\n      }));\n    }\n  };\n\n  render() {\n    const {\n      toggleAcceptingAnswers,\n      sendCurrentQuestionToClients,\n      toggleShowVoteCount\n    } = this.props;\n    const buttonStateMachine = {\n      // Waiting for clients, button disabled\n      0: {\n        text: (\n          <>\n            <MDSpinner singleColor=\"#8a817c\" size={16} /> Waiting for clients\n          </>\n        ),\n        color: \"primary\",\n        additionalButtonProps: {\n          outline: true,\n          disabled: true\n        }\n      },\n      // Clients connected, ready to send first question and accept answers\n      1: {\n        onClick: () => {\n          toggleAcceptingAnswers();\n          sendCurrentQuestionToClients();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start Quiz\n          </>\n        ),\n        color: \"secondary\"\n      },\n      // Accepting answers\n      2: {\n        onClick: () => {\n          toggleAcceptingAnswers();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop Question\n          </>\n        ),\n        color: \"secondary\"\n      },\n      // Don't accept answers, waiting to show results\n      3: {\n        onClick: () => {\n          toggleShowVoteCount();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} /> Show\n            Results\n          </>\n        ),\n        color: \"secondary\"\n      },\n      4: {\n        onClick: () => {\n          // setCurrentQuestionIdx(nextQuestionIdx);\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} /> Next Question\n          </>\n        ),\n        color: \"secondary\"\n      }\n    };\n\n    const { buttonPhase } = this.state;\n    const currentPhaseObj = buttonStateMachine[buttonPhase];\n    return (\n      <Button\n        color={currentPhaseObj.color}\n        outline={currentPhaseObj.outline}\n        block\n        onClick={currentPhaseObj.onClick}\n        {...currentPhaseObj &&\n          currentPhaseObj.additionalButtonProps &&\n          currentPhaseObj.additionalButtonProps}\n      >\n        {currentPhaseObj.text}\n      </Button>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AskScreenContinueButton);\n","const getAnswerCountForCurrentQuestion = state => {\n  const {\n    server: { currentQuestionIdx },\n    registeredAnswers\n  } = state;\n  if (registeredAnswers.length > 0 && typeof currentQuestionIdx !== \"undefined\")\n    return registeredAnswers[currentQuestionIdx].map(answer => answer.length);\n};\n\nexport default getAnswerCountForCurrentQuestion;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport AskScreenContinueButton from \"./AskScreenContinueButton\";\nimport { getCurrentQuestion } from \"../selectors/questions\";\nimport getAnswerCountForCurrentQuestion from \"../selectors/answers\";\n\nclass AskScreen extends React.Component {\n  state = {\n    showVoteCount: false\n  };\n\n  toggleShowVoteCount = () => {\n    this.setState(prevState => ({\n      showVoteCount: !prevState.showVoteCount\n    }));\n  };\n\n  render() {\n    const { currentQuestion, countedAnswers } = this.props;\n    const { showVoteCount } = this.state;\n\n    return (\n      <Row className=\"justify-content-center\">\n        <QuestionCard\n          question={currentQuestion}\n          countedAnswers={showVoteCount && countedAnswers}\n          disabled\n        >\n          <AskScreenContinueButton\n            toggleShowVoteCount={this.toggleShowVoteCount}\n          />\n        </QuestionCard>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentQuestion: getCurrentQuestion(state),\n  countedAnswers: getAnswerCountForCurrentQuestion(state)\n});\n\nexport default connect(mapStateToProps)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n\nexport const updateQuestionIndexes = array =>\n  array.map((element, i) => ({ ...element, questionIdx: i }));\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestionIdx: 0,\n    acceptingAnswers: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestionIdx: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWER, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWER: {\n      console.log(\"Reducer\", action.payload);\n      return changeInArray(state, action.payload.questionIdx, q =>\n        changeInArray(q, action.payload.answerIdx, a => {\n          a.push(action.payload.userId);\n          return a;\n        })\n      );\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questions\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./answers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questions\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray,\n  updateQuestionIndexes\n} from \"../../shared/util/QuestionHelpers\";\n\nconst newQuestion = (idx = 0) => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  questionIdx: idx,\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\n// This is the selected question in the questionEditor, don't confuse with\n// selected question in server state\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const questionsCount = state.length;\n      deepClonedState.push(newQuestion(questionsCount));\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      console.log(\"updatedQuestions\", updatedQuestions);\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      const reindexedArray = updateQuestionIndexes(deepClonedState);\n\n      return reindexedArray;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport ConnectFormServerContainer from \"./ConnectFormServerContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route\n            exact\n            path=\"/server/create\"\n            component={ConnectFormServerContainer}\n          />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\n// Client Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\n// TODO: This is probably unnecessary b/c PeerJS keeps its own connection object\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n\nexport function sendAnswer(answerIdx) {\n  return (dispatch, getState) => {\n    const {\n      client: { connection = null, currentQuestion = null }\n    } = getState();\n\n    if (connection && currentQuestion && typeof answerIdx !== \"undefined\") {\n      console.log(\"SEND\");\n      connection.send({\n        type: \"answer\",\n        payload: {\n          questionIdx: currentQuestion.questionIdx,\n          answerIdx,\n          userId: connection.provider.id\n        }\n      });\n    }\n  };\n}\n\nexport function connectToServer() {\n  return (dispatch, getState) => {\n    const {\n      client: { remoteServerId = null }\n    } = getState();\n\n    const peer = createPeer();\n\n    const dataHandler = data => {\n      const dataObj = JSON.parse(data);\n      const { type, payload } = dataObj;\n      Logger.info(\"Received Data: \", dataObj);\n      switch (type) {\n        case \"question\":\n          dispatch(setCurrentQuestion(payload));\n          break;\n\n        default:\n          Logger.error(\"ERROR: Client Data Handler Default Case\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    const connection = peer.connect(\n      remoteServerId,\n      { reliable: false }\n    );\n    dispatch(addConnection(connection));\n    dispatch(setConnectionStatus(1));\n\n    connection.on(\"open\", () => {\n      Logger.info(`Successfully connected to server ${connection.peer}`);\n      dispatch(setConnectionStatus(2));\n      connection.on(\"data\", data => dataHandler(data));\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      console.log(\"reducer\", action.payload);\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\n\nimport { setRemoteServerId, connectToServer } from \"../actions/client\";\n\n// Source: https://github.com/peers/peerjs/issues/227#issue-39009356\n// const makePeerHeartbeater = peer => {\n//   let timeoutId = 0;\n//   function heartbeat() {\n//     timeoutId = setTimeout(heartbeat, 20000);\n//     // eslint-disable-next-line\n//     if (peer.socket._wsOpen()) {\n//       peer.socket.send({ type: \"HEARTBEAT\" });\n//       Logger.info(\"Sent heartbeat\");\n//     }\n//   }\n//   // Start\n//   heartbeat();\n//   // return\n//   return {\n//     start() {\n//       if (timeoutId === 0) {\n//         heartbeat();\n//       }\n//     },\n//     stop() {\n//       clearTimeout(timeoutId);\n//       timeoutId = 0;\n//     }\n//   };\n// };\n\n// const clickConnect = (serverId, dispatch) => {\n//   const peer = createPeer();\n\n//   const heartbeater = makePeerHeartbeater(peer);\n\n//   dispatch(setPeer(peer));\n\n//   peer.on(\"error\", err => {\n//     console.error(err);\n//     dispatch(setConnectionStatus(3));\n//   });\n\n//   const connection = peer.connect(\n//     serverId,\n//     { reliable: false }\n//   );\n//   dispatch(addConnection(connection));\n//   dispatch(setConnectionStatus(1));\n\n//   connection.on(\"open\", () => {\n//     console.log(\"Client Connected\");\n//     dispatch(setConnectionStatus(2));\n//     connection.on(\"data\", data => {\n//       const msg = JSON.parse(data);\n//       console.log(\"Received data: \", msg);\n//       dispatch(setCurrentQuestion(msg));\n//     });\n//   });\n// };\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: () => dispatch(connectToServer())\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex justify-content-center\">\n          <MDSpinner\n            color1=\"#8a817c\"\n            color2=\"#f44336\"\n            color3=\"#dc9125\"\n            color4=\"#5fa15d\"\n            size={size}\n          />\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\n\nimport { TQuestion, DQuestion } from \"../../shared/types\";\nimport { sendAnswer } from \"../actions/client\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  connection: state.client.connection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSendAnswer: answerIdx => dispatch(sendAnswer(answerIdx))\n});\n\n// const sendAnswer = (connection, answerIdx, questionIdx) => {\n//   if (connection) {\n//     connection.send({\n//       type: \"answer\",\n//       payload: {\n//         questionIdx,\n//         answerIdx,\n//         userId: connection.provider.id\n//       }\n//     });\n//   }\n// };\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswerIdx: null\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n    }\n  }\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { currentQuestion, connection, onSendAnswer } = this.props;\n    const { disabled, selectedAnswerIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard\n            question={currentQuestion}\n            disabled={disabled}\n            selectedAnswerIdx={selectedAnswerIdx}\n            onClickAnswer={answerIdx => {\n              console.log(\"Sending back answer \", answerIdx, currentQuestion);\n              onSendAnswer(answerIdx);\n              this.setState(\n                {\n                  disabled: true,\n                  selectedAnswerIdx: answerIdx\n                },\n                () => console.log(\"New state\", this.state)\n              );\n            }}\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for question\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectFormClientContainer from \"./ConnectFormClientContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectFormClientContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport raw from \"raw.macro\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>\n              <div\n                className=\"markdown-body\"\n                style={{\n                  fontFamily: \"IBM Plex Sans\"\n                }}\n                // eslint-disable-next-line\n                dangerouslySetInnerHTML={{\n                  __html: snarkdown(raw(\"../public/README.MD\"))\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz Session\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz Session\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 95;"],"sourceRoot":""}