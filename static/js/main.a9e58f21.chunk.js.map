{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","shared/util/Logger.js","shared/actions/connection.js","server/actions/answers.js","server/selectors/questions.js","shared/util/NetworkHelpers.js","server/actions/server.js","server/components/ConnectFormServerContainer.js","shared/components/InfoPopoverIcon.js","server/components/QuestionEditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionEditorContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionEditorListDropdown.js","server/components/QuestionEditorList.js","shared/util/questionsSchema.js","server/actions/questions.js","server/components/QuestionEditor.js","shared/types.js","shared/components/SingleQuestionCard.js","shared/components/MultiQuestionCard.js","shared/components/QuestionCard.js","server/selectors/server.js","server/components/AskScreenContinueButton.js","server/selectors/answers.js","shared/components/Chevron.js","server/components/AskScreen.js","shared/util/QuestionHelpers.js","server/reducers/server.js","server/reducers/answers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questions.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectFormClientContainer.js","shared/components/SpinnerCard.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js","../node_modules/peerjs/dist sync"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","encodeURI","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","inputIsInvalid","id","isValid","test","_this2","match","onChangeServerId","onClickConnect","serverId","buttonText","history","helpText","validationError","params","components_DefaultCard","Form","FormGroup","row","bsSize","type","onChange","e","newId","target","validateServerId","invalid","FormFeedback","FormText","Button","push","undefined","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","SET_PEER","SET_CONNECTION_STATUS","setConnectionStatus","newStatus","payload","setPeer","REGISTER_ANSWERS","registerAnswers","questionIdx","answerIdxArray","userId","dispatch","getState","acceptingAnswers","INIT_ANSWERS","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","getCurrentQuestion","questions","currentQuestionIdx","progress","_state$questionEditor","_state$server$current","getProgress","objectSpread","getCurrentQuestionNoSolution","currentQuestion","answer","isCorrect","objectWithoutProperties","createPeer","ownId","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","ADD_CONNECTION","SET_SERVER_ID","setServerId","SET_CURRENT_QUESTION_IDX","setCurrentQuestionIdx","incrementQuestionIdx","_getState$server$curr","TOGGLE_ACCEPTING_ANSWERS","TOGGLE_ACCEPTING_CONNECTIONS","startServer","_getState4$server$own","on","info","error","dataHandler","addConnection","err","staticProps","withRouter","newServerId","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","QuestionEditorAnswerInput","isHovered","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","QuestionEditorAnswerInput_RadioInput","onSetCorrectAnswer","QuestionEditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionEditorContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_QuestionEditorAnswerInput","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","closeDropdown","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionEditorListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionEditorList","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionEditorListDropdown","DownloadIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","selectQuestion","ADD_QUESTION","addQuestion","EDIT_QUESTION_TEXT","editQuestionText","EDIT_QUESTION_MODE","editQuestionMode","newMode","oldMode","EDIT_QUESTION_TYPE","editQuestionType","newType","oldType","DELETE_QUESTION","deleteQuestion","LOAD_QUESTIONS","loadQuestions","newQuestions","SORT_QUESTION","sortQuestion","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","setCorrectSingleAnswer","answerIdx","SET_CORRECT_MULTI_ANSWER","setCorrectMultiAnswer","ADD_ANSWER","addAnswer","EDIT_ANSWER_TEXT","editAnswerText","DELETE_ANSWER","deleteAnswer","SORT_ANSWER","sortAnswer","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","questionEditorActions","answerActions","QuestionEditor","loadQuestionsFromStorage","localStorage","getItem","JSON","parse","downloadFile","dataStr","encodeURIComponent","stringify","downloadAnchorNode","setAttribute","getFormattedDate","remove","saveToStorage","setItem","validateAndSaveToStorage","tv4","validate","QuestionSchema","saveFileToStorage","reader","FileReader","onload","readAsText","components_QuestionEditorList","components_QuestionEditorContent","xs","ContentSaveIcon_default","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","DQuestion","PropTypes","string","shape","arrayOf","object","selectedAnswerIdx","SingleQuestionCard","_props$selectedAnswer","selectedAnswersIdx","onClickAnswer","countedAnswers","toggleSelectedAnswers","onSendAnswers","toggleDisabled","dangerouslySetInnerHTML","__html","selectedAnswer","lineHeight","MultiQuestionCard","selectedAnswersArray","selectedAnswers","filter","QuestionCard","Helmet","components_SingleQuestionCard","components_MultiQuestionCard","isConnected","hasNextQuestion","hasPreviousQuestion","_state$server$current2","sendCurrentQuestionToClients","currentQuestionNoSolution","forEach","send","toggleAcceptingAnswers","stopAcceptingConnections","_getState3","_getState3$connection","acceptingConnections","log","disconnect","AskScreenContinueButton","buttonPhase","nextButtonPhase","currentPhaseObj","0","react_md_spinner_lib_default","singleColor","additionalButtonProps","1","PlayIcon_default","2","PauseIcon_default","3","SkipForwardIcon_default","getAnswerCountForCurrentQuestion","registeredAnswers","getReceivedAnswersCounter","_state$server$connect","flatRegisteredAnswers","flat","distinctUsers","toConsumableArray","Set","connectionCount","percentageValue","Math","trunc","percentageString","Number","isNaN","ChevronLeft","ChevronLeftIcon_default","ChevronRight","ChevronRightIcon_default","AskScreen","showVoteCount","toggleShowVoteCount","receivedAnswersCounter","decrementQuestionIdx","Chevron_ChevronLeft","components_QuestionCard","FormatListNumberedIcon_default","components_AskScreenContinueButton","Chevron_ChevronRight","_getState2$server$cur","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","_action$payload","combineReducers","deepClonedState","questionsCount","idx","nanoid","newQuestion","_action$payload2","firstAnswerFound","_action$payload3","_action$payload4","q","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","element","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","ConnectFormServerContainer","components_Footer","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","connectToServer","_getState2$client$rem","remoteServerId","dataObj","reliable","SpinnerCard","textAlign","color1","color2","color3","color4","AnswerScreen","initialState","prevProps","resetState","initSelectedAnswers","answerCount","fill","hasQuestion","components_SpinnerCard","_getState$client","_getState$client$conn","_getState$client$curr","provider","sendAnswers","clientStore","mainClientReducer","Client","ClientHeaderContainer","Switch","ConnectFormClientContainer","About","fontFamily","snarkdown","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.a9e58f21.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nconst Footer = () => (\n  <div>\n    <hr />\n    <footer className=\"container\">\n      <Row>\n        <Col>\n          <a className=\"font-weight-light text-muted\" href=\"/about\">\n            &copy; 2018 Moritz Stückler – HAW Hamburg\n          </a>\n        </Col>\n        <Col className=\"text-right\">\n          <a href=\"https://github.com/pReya/weclare/\">\n            <GithubCircleIcon />\n          </a>\n        </Col>\n      </Row>\n    </footer>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    encodeURI(\n                      `${window.location.origin}/client/connect/${ownServerId}`\n                    )\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Container, Navbar, NavbarBrand, NavLink } from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-none d-flex flex-row justify-content-between bg-white py-3\"\n      >\n        <Container>\n          <NavbarBrand className=\"w-50\" href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <NavLink className=\"w-50 text-right\" tag={Link} to=\"/about\">\n            About\n          </NavLink>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport {\n  Form,\n  FormText,\n  FormFeedback,\n  FormGroup,\n  Button,\n  Input,\n  Col\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nclass ConnectForm extends React.Component {\n  state = { inputIsInvalid: false };\n\n  validateServerId(id) {\n    const serverIdRex = /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/;\n    const isValid = !id || serverIdRex.test(id);\n    this.setState({ inputIsInvalid: !isValid });\n  }\n\n  render() {\n    const {\n      match,\n      onChangeServerId,\n      onClickConnect,\n      serverId,\n      title,\n      text,\n      buttonText,\n      history,\n      location,\n      helpText,\n      validationError\n    } = this.props;\n\n    const { inputIsInvalid } = this.state;\n\n    if (match && match.params && match.params.serverId) {\n      onChangeServerId(match.params.serverId);\n    }\n\n    return (\n      <DefaultCard title={title} text={text}>\n        <Form>\n          <FormGroup row className=\"form-row mb-1\">\n            <Col>\n              <Input\n                bsSize=\"lg\"\n                id=\"serverId\"\n                type=\"text\"\n                value={serverId}\n                onChange={e => {\n                  const newId = e.target.value;\n                  this.validateServerId(newId);\n                  onChangeServerId(newId);\n                }}\n                invalid={inputIsInvalid}\n              />\n              {validationError && (\n                <FormFeedback>{validationError}</FormFeedback>\n              )}\n              {helpText && <FormText>{helpText}</FormText>}\n            </Col>\n            <Col md={3}>\n              <Button\n                type=\"button\"\n                id=\"connect\"\n                className=\"btn-block\"\n                size=\"lg\"\n                onClick={() => {\n                  onClickConnect(serverId);\n                  if (history && location) {\n                    history.push(location);\n                  }\n                }}\n                disabled={inputIsInvalid}\n              >\n                {buttonText}\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </DefaultCard>\n    );\n  }\n}\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  validationError: PropTypes.string,\n  inputIsInvalid: PropTypes.bool,\n  match: ReactRouterPropTypes.match\n};\n\nConnectForm.defaultProps = {\n  helpText: undefined,\n  match: undefined,\n  buttonText: \"Connect\",\n  validationError: undefined,\n  inputIsInvalid: false\n};\n\nexport default ConnectForm;\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setConnectionStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n\n// export function sendNextQuestionToClients() {\n//   return (dispatch, getState) => {\n//     const {\n//       server: { connections = [], currentQuestionIdx },\n//       questionEditor: questions\n//     } = getState();\n//     // use getFormattedQuestion here – how?\n//     if (connections.length > 0 && formattedQuestion) {\n//       connections.forEach(connection =>\n//         connection.send(JSON.stringify(formattedQuestion))\n//       );\n//     } else {\n//       console.error(\"Can't send question to clients\");\n//     }\n//   };\n// }\n","// Server Answer Actions\nexport const REGISTER_ANSWERS = \"REGISTER_ANSWERS\";\nexport function registerAnswers(questionIdx, answerIdxArray, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWERS,\n        payload: {\n          questionIdx,\n          answerIdxArray,\n          userId\n        }\n      });\n    }\n  };\n}\n\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const getProgress = state => {\n  const {\n    questionEditor: questions = [],\n    server: { currentQuestionIdx = -1 }\n  } = state;\n\n  return `${currentQuestionIdx + 1}/${questions.length}`;\n};\n\nexport const getCurrentQuestion = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n  const progress = getProgress(state);\n  return { ...questions[currentQuestionIdx], progress };\n};\n\nexport const getCurrentQuestionNoSolution = state => {\n  const currentQuestion = getCurrentQuestion(state);\n\n  return {\n    ...currentQuestion,\n    answers: currentQuestion.answers.map(answer => {\n      const { isCorrect, ...answerNoSolution } = answer;\n      return answerNoSolution;\n    })\n  };\n};\n","import Peer from \"peerjs\";\n\nconst createPeer = ownId => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  return new Peer(ownId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n};\n\nexport default createPeer;\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport { registerAnswers } from \"./answers\";\nimport { getCurrentQuestionNoSolution } from \"../selectors/questions\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: SET_CURRENT_QUESTION_IDX,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function incrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx + 1));\n  };\n}\n\nexport function decrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx - 1));\n  };\n}\n\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\nexport function toggleAcceptingAnswers() {\n  return {\n    type: TOGGLE_ACCEPTING_ANSWERS\n  };\n}\n\nexport const TOGGLE_ACCEPTING_CONNECTIONS = \"TOGGLE_ACCEPTING_CONNECTIONS\";\nexport function stopAcceptingConnections() {\n  return (dispatch, getState) => {\n    const {\n      connection: { peer = null },\n      server: { acceptingConnections }\n    } = getState();\n\n    console.log(\"Current Accept state: \", acceptingConnections);\n\n    if (acceptingConnections) {\n      dispatch({\n        type: TOGGLE_ACCEPTING_CONNECTIONS\n      });\n      peer.disconnect();\n    }\n  };\n}\n\nexport function startServer() {\n  return (dispatch, getState) => {\n    const {\n      server: { ownServerId = null }\n    } = getState();\n\n    const peer = createPeer(ownServerId);\n\n    const dataHandler = data => {\n      const { type, payload } = data;\n      Logger.info(\"Received Data: \", data);\n      switch (type) {\n        case \"answer\":\n          dispatch(\n            registerAnswers(\n              payload.questionIdx,\n              payload.answerIdxArray,\n              payload.userId\n            )\n          );\n          break;\n        default:\n          Logger.error(\"Switch case default reached\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    peer.on(\"open\", id => {\n      Logger.info(`Successfully created peer with ID \"${id}\"`);\n      dispatch(setConnectionStatus(1));\n      // Set Server ID again, in case the input was empty and PeerJS used a random ID\n      dispatch(setServerId(id));\n    });\n\n    peer.on(\"connection\", connection => {\n      Logger.info(\"New client connected with id: \", connection.peer);\n      connection.on(\"data\", data => dataHandler(data));\n      dispatch(setConnectionStatus(2));\n      dispatch(addConnection(connection));\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n\nexport function sendCurrentQuestionToClients() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    const currentQuestionNoSolution = getCurrentQuestionNoSolution(getState());\n\n    const msg = {\n      type: \"question\",\n      payload: currentQuestionNoSolution\n    };\n\n    if (connections.length > 0 && currentQuestionNoSolution) {\n      Logger.info(\"Sending question to clients\", currentQuestionNoSolution);\n      connections.forEach(connection => connection.send(JSON.stringify(msg)));\n    } else {\n      Logger.error(\"Can't send question to clients\");\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerId, startServer } from \"../actions/server\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: () => {\n    dispatch(startServer());\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Choose a Server ID\",\n  text:\n    \"Please pick a server ID that uniquely identifies your quiz session (e.g. 'algorithms_2_2018') or leave it empty to generate a random ID.\",\n  buttonText: \"Create\",\n  location: \"/server/ask\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={20}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass QuestionEditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nQuestionEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport QuestionEditorAnswerInput from \"./QuestionEditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionEditorContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h5 className=\"my-0\">Edit Question</h5>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\" className=\"font-weight-bold\">\n                  Question Text\n                </Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  <span className=\"font-weight-bold\">Answers </span>\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <QuestionEditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionEditorContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionEditorContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile, closeDropdown } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n    if (typeof closeDropdown === \"function\") {\n      closeDropdown();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  closeDropdown: PropTypes.func\n};\n\nSingleFileInput.defaultProps = {\n  closeDropdown: null\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionEditorListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            closeDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nQuestionEditorListDropdown.propTypes = {\n  onUploadFile: PropTypes.func.isRequired,\n  onUploadDropbox: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionEditorListDropdown from \"./QuestionEditorListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionEditorList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h5 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h5>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon\n                              style={{\n                                marginBottom: \"3px\",\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionEditorListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionEditorList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorList.defaultProps = {\n  questions: [],\n  selectedQuestion: null\n};\nexport default QuestionEditorList;\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\", \"questionIdx\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      questionIdx: {\n        type: \"number\",\n        title: \"Question Index\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { questionEditor: questions } = getState();\n    // Delete first element\n    if (questionIdx === 0) {\n      // It is not the last element\n      if (questions.length > 0) {\n        dispatch(selectQuestion(0));\n        // It is the last element\n      } else {\n        dispatch(selectQuestion(null));\n      }\n    } else {\n      dispatch(selectQuestion(questionIdx - 1));\n    }\n  };\n}\n\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport const SORT_QUESTION = \"SORT_QUESTION\";\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Question Editor Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SORT_ANSWER = \"SORT_ANSWER\";\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport tv4 from \"tv4\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionEditorContent from \"./QuestionEditorContent\";\nimport QuestionEditorList from \"./QuestionEditorList\";\nimport QuestionSchema from \"../../shared/util/questionsSchema\";\nimport * as questionEditorActions from \"../actions/questions\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = { ...questionEditorActions, ...answerActions };\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadQuestionsFromStorage();\n  }\n\n  static getFormattedDate = () => {\n    const today = new Date();\n    let dd = today.getDate();\n\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    return `${dd}-${mm}-${yyyy}`;\n  };\n\n  loadQuestionsFromStorage = () => {\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  };\n\n  downloadFile = data => {\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\n      \"download\",\n      `weclare-${QuestionEditor.getFormattedDate()}.json`\n    );\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    Logger.info(\"Created and started file download\");\n  };\n\n  saveToStorage = data => {\n    localStorage.setItem(\"weclare\", data);\n    Logger.info(\"Saved questionset to local storage\");\n  };\n\n  validateAndSaveToStorage = data => {\n    const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n    if (valid) {\n      Logger.info(\"Questionset was successfully validated\");\n      this.saveToStorage(data);\n      this.loadQuestionsFromStorage();\n    } else {\n      Logger.error(\"Imported file was invalid\", tv4.error);\n    }\n  };\n\n  saveFileToStorage = file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.validateAndSaveToStorage(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionEditorList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                this.saveToStorage(JSON.stringify(questions));\n                this.downloadFile(questions);\n              }}\n              onUploadFile={this.saveFileToStorage}\n              onUploadDropbox={this.validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionEditorContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                this.saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n              disabled={!questions.length > 0}\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.array.isRequired,\n  // Questions\n  loadQuestions: PropTypes.func.isRequired,\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    text: null,\n    type: null,\n    answers: null\n  },\n  disabled: false,\n  selectedAnswerIdx: null\n};\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport Logger from \"../util/Logger\";\n\nconst SingleQuestionCard = props => {\n  const {\n    title,\n    question,\n    selectedAnswersIdx = [],\n    onClickAnswer,\n    disabled,\n    countedAnswers,\n    children,\n    toggleSelectedAnswers,\n    onSendAnswers,\n    isServer,\n    toggleDisabled\n  } = props;\n\n  return (\n    <DefaultCard title={title} badge={question.progress} footer={children}>\n      {question.text && (\n        <div\n          className=\"text-center my-5 h4\"\n          // eslint-disable-next-line\n          dangerouslySetInnerHTML={{ __html: question.text }}\n        />\n      )}\n      {question.answers &&\n        question.answers.map((answer, i) => (\n          <Button\n            outline={!selectedAnswersIdx[i]}\n            id={i}\n            key={answer.id}\n            block\n            onClick={e => {\n              const selectedAnswer = parseInt(e.target.id, 10);\n              toggleSelectedAnswers(selectedAnswer);\n              Logger.info(\"Sending single answer \", selectedAnswer);\n              onSendAnswers([selectedAnswer]);\n              toggleDisabled();\n            }}\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            {answer.text}\n            {countedAnswers && (\n              <Badge\n                className=\"float-right\"\n                style={{ lineHeight: 1.5 }}\n                color=\"secondary\"\n              >\n                {typeof countedAnswers[i] === \"number\" && countedAnswers[i]}\n              </Badge>\n            )}\n          </Button>\n        ))}\n    </DefaultCard>\n  );\n};\n\nexport default SingleQuestionCard;\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport Logger from \"../util/Logger\";\n\nconst convertSelectedAnswersArray = selectedAnswersArray => {\n  if (selectedAnswersArray) {\n    return selectedAnswersArray\n      .map((answer, i) => answer && i)\n      .filter(answer => typeof answer === \"number\");\n  }\n  return [];\n};\n\nconst MultiQuestionCard = props => {\n  const {\n    title,\n    question,\n    selectedAnswersIdx = [],\n    onClickAnswer,\n    disabled,\n    countedAnswers,\n    children,\n    toggleSelectedAnswers,\n    onSendAnswers,\n    isServer,\n    toggleDisabled\n  } = props;\n\n  return (\n    <DefaultCard\n      title={title}\n      badge={question && question.progress}\n      footer={\n        <>\n          {question.mode === \"multi\" &&\n            !isServer && (\n              <>\n                <p className=\"text-center text-muted\">\n                  Multiple choice question: Select answers and click send.\n                </p>\n                <Button\n                  color=\"primary\"\n                  disabled={disabled}\n                  onClick={() => {\n                    const selectedAnswers = convertSelectedAnswersArray(\n                      selectedAnswersIdx\n                    );\n                    Logger.info(\"Sending multi answer \", selectedAnswers);\n                    onSendAnswers(selectedAnswers);\n                    toggleDisabled();\n                  }}\n                  block\n                >\n                  Send Answers\n                </Button>\n              </>\n            )}\n          {children}\n        </>\n      }\n    >\n      {question.text && (\n        <div\n          className=\"text-center my-5 h4\"\n          // eslint-disable-next-line\n          dangerouslySetInnerHTML={{ __html: question.text }}\n        />\n      )}\n      {question.answers &&\n        question.answers.map((answer, i) => (\n          <Button\n            outline={!selectedAnswersIdx[i]}\n            id={i}\n            key={answer.id}\n            block\n            onClick={e => {\n              const selectedAnswer = parseInt(e.target.id, 10);\n              toggleSelectedAnswers(selectedAnswer);\n              Logger.info(\"Toggling multi answer \", selectedAnswer);\n            }}\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            {answer.text}\n            {countedAnswers && (\n              <Badge\n                className=\"float-right\"\n                style={{ lineHeight: 1.5 }}\n                color=\"secondary\"\n              >\n                {typeof countedAnswers[i] === \"number\" && countedAnswers[i]}\n              </Badge>\n            )}\n          </Button>\n        ))}\n    </DefaultCard>\n  );\n};\n\nexport default MultiQuestionCard;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { TQuestion, DQuestion } from \"../types\";\nimport SingleQuestionCard from \"./SingleQuestionCard\";\nimport MultiQuestionCard from \"./MultiQuestionCard\";\n\nconst QuestionCard = props => {\n  const { question, isServer } = props;\n\n  const title = isServer ? \"Ask Question\" : \"Answer Question\";\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {question.mode === \"single\" ? (\n        <SingleQuestionCard title={title} question={question} {...props} />\n      ) : (\n        <MultiQuestionCard title={title} question={question} {...props} />\n      )}\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","export const isConnected = state => {\n  const {\n    server: { connections }\n  } = state;\n  return connections.length > 0;\n};\n\nexport const hasNextQuestion = state => {\n  const {\n    questionEditor: questions = [],\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return currentQuestionIdx + 1 < questions.length;\n};\n\nexport const hasPreviousQuestion = state => {\n  const {\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return !(currentQuestionIdx - 1 < 0);\n};\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport MDSpinner from \"react-md-spinner\";\nimport {\n  toggleAcceptingAnswers,\n  sendCurrentQuestionToClients,\n  incrementQuestionIdx,\n  stopAcceptingConnections\n} from \"../actions/server\";\nimport { isConnected, hasNextQuestion } from \"../selectors/server\";\n\nconst mapStateToProps = state => ({\n  isConnected: isConnected(state),\n  hasNextQuestion: hasNextQuestion(state)\n});\n\nconst mapDispatchToProps = {\n  sendCurrentQuestionToClients,\n  toggleAcceptingAnswers,\n  stopAcceptingConnections,\n  incrementQuestionIdx\n};\n\nclass AskScreenContinueButton extends React.Component {\n  state = {\n    buttonPhase: 0\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.isConnected && state.buttonPhase === 0) {\n      return {\n        buttonPhase: 1\n      };\n    }\n    return null;\n  }\n\n  nextButtonPhase = () => {\n    const { buttonPhase } = this.state;\n\n    // Transition from 0 -> 1 must happen in getDerivedStateFromProps(), because it's based on clients\n    if (buttonPhase > 0) {\n      this.setState(prevState => ({\n        buttonPhase: (prevState.buttonPhase + 1) % 4\n      }));\n    }\n  };\n\n  render() {\n    const {\n      toggleAcceptingAnswers,\n      stopAcceptingConnections,\n      sendCurrentQuestionToClients,\n      incrementQuestionIdx,\n      hasNextQuestion\n    } = this.props;\n    const buttonStateMachine = {\n      // Waiting for clients, button disabled\n      0: {\n        text: (\n          <>\n            <MDSpinner singleColor=\"#8a817c\" size={16} /> Waiting for clients\n          </>\n        ),\n        color: \"primary\",\n        additionalButtonProps: {\n          outline: true,\n          disabled: true\n        }\n      },\n      // Clients connected, ready to send first question and accept answers\n      1: {\n        onClick: () => {\n          stopAcceptingConnections();\n          toggleAcceptingAnswers();\n          sendCurrentQuestionToClients();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start Quiz\n          </>\n        ),\n        color: \"primary\"\n      },\n      // Accepting answers\n      2: {\n        onClick: () => {\n          toggleAcceptingAnswers();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop Question\n          </>\n        ),\n        color: \"primary\"\n      },\n      // // Don't accept answers, waiting to show results\n      // 3: {\n      //   onClick: () => {\n      //     toggleShowVoteCount();\n      //     this.nextButtonPhase();\n      //   },\n      //   text: (\n      //     <>\n      //       <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} /> Show\n      //       Results\n      //     </>\n      //   ),\n      //   color: \"primary\"\n      // },\n      3: {\n        onClick: () => {\n          incrementQuestionIdx();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} /> Next Question\n          </>\n        ),\n        color: \"secondary\",\n        additionalButtonProps: {\n          disabled: !hasNextQuestion\n        }\n      }\n    };\n\n    const { buttonPhase } = this.state;\n    const currentPhaseObj = buttonStateMachine[buttonPhase];\n    return (\n      <Button\n        color={currentPhaseObj.color}\n        outline={currentPhaseObj.outline}\n        block\n        onClick={currentPhaseObj.onClick}\n        {...currentPhaseObj &&\n          currentPhaseObj.additionalButtonProps &&\n          currentPhaseObj.additionalButtonProps}\n      >\n        {currentPhaseObj.text}\n      </Button>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AskScreenContinueButton);\n","export const getAnswerCountForCurrentQuestion = state => {\n  const {\n    server: { currentQuestionIdx },\n    registeredAnswers\n  } = state;\n  if (\n    registeredAnswers.length > 0 &&\n    typeof currentQuestionIdx !== \"undefined\"\n  ) {\n    return registeredAnswers[currentQuestionIdx].map(answer => answer.length);\n  }\n  return [];\n};\n\nexport const getReceivedAnswersCounter = state => {\n  const {\n    server: { connections = [] },\n    registeredAnswers\n  } = state;\n  const flatRegisteredAnswers = registeredAnswers.flat(2);\n  const distinctUsers = [...new Set(flatRegisteredAnswers)].length;\n\n  const connectionCount = connections.length;\n  if (connectionCount === 0) return null;\n  const percentageValue = Math.trunc((distinctUsers / connectionCount) * 100);\n  const percentageString = Number.isNaN(percentageValue)\n    ? \"\"\n    : `(${percentageValue}%)`;\n\n  return `${distinctUsers}/${connectionCount} ${percentageString}`;\n};\n","import React from \"react\";\nimport ChevronRightIcon from \"mdi-react/ChevronRightIcon\";\nimport ChevronLeftIcon from \"mdi-react/ChevronLeftIcon\";\n\nexport const ChevronLeft = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div\n      className=\"text-right align-middle\"\n      onClick={disabled ? null : onClick}\n    >\n      <ChevronLeftIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n\nexport const ChevronRight = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div className=\"text-left align-middle\" onClick={disabled ? null : onClick}>\n      <ChevronRightIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport AskScreenContinueButton from \"./AskScreenContinueButton\";\nimport { getCurrentQuestion } from \"../selectors/questions\";\nimport {\n  getAnswerCountForCurrentQuestion,\n  getReceivedAnswersCounter\n} from \"../selectors/answers\";\nimport { incrementQuestionIdx, decrementQuestionIdx } from \"../actions/server\";\nimport { ChevronRight, ChevronLeft } from \"../../shared/components/Chevron\";\nimport { hasPreviousQuestion, hasNextQuestion } from \"../selectors/server\";\n\nclass AskScreen extends React.Component {\n  state = {\n    showVoteCount: false\n  };\n\n  toggleShowVoteCount = () => {\n    this.setState(prevState => ({\n      showVoteCount: !prevState.showVoteCount\n    }));\n  };\n\n  render() {\n    const {\n      currentQuestion,\n      countedAnswers,\n      receivedAnswersCounter,\n      hasNextQuestion,\n      hasPreviousQuestion,\n      incrementQuestionIdx,\n      decrementQuestionIdx\n    } = this.props;\n    const { showVoteCount } = this.state;\n\n    return (\n      <Row className=\"justify-content-center\">\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronLeft\n            disabled={!hasPreviousQuestion}\n            onClick={() => decrementQuestionIdx()}\n          />\n        </Col>\n        <QuestionCard\n          question={currentQuestion}\n          countedAnswers={showVoteCount && countedAnswers}\n          isServer\n          disabled\n        >\n          <>\n            {receivedAnswersCounter && (\n              <div className=\"d-flex flex-row justify-content-between align-items-center mb-2\">\n                {/* <div className=\"d-flex flex-row justify-content-between\"> */}\n\n                <div className=\"text-muted\">\n                  {receivedAnswersCounter} users have answered\n                </div>\n\n                <Button\n                  size=\"sm\"\n                  outline={!showVoteCount}\n                  onClick={this.toggleShowVoteCount}\n                >\n                  <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                  {showVoteCount ? \"Hide\" : \"Show\"} Results\n                </Button>\n              </div>\n            )}\n\n            <AskScreenContinueButton />\n          </>\n        </QuestionCard>\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronRight\n            disabled={!hasNextQuestion}\n            onClick={() => incrementQuestionIdx()}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentQuestion: getCurrentQuestion(state),\n  countedAnswers: getAnswerCountForCurrentQuestion(state),\n  receivedAnswersCounter: getReceivedAnswersCounter(state),\n  hasPreviousQuestion: hasPreviousQuestion(state),\n  hasNextQuestion: hasNextQuestion(state)\n});\n\nconst mapDispatchToProps = {\n  incrementQuestionIdx,\n  decrementQuestionIdx\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n\nexport const updateQuestionIndexes = array =>\n  array.map((element, i) => ({ ...element, questionIdx: i }));\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS,\n  TOGGLE_ACCEPTING_CONNECTIONS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestionIdx: 0,\n    acceptingAnswers: false,\n    acceptingConnections: true\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return {\n        ...state,\n        currentQuestionIdx:\n          action.payload.questionIdx < 0 ? 0 : action.payload.questionIdx\n      };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    case TOGGLE_ACCEPTING_CONNECTIONS:\n      return { ...state, acceptingConnections: !state.acceptingConnections };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWERS, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWERS: {\n      const { answerIdxArray, questionIdx, userId } = action.payload;\n\n      const registeredAnswers = changeInArray(state, questionIdx, question =>\n        question.map((answer, i) => {\n          if (answerIdxArray.includes(i)) {\n            return [...answer, userId];\n          }\n          return answer;\n        })\n      );\n\n      return registeredAnswers;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questions\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./answers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questions\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray,\n  updateQuestionIndexes\n} from \"../../shared/util/QuestionHelpers\";\n\nconst newQuestion = (idx = 0) => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  questionIdx: idx,\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\n// This is the selected question in the questionEditor, don't confuse with\n// selected question in server state\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const questionsCount = state.length;\n      deepClonedState.push(newQuestion(questionsCount));\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      const reindexedArray = updateQuestionIndexes(deepClonedState);\n\n      return reindexedArray;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport ConnectFormServerContainer from \"./ConnectFormServerContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route\n            exact\n            path=\"/server/create\"\n            component={ConnectFormServerContainer}\n          />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\n// Client Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\n// TODO: This is probably unnecessary b/c PeerJS keeps its own connection object\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n\nexport function sendAnswers(answerIdxArray) {\n  return (dispatch, getState) => {\n    const {\n      client: { connection = null, currentQuestion = null }\n    } = getState();\n\n    if (\n      connection &&\n      currentQuestion &&\n      typeof answerIdxArray !== \"undefined\"\n    ) {\n      const msg = {\n        type: \"answer\",\n        payload: {\n          questionIdx: currentQuestion.questionIdx,\n          answerIdxArray,\n          userId: connection.provider.id\n        }\n      };\n      connection.send(msg);\n    }\n  };\n}\n\nexport function connectToServer() {\n  return (dispatch, getState) => {\n    const {\n      client: { remoteServerId = null }\n    } = getState();\n\n    const peer = createPeer();\n\n    const dataHandler = data => {\n      const dataObj = JSON.parse(data);\n      const { type, payload } = dataObj;\n      Logger.info(\"Received Data: \", dataObj);\n      switch (type) {\n        case \"question\":\n          dispatch(setCurrentQuestion(payload));\n          break;\n\n        default:\n          Logger.error(\"ERROR: Client Data Handler Default Case\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    const connection = peer.connect(\n      remoteServerId,\n      { reliable: false }\n    );\n    dispatch(addConnection(connection));\n    dispatch(setConnectionStatus(1));\n\n    connection.on(\"open\", () => {\n      Logger.info(`Successfully connected to server ${connection.peer}`);\n      dispatch(setConnectionStatus(2));\n      connection.on(\"data\", data => dataHandler(data));\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\n\nimport { setRemoteServerId, connectToServer } from \"../actions/client\";\n\n// Source: https://github.com/peers/peerjs/issues/227#issue-39009356\n// const makePeerHeartbeater = peer => {\n//   let timeoutId = 0;\n//   function heartbeat() {\n//     timeoutId = setTimeout(heartbeat, 20000);\n//     // eslint-disable-next-line\n//     if (peer.socket._wsOpen()) {\n//       peer.socket.send({ type: \"HEARTBEAT\" });\n//       Logger.info(\"Sent heartbeat\");\n//     }\n//   }\n//   // Start\n//   heartbeat();\n//   // return\n//   return {\n//     start() {\n//       if (timeoutId === 0) {\n//         heartbeat();\n//       }\n//     },\n//     stop() {\n//       clearTimeout(timeoutId);\n//       timeoutId = 0;\n//     }\n//   };\n// };\n\n// const clickConnect = (serverId, dispatch) => {\n//   const peer = createPeer();\n\n//   const heartbeater = makePeerHeartbeater(peer);\n\n//   dispatch(setPeer(peer));\n\n//   peer.on(\"error\", err => {\n//     console.error(err);\n//     dispatch(setConnectionStatus(3));\n//   });\n\n//   const connection = peer.connect(\n//     serverId,\n//     { reliable: false }\n//   );\n//   dispatch(addConnection(connection));\n//   dispatch(setConnectionStatus(1));\n\n//   connection.on(\"open\", () => {\n//     console.log(\"Client Connected\");\n//     dispatch(setConnectionStatus(2));\n//     connection.on(\"data\", data => {\n//       const msg = JSON.parse(data);\n//       console.log(\"Received data: \", msg);\n//       dispatch(setCurrentQuestion(msg));\n//     });\n//   });\n// };\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: () => dispatch(connectToServer())\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size, text } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex flex-column justify-content-center\">\n          <div style={{ textAlign: \"center\" }}>\n            <MDSpinner\n              color1=\"#8a817c\"\n              color2=\"#f44336\"\n              color3=\"#dc9125\"\n              color4=\"#5fa15d\"\n              size={size}\n            />\n          </div>\n          {text && (\n            <div\n              style={{\n                textAlign: \"center\"\n              }}\n              className=\"mt-4 text-muted\"\n            >\n              {text}\n            </div>\n          )}\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\nimport { TQuestion, DQuestion } from \"../../shared/types\";\nimport { sendAnswers } from \"../actions/client\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSendAnswers: answerIdxArray => dispatch(sendAnswers(answerIdxArray))\n});\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswersIdx: []\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n      this.initSelectedAnswers(currentQuestion.answers.length);\n    }\n  }\n\n  toggleSelectedAnswers = answerIdx => {\n    this.setState(prevState => {\n      const { selectedAnswersIdx } = prevState;\n      return {\n        ...prevState,\n        selectedAnswersIdx: changeInArray(\n          selectedAnswersIdx,\n          answerIdx,\n          e => !e\n        )\n      };\n    });\n  };\n\n  toggleDisabled = () => {\n    this.setState(prevState => ({\n      disabled: !prevState.disabled\n    }));\n  };\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  initSelectedAnswers(answerCount) {\n    this.setState({ selectedAnswersIdx: Array(answerCount).fill(false) });\n  }\n\n  render() {\n    const { currentQuestion, onSendAnswers } = this.props;\n    const { disabled, selectedAnswersIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    const commonProps = {\n      question: currentQuestion,\n      disabled,\n      selectedAnswersIdx,\n      toggleSelectedAnswers: this.toggleSelectedAnswers,\n      toggleDisabled: this.toggleDisabled,\n      onSendAnswers\n    };\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard {...commonProps} />\n        ) : (\n          <SpinnerCard\n            title=\"Waiting For Question From Server\"\n            size={36}\n            text=\"You're connected to the server, but the Quiz Session has not been started yet.\"\n          />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectFormClientContainer from \"./ConnectFormClientContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectFormClientContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport raw from \"raw.macro\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow-none\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>\n              <div\n                className=\"markdown-body\"\n                style={{\n                  fontFamily: \"IBM Plex Sans\"\n                }}\n                // eslint-disable-next-line\n                dangerouslySetInnerHTML={{\n                  __html: snarkdown(raw(\"../public/README.MD\"))\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-5 mx-auto text-center mt-5\">\n      <h1 className=\"display-3 font-weight-bold text-dark\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              size=\"lg\"\n              block\n              outline\n              color=\"primary\"\n            >\n              Join Quiz Session\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              size=\"lg\"\n              block\n              outline\n              color=\"primary\"\n            >\n              Create Quiz Session\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 94;"],"sourceRoot":""}