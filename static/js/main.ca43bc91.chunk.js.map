{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","shared/util/Logger.js","shared/actions/connection.js","server/selectors/answers.js","server/actions/answers.js","server/selectors/questions.js","shared/util/NetworkHelpers.js","server/actions/server.js","server/components/ConnectFormServerContainer.js","shared/components/InfoPopoverIcon.js","server/components/QuestionEditorAnswerInput.js","shared/components/CodemirrorWrapper.js","server/components/QuillWrapper.js","server/components/QuestionEditorContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionEditorListDropdown.js","server/components/QuestionEditorList.js","shared/util/FileHelpers.js","shared/types.js","server/components/QuestionEditor.js","shared/util/QuestionsSchema.js","server/actions/questions.js","server/components/QuestionEditorContainer.js","shared/components/QuestionCard.js","server/selectors/server.js","server/components/AskScreenContinueButton.js","server/components/AskScreenContinueButtonContainer.js","shared/components/Chevron.js","server/components/TerminalWindow.js","server/actions/terminal.js","server/components/TerminalWindowContainer.js","server/components/ExecuteCodeButton.js","server/actions/doppio.js","server/components/ExecuteCodeButtonContainer.js","server/components/CodeExecutionArea.js","server/components/AskScreen.js","server/components/AskScreenContainer.js","shared/util/QuestionHelpers.js","server/reducers/server.js","server/reducers/terminal.js","server/reducers/answers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questions.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectFormClientContainer.js","shared/components/SpinnerCard.js","client/selectors/client.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js","../node_modules/peerjs/dist sync"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","peer","_this$state","client","server","concat","peerOpen","open","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","encodeURI","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","NavLink","tag","Link","to","connect","connection","keys","connections","length","connectionError","errorMsg","components_Header","assign","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","inputIsInvalid","validateServerId","id","isValid","test","objectSpread","_this2","match","onChangeServerId","onClickConnect","serverId","buttonText","history","helpText","validationError","connectionStatus","busyText","connectionBusy","onToggleConnectionBusy","onClearConnectionError","params","Redirect","components_DefaultCard","Form","FormGroup","row","bsSize","type","invalid","Boolean","onChange","e","newId","target","FormFeedback","FormText","Button","Spinner","undefined","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","SET_PEER","SET_CONNECTION_STATUS","SET_CONNECTION_ERROR","CLEAR_CONNECTION_ERROR","TOGGLE_CONNECTION_BUSY","toggleConnectionBusy","setConnectionError","newErrorMsg","payload","clearConnectionError","setConnectionStatus","newStatus","setPeer","getAnswerCountForCurrentQuestion","currentQuestionIdx","registeredAnswers","map","answer","getNumberOfUsersAnswered","_state$server","_state$server$connect","_state$registeredAnsw","flatRegisteredAnswers","flat","toConsumableArray","Set","getNumberOfUsersAnsweredString","_state$server$connect2","connectionCount","distinctUsers","percentageValue","Math","trunc","percentageString","Number","isNaN","REGISTER_ANSWERS","registerAnswers","questionIdx","answerIdxArray","userId","dispatch","getState","acceptingAnswers","newState","NEXT_ASK_SCREEN_STATE","INIT_ANSWERS","initAnswers","emptyAnswerArray","questionEditor","question","answers","array","getCurrentQuestion","questions","progress","getProgress","getCurrentQuestionNoSolution","currentQuestion","isCorrect","objectWithoutProperties","createPeer","ownId","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","ADD_CONNECTION","addConnection","SET_SERVER_ID","setServerId","SET_CURRENT_QUESTION_IDX","setCurrentQuestionIdx","SET_ASK_SCREEN_STATE","resetAskScreenState","incrementQuestionIdx","_getState3$server$cur","TOGGLE_ACCEPTING_ANSWERS","toggleAcceptingAnswers","TOGGLE_BUSY","toggleBusy","TOGGLE_ACCEPTING_CONNECTIONS","staticProps","withRouter","busy","newServerId","_ref","asyncToGenerator","regenerator_default","mark","_callee2","openAsync","_openAsync","dataHandler","_getState7","_getState7$server$own","wrap","_context2","prev","next","_callee","_context","abrupt","Promise","resolve","on","info","stop","apply","_x3","error","err","sent","log","_x","_x2","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","QuestionEditorAnswerInput","isHovered","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","QuestionEditorAnswerInput_RadioInput","onSetCorrectAnswer","QuestionEditorAnswerInput_CheckboxInput","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","CodemirrorWrapper","onEditContent","_props$readOnly","readOnly","react_codemirror2","options","lineNumbers","theme","viewportMargin","Infinity","onBeforeChange","editor","QuillWrapper","formats","modules","toolbar","list","font","syntax","highlight","hljs","highlightAuto","handleChange","newValue","registerLanguage","java","configure","languages","react_quill_lib_default","QuestionEditorContent","toggleCodeSnippetVisibility","codeSnippetVisible","code","onEditQuestionText","onEditQuestionCode","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","components_CodemirrorWrapper","block","MonitorIcon_default","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_QuestionEditorAnswerInput","placeholder","PlaylistPlusIcon_default","CancelIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","closeDropdown","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionEditorListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionEditorList","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionEditorListDropdown","DownloadIcon_default","downloadFile","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","setAttribute","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","getFormattedDate","remove","saveToStorage","localStorage","setItem","DQuestion","PropTypes","string","shape","arrayOf","object","QuestionEditor","loadQuestionsFromStorage","addQuestion","selectQuestion","editCurrentQuestionText","editCurrentQuestionCode","editQuestionType","editQuestionMode","deleteQuestion","addAnswer","editAnswerText","deleteAnswer","setCorrectSingleAnswer","setCorrectMultiAnswer","sortQuestion","sortAnswer","saveFileToStorage","validateAndSaveToStorage","components_QuestionEditorList","components_QuestionEditorContent","xs","push","ContentSaveIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_CODE","EDIT_QUESTION_MODE","newMode","oldMode","EDIT_QUESTION_TYPE","newType","oldType","DELETE_QUESTION","LOAD_QUESTIONS","loadQuestions","newQuestions","getItem","parse","tv4","validate","QuestionSchema","reader","FileReader","onload","readAsText","SORT_QUESTION","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","answerIdx","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","questionEditorActions","answerActions","QuestionCard","selectedAnswersArray","filter","querySelector","highlightBlock","selectedAnswersIdx","countedAnswers","toggleSelectedAnswers","onSendAnswers","toggleDisabled","highlightSolutions","selectedAnswers","convertSelectedAnswersArray","dangerouslySetInnerHTML","__html","selectedAnswer","lineHeight","isConnected","hasNextQuestion","_state$questionEditor","_state$server$current","hasPreviousQuestion","_state$server$current2","AskScreenContinueButton","nextAskScreenState","currentPhaseObj","0","additionalButtonProps","1","PlayIcon_default","2","PauseIcon_default","3","SkipNextIcon_default","currentAskScreenState","_getState6$server","_getState5","_getState5$connection","acceptingConnections","disconnect","currentQuestionNoSolution","forEach","send","ChevronLeft","ChevronLeftIcon_default","ChevronRight","ChevronRightIcon_default","TerminalWindow","terminalRef","scrollToBottom","scrollTop","scrollHeight","showTerminal","messages","overflow","whiteSpace","ADD_LINE","addLine","line","addNewLine","RESET_TERMINAL","resetTerminal","terminal","ExecuteCodeButton","runCurrentCode","CodeTagsIcon_default","Doppio","require","BrowserFS","findPublicStaticClass","exec","writeJavaSourceFileAsync","reject","fs","writeFile","setupBrowserFs","_ref2","install","/tmp","/sys","_ref3","_callee3","_getState","classname","_window2","_process","_context3","stdout","listenerCount","toString","stderr","VM","JVM","doppioHomePath","classpath","jvmObject","runClass","exitCode","_x4","CodeExecutionArea","onClickExecute","ExecuteCodeButtonContainer","TerminalWindowContainer","AskScreen","toggleShowVoteCount","showVoteCount","toggleShowTerminal","toggleHighlightSolutions","initialState","prevQuestion","receivedAnswersCounter","decrementQuestionIdx","isBusy","questionHasCodeSnippet","Chevron_ChevronLeft","components_QuestionCard","CheckAllIcon_default","FormatListNumberedIcon_default","AskScreenContinueButtonContainer","components_CodeExecutionArea","Chevron_ChevronRight","_getState4$server$cur","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","_action$payload","combineReducers","deepClonedState","questionsCount","idx","nanoid","newQuestion","_action$payload2","_action$payload3","firstAnswerFound","_action$payload4","_action$payload5","q","_action$payload6","_action$payload7","modAnswers","_action$payload8","_action$payload9","element","_action$payload10","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Switch","Route","exact","path","component","ConnectFormServerContainer","AskScreenContainer","QuestionEditorContainer","render","components_Footer","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","_getState2","_getState2$client$rem","dataObj","reliable","SpinnerCard","Helmet","textAlign","AnswerScreen","prevProps","resetState","initSelectedAnswers","answerCount","fill","hasQuestion","components_SpinnerCard","_getState$client","_getState$client$conn","_getState$client$curr","provider","sendAnswers","clientStore","mainClientReducer","Client","ClientHeaderContainer","ConnectFormClientContainer","About","fontFamily","snarkdown","SelectBox","emoji","role","aria-label","fontSize","StartPage","CardDeck","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","Error","module","exports"],"mappings":"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","file":"static/js/main.ca43bc91.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nconst Footer = () => (\n  <div>\n    <hr />\n    <footer className=\"container\">\n      <Row>\n        <Col>\n          <a className=\"font-weight-light text-muted\" href=\"/about\">\n            &copy; 2018 Moritz Stückler – HAW Hamburg\n          </a>\n        </Col>\n        <Col className=\"text-right\">\n          <a href=\"https://github.com/pReya/weclare/\">\n            <GithubCircleIcon />\n          </a>\n        </Col>\n      </Row>\n    </footer>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId, peer } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    const peerOpen = peer && peer.open;\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) && peerOpen ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    encodeURI(\n                      `${window.location.origin}/client/connect/${ownServerId}`\n                    )\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Container, Navbar, NavbarBrand, NavLink } from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const {\n    status,\n    numberOfClients,\n    isServer,\n    isClient,\n    ownServerId,\n    peer\n  } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-none d-flex flex-row justify-content-between bg-white py-3\"\n      >\n        <Container>\n          <NavbarBrand className=\"w-50\" href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n              peer={peer}\n            />\n          )}\n\n          <NavLink className=\"w-50 text-right\" tag={Link} to=\"/about\">\n            About\n          </NavLink>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId,\n  connectionError: state.connection.errorMsg,\n  peer: state.connection.peer\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport {\n  Form,\n  FormText,\n  FormFeedback,\n  FormGroup,\n  Button,\n  Input,\n  Col,\n  Spinner\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport { Redirect } from \"react-router-dom\";\nimport DefaultCard from \"./DefaultCard\";\n\nclass ConnectForm extends React.Component {\n  state = {\n    inputIsInvalid: false\n  };\n\n  validateServerId = id => {\n    const serverIdRex = /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/;\n    const isValid = serverIdRex.test(id);\n    this.setState(prevState => ({ ...prevState, inputIsInvalid: !isValid }));\n  };\n\n  render() {\n    const {\n      match,\n      onChangeServerId,\n      onClickConnect,\n      serverId,\n      title,\n      text,\n      buttonText,\n      history,\n      location,\n      helpText,\n      validationError,\n      connectionStatus,\n      busyText,\n      connectionError,\n      connectionBusy,\n      onToggleConnectionBusy,\n      onClearConnectionError,\n      isServer\n    } = this.props;\n\n    const { inputIsInvalid } = this.state;\n\n    // React Router: If URL has serverID\n    if (match && match.params && match.params.serverId) {\n      onChangeServerId(match.params.serverId);\n    }\n\n    if (history && location && connectionStatus === (isServer ? 1 : 2)) {\n      return <Redirect to={location} />;\n    }\n\n    return (\n      <DefaultCard title={title} text={text}>\n        <Form>\n          <FormGroup row className=\"form-row mb-1\">\n            <Col>\n              <Input\n                bsSize=\"lg\"\n                id=\"serverId\"\n                type=\"text\"\n                value={serverId}\n                disabled={connectionBusy}\n                invalid={inputIsInvalid || Boolean(connectionError)}\n                onChange={e => {\n                  const newId = e.target.value;\n                  this.validateServerId(newId);\n                  onChangeServerId(newId);\n                  if (typeof onClearConnectionError === \"function\") {\n                    onClearConnectionError();\n                  }\n                }}\n              />\n              {validationError &&\n                inputIsInvalid && (\n                  <FormFeedback>{validationError}</FormFeedback>\n                )}\n              {connectionError && (\n                <FormFeedback>{connectionError}</FormFeedback>\n              )}\n              {helpText && <FormText>{helpText}</FormText>}\n            </Col>\n            <Col md={4}>\n              <Button\n                type=\"button\"\n                id=\"connect\"\n                className=\"btn-block\"\n                size=\"lg\"\n                disabled={connectionBusy || inputIsInvalid || !serverId}\n                onClick={() => {\n                  onClickConnect(serverId);\n                  if (typeof onToggleConnectionBusy === \"function\") {\n                    onToggleConnectionBusy();\n                  }\n                }}\n              >\n                {connectionBusy ? (\n                  <>\n                    <Spinner size=\"sm\" color=\"info\" /> {busyText}\n                  </>\n                ) : (\n                  buttonText\n                )}\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </DefaultCard>\n    );\n  }\n}\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  validationError: PropTypes.string,\n  match: ReactRouterPropTypes.match,\n  connectionStatus: PropTypes.number,\n  busyText: PropTypes.string\n};\n\nConnectForm.defaultProps = {\n  helpText: undefined,\n  match: undefined,\n  buttonText: \"Connect\",\n  validationError: undefined,\n  connectionStatus: 0,\n  busyText: \"Waiting...\"\n};\n\nexport default ConnectForm;\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\nexport const SET_CONNECTION_ERROR = \"SET_CONNECTION_ERROR\";\nexport const CLEAR_CONNECTION_ERROR = \"CLEAR_CONNECTION_ERROR\";\nexport const TOGGLE_CONNECTION_BUSY = \"TOGGLE_CONNECTION_BUSY\";\n\nexport function toggleConnectionBusy() {\n  return {\n    type: TOGGLE_CONNECTION_BUSY\n  };\n}\n\nexport function setConnectionError(newErrorMsg) {\n  return {\n    type: SET_CONNECTION_ERROR,\n    payload: {\n      newErrorMsg\n    }\n  };\n}\n\nexport function clearConnectionError() {\n  return {\n    type: CLEAR_CONNECTION_ERROR\n  };\n}\n\nexport function setConnectionStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","export const getAnswerCountForCurrentQuestion = state => {\n  const {\n    server: { currentQuestionIdx },\n    registeredAnswers\n  } = state;\n  if (\n    registeredAnswers.length > 0 &&\n    typeof currentQuestionIdx !== \"undefined\"\n  ) {\n    return registeredAnswers[currentQuestionIdx].map(answer => answer.length);\n  }\n  return [];\n};\n\nexport const getNumberOfUsersAnswered = state => {\n  const {\n    server: { connections = [], currentQuestionIdx },\n    registeredAnswers = []\n  } = state;\n\n  const connectionCount = connections.length;\n  if (connectionCount === 0 || !registeredAnswers[currentQuestionIdx])\n    return null;\n\n  const flatRegisteredAnswers = registeredAnswers[currentQuestionIdx].flat(2);\n  const distinctUsers = [...new Set(flatRegisteredAnswers)].length;\n\n  return distinctUsers;\n};\n\nexport const getNumberOfUsersAnsweredString = state => {\n  const {\n    server: { connections = [] }\n  } = state;\n\n  const connectionCount = connections.length;\n  const distinctUsers = getNumberOfUsersAnswered(state) || \"0\";\n\n  const percentageValue = Math.trunc((distinctUsers / connectionCount) * 100);\n  const percentageString = Number.isNaN(percentageValue)\n    ? \"\"\n    : `(${percentageValue}%)`;\n\n  return `${distinctUsers}/${connectionCount} ${percentageString}`;\n};\n","import { getNumberOfUsersAnswered } from \"../selectors/answers\";\nimport { NEXT_ASK_SCREEN_STATE } from \"./server\";\n// Server Answer Actions\nexport const REGISTER_ANSWERS = \"REGISTER_ANSWERS\";\nexport function registerAnswers(questionIdx, answerIdxArray, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWERS,\n        payload: {\n          questionIdx,\n          answerIdxArray,\n          userId\n        }\n      });\n      // Get state again after new answer has been registered\n      const newState = getState();\n      const receivedAnswers = getNumberOfUsersAnswered(newState);\n\n      // End question when all users have sent answers\n      if (receivedAnswers >= server.connections.length) {\n        dispatch({\n          type: NEXT_ASK_SCREEN_STATE\n        });\n      }\n    }\n  };\n}\n\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const getProgress = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n\n  if (questions.length > 0 && typeof currentQuestionIdx === \"number\") {\n    return `${currentQuestionIdx + 1}/${questions.length}`;\n  }\n  return \"0/0\";\n};\n\nexport const getCurrentQuestion = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n  const progress = getProgress(state);\n\n  if (questions.length > 0 && typeof currentQuestionIdx === \"number\") {\n    return { ...questions[currentQuestionIdx], progress };\n  }\n\n  return undefined;\n};\n\nexport const getCurrentQuestionNoSolution = state => {\n  const currentQuestion = getCurrentQuestion(state);\n\n  return {\n    ...currentQuestion,\n    answers: currentQuestion.answers.map(answer => {\n      const { isCorrect, ...answerNoSolution } = answer;\n      return answerNoSolution;\n    })\n  };\n};\n","import Peer from \"peerjs\";\n\nconst createPeer = ownId => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  return new Peer(ownId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n};\n\nexport default createPeer;\n","import Logger from \"../../shared/util/Logger\";\nimport {\n  setPeer,\n  setConnectionStatus,\n  setConnectionError,\n  toggleConnectionBusy\n} from \"../../shared/actions/connection\";\nimport { registerAnswers } from \"./answers\";\nimport { getCurrentQuestionNoSolution } from \"../selectors/questions\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: SET_CURRENT_QUESTION_IDX,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function sendCurrentQuestionToClients() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    const currentQuestionNoSolution = getCurrentQuestionNoSolution(getState());\n\n    const msg = {\n      type: \"question\",\n      payload: currentQuestionNoSolution\n    };\n\n    if (connections.length > 0 && currentQuestionNoSolution) {\n      Logger.info(\"Sending question to clients\", currentQuestionNoSolution);\n      connections.forEach(connection => connection.send(JSON.stringify(msg)));\n    } else {\n      Logger.error(\"Can't send question to clients\");\n    }\n  };\n}\n\nexport const SET_ASK_SCREEN_STATE = \"SET_ASK_SCREEN_STATE\";\nexport function setAskScreenState(newState) {\n  return {\n    type: SET_ASK_SCREEN_STATE,\n    payload: {\n      newState\n    }\n  };\n}\n\nexport function resetAskScreenState() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    if (connections.length > 0) {\n      dispatch({\n        type: SET_ASK_SCREEN_STATE,\n        payload: {\n          newState: 1\n        }\n      });\n    } else {\n      dispatch({\n        type: SET_ASK_SCREEN_STATE,\n        payload: {\n          newState: 0\n        }\n      });\n    }\n  };\n}\n\nexport function incrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx + 1));\n    dispatch(resetAskScreenState());\n  };\n}\n\nexport function decrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx - 1));\n    dispatch(resetAskScreenState());\n  };\n}\n\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\nexport function toggleAcceptingAnswers() {\n  return {\n    type: TOGGLE_ACCEPTING_ANSWERS\n  };\n}\n\nexport const TOGGLE_BUSY = \"TOGGLE_BUSY\";\nexport function toggleBusy() {\n  return {\n    type: TOGGLE_BUSY\n  };\n}\n\nexport const TOGGLE_ACCEPTING_CONNECTIONS = \"TOGGLE_ACCEPTING_CONNECTIONS\";\nexport function stopAcceptingConnections() {\n  return (dispatch, getState) => {\n    const {\n      connection: { peer = null },\n      server: { acceptingConnections }\n    } = getState();\n\n    if (acceptingConnections) {\n      dispatch({\n        type: TOGGLE_ACCEPTING_CONNECTIONS\n      });\n      peer.disconnect();\n    }\n  };\n}\n\nexport const NEXT_ASK_SCREEN_STATE = \"NEXT_ASK_SCREEN_STATE\";\nexport function nextAskScreenState() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentAskScreenState, connections }\n    } = getState();\n\n    const actions = {\n      // Waiting for clients, button disabled\n      0: () => {\n        if (connections.length > 0) {\n          dispatch({\n            type: SET_ASK_SCREEN_STATE,\n            payload: {\n              newState: 1\n            }\n          });\n        }\n      },\n      // Clients connected, ready to send first question and accept answers\n      1: () => {\n        dispatch(stopAcceptingConnections());\n        dispatch(toggleAcceptingAnswers());\n        dispatch(sendCurrentQuestionToClients());\n        dispatch({\n          type: NEXT_ASK_SCREEN_STATE\n        });\n      },\n      // Stop accepting Answers\n      2: () => {\n        dispatch(toggleAcceptingAnswers());\n        dispatch({\n          type: NEXT_ASK_SCREEN_STATE\n        });\n      },\n      // Next question\n      3: () => {\n        dispatch(incrementQuestionIdx());\n      }\n    };\n\n    // Run transition actions\n    actions[currentAskScreenState]();\n  };\n}\n\nexport function startServer() {\n  return async (dispatch, getState) => {\n    async function openAsync(peer) {\n      return new Promise(resolve => {\n        peer.on(\"open\", id => {\n          Logger.info(`Successfully created peer with ID \"${id}\"`);\n          resolve(id);\n        });\n      });\n    }\n\n    const dataHandler = data => {\n      const { type, payload } = data;\n      Logger.info(\"Received data: \", data);\n      switch (type) {\n        case \"answer\":\n          dispatch(\n            registerAnswers(\n              payload.questionIdx,\n              payload.answerIdxArray,\n              payload.userId\n            )\n          );\n          break;\n        default:\n          Logger.error(\"dataHandler Switch case default reached\");\n      }\n    };\n\n    const {\n      server: { ownServerId = null }\n    } = getState();\n\n    const peer = createPeer(ownServerId);\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      switch (err.type) {\n        case \"unavailable-id\": {\n          dispatch(setConnectionError(\"This ID is already taken.\"));\n          dispatch(toggleConnectionBusy());\n          break;\n        }\n        default:\n      }\n      dispatch(setConnectionStatus(3));\n    });\n\n    peer.on(\"connection\", connection => {\n      Logger.info(\"New client connected with id: \", connection.peer);\n      connection.on(\"data\", data => dataHandler(data));\n      dispatch(setConnectionStatus(2));\n      dispatch(addConnection(connection));\n      dispatch({\n        type: SET_ASK_SCREEN_STATE,\n        payload: {\n          newState: 1\n        }\n      });\n    });\n\n    dispatch(setPeer(peer));\n    const id = await openAsync(peer);\n    console.log(\"ID\", id);\n    if (typeof id === \"string\") {\n      dispatch(setConnectionStatus(1));\n      dispatch(setServerId(id));\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerId, startServer } from \"../actions/server\";\nimport {\n  toggleConnectionBusy,\n  clearConnectionError\n} from \"../../shared/actions/connection\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: () => {\n    dispatch(startServer());\n  },\n  onToggleConnectionBusy: () => dispatch(toggleConnectionBusy()),\n  onClearConnectionError: () => dispatch(clearConnectionError())\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId,\n  connectionStatus: state.connection.status,\n  connectionBusy: state.connection.busy,\n  connectionError: state.connection.errorMsg\n});\n\nconst staticProps = {\n  title: \"Choose a Server ID\",\n  text:\n    \"Please pick a server ID that uniquely identifies your quiz session (e.g. 'algorithms_2_2018') or leave it empty to generate a random ID.\",\n  buttonText: \"Create\",\n  busyText: \"Creating...\",\n  location: \"/server/ask\",\n  validationError:\n    \"Must start and end with alphanumeric characters. '-','_' and ' ' allowed in between.\",\n  isServer: true\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={20}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\n\nclass QuestionEditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              {/* <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText> */}\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nQuestionEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport PropTypes from \"prop-types\";\nimport \"codemirror/theme/eclipse.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/clike/clike\";\n\nconst CodemirrorWrapper = props => {\n  const { content, onEditContent, readOnly = false } = props;\n\n  return (\n    <CodeMirror\n      className=\"border rounded overflow-hidden mb-4\"\n      options={{\n        readOnly,\n        lineNumbers: true,\n        theme: \"eclipse\",\n        mode: \"text/x-java\",\n        viewportMargin: Infinity\n      }}\n      value={content}\n      onBeforeChange={(editor, data, value) => {\n        onEditContent(value);\n      }}\n    />\n  );\n};\n\nCodemirrorWrapper.propTypes = {\n  content: PropTypes.string,\n  onEditContent: PropTypes.func,\n  readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\n\nCodemirrorWrapper.defaultProps = {\n  content: \"\",\n  onEditContent: () => null,\n  readOnly: false\n};\n\nexport default CodemirrorWrapper;\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport java from \"highlight.js/lib/languages/java\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\",\n    \"font\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"],\n      [{ font: [] }]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    hljs.registerLanguage(\"java\", java);\n    hljs.configure({ languages: [\"java\"] });\n  }\n\n  handleChange = newValue => {\n    const { onEditContent } = this.props;\n    onEditContent(newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport MonitorIcon from \"mdi-react/MonitorIcon\";\nimport CancelIcon from \"mdi-react/CancelIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport QuestionEditorAnswerInput from \"./QuestionEditorAnswerInput\";\nimport CodemirrorWrapper from \"../../shared/components/CodemirrorWrapper\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nclass QuestionEditorContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeSnippetVisible: Boolean(props.question.code)\n    };\n  }\n\n  toggleCodeSnippetVisibility = () => {\n    this.setState(prevState => ({\n      codeSnippetVisible: !prevState.codeSnippetVisible\n    }));\n  };\n\n  render() {\n    const {\n      question,\n      selectedQuestion,\n      onEditAnswerText,\n      onEditQuestionText,\n      onEditQuestionCode,\n      onEditQuestionMode,\n      onEditQuestionType,\n      onAddAnswer,\n      onSortAnswer,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      onDeleteQuestion\n    } = this.props;\n\n    const { codeSnippetVisible } = this.state;\n\n    return (\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          <h5 className=\"my-0\">Edit Question</h5>\n        </CardHeader>\n        <CardBody>\n          {selectedQuestion != null ? (\n            <Form>\n              <FormGroup>\n                <Row form className=\"justify-content-between\">\n                  <Label sm=\"auto\" className=\"font-weight-bold\">\n                    Question Text\n                  </Label>\n                  <Col sm=\"auto\">\n                    <InfoPopoverIcon\n                      text={\n                        <>\n                          A <strong>question</strong> does have a set of correct\n                          answers. A <strong>vote</strong> does not have any\n                          correct answers. It will just show the distribution of\n                          all given answers.\n                        </>\n                      }\n                      id=\"info-question-type\"\n                      placement=\"left\"\n                    />\n                    <ButtonGroup size=\"sm\">\n                      <Button\n                        outline\n                        color=\"primary\"\n                        active={question.type === \"question\"}\n                        onClick={() => {\n                          if (question.type !== \"question\") {\n                            onEditQuestionType(\n                              selectedQuestion,\n                              \"question\",\n                              \"vote\"\n                            );\n                          }\n                        }}\n                      >\n                        Question\n                      </Button>\n                      <Button\n                        outline\n                        color=\"primary\"\n                        active={question.type === \"vote\"}\n                        onClick={() => {\n                          if (question.type !== \"vote\") {\n                            onEditQuestionType(\n                              selectedQuestion,\n                              \"vote\",\n                              \"question\"\n                            );\n                          }\n                        }}\n                      >\n                        Vote\n                      </Button>\n                      {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                    </ButtonGroup>\n                  </Col>\n                </Row>\n                <Row form>\n                  <Col>\n                    <QuillWrapper\n                      content={question.text}\n                      onEditContent={onEditQuestionText}\n                    />\n                  </Col>\n                </Row>\n\n                {codeSnippetVisible ? (\n                  <>\n                    <Row form className=\"justify-content-between\">\n                      <Label sm=\"auto\" className=\"font-weight-bold\">\n                        Executable Code\n                      </Label>\n                      <Col sm=\"auto\">\n                        <InfoPopoverIcon\n                          text={\n                            <>\n                              A <strong>public class</strong> with a{\" \"}\n                              <strong>main method</strong> is required for the\n                              code execution to work properly.\n                            </>\n                          }\n                          id=\"info-question-code\"\n                          placement=\"left\"\n                        />\n                        <DeleteIcon\n                          style={{ cursor: \"pointer\" }}\n                          color=\"#bc754a\"\n                          onClick={() => {\n                            onEditQuestionCode(\"\");\n                            this.toggleCodeSnippetVisibility();\n                          }}\n                        />\n                      </Col>\n                    </Row>\n                    <Row form>\n                      <Col>\n                        <CodemirrorWrapper\n                          onEditContent={onEditQuestionCode}\n                          content={question.code}\n                        />\n                      </Col>\n                    </Row>\n                  </>\n                ) : (\n                  <Row form>\n                    <Col>\n                      <Button\n                        outline\n                        block\n                        color=\"primary\"\n                        onClick={() => this.toggleCodeSnippetVisibility()}\n                      >\n                        <MonitorIcon /> Add executable code snippet\n                      </Button>\n                    </Col>\n                  </Row>\n                )}\n              </FormGroup>\n\n              <FormGroup>\n                <Row form className=\"justify-content-between\">\n                  <Label sm=\"auto\">\n                    <span className=\"font-weight-bold\">Answers </span>\n                    {question.type === \"question\" && (\n                      <span className=\"small text-muted\">\n                        {question.mode === \"multi\"\n                          ? \"(Check the correct answers)\"\n                          : \"(Select the correct answer)\"}\n                      </span>\n                    )}\n                  </Label>\n\n                  <Col sm=\"auto\">\n                    <InfoPopoverIcon\n                      text={\n                        <>\n                          Choose if you want to allow users to pick just a{\" \"}\n                          <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                          answers.\n                        </>\n                      }\n                      id=\"info-question-mode\"\n                      placement=\"left\"\n                    />\n                    <ButtonGroup size=\"sm\">\n                      <Button\n                        outline\n                        color=\"primary\"\n                        onClick={() => {\n                          if (question.mode !== \"single\") {\n                            onEditQuestionMode(\n                              selectedQuestion,\n                              \"single\",\n                              \"multi\"\n                            );\n                          }\n                        }}\n                        active={question.mode === \"single\"}\n                      >\n                        Single\n                      </Button>\n                      <Button\n                        outline\n                        color=\"primary\"\n                        onClick={() => {\n                          if (question.mode !== \"multi\") {\n                            onEditQuestionMode(\n                              selectedQuestion,\n                              \"multi\",\n                              \"single\"\n                            );\n                          }\n                        }}\n                        active={question.mode === \"multi\"}\n                      >\n                        Multiple\n                      </Button>\n                      {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                    </ButtonGroup>\n                  </Col>\n                </Row>\n\n                <Row form>\n                  <Col>\n                    <DragDropContext\n                      onDragEnd={result => {\n                        const { destination, source } = result;\n                        if (!destination) {\n                          return;\n                        }\n\n                        if (\n                          destination.droppableId === source.droppableId &&\n                          destination.index === source.inde\n                        ) {\n                          return;\n                        }\n\n                        onSortAnswer(\n                          selectedQuestion,\n                          source.index,\n                          destination.index\n                        );\n                      }}\n                    >\n                      <Droppable droppableId=\"answerList\">\n                        {providedDroppable => (\n                          <div\n                            {...providedDroppable.droppableProps}\n                            ref={providedDroppable.innerRef}\n                          >\n                            {question.answers.map((answer, i) => (\n                              <Draggable\n                                draggableId={answer.id}\n                                index={i}\n                                key={answer.id}\n                              >\n                                {providedDraggable => (\n                                  <div\n                                    {...providedDraggable.draggableProps}\n                                    ref={providedDraggable.innerRef}\n                                    key={answer.id}\n                                  >\n                                    <QuestionEditorAnswerInput\n                                      isCorrectAnswer={answer.isCorrect}\n                                      dragHandleProps={\n                                        providedDraggable.dragHandleProps\n                                      }\n                                      selectedQuestion={selectedQuestion}\n                                      number={i}\n                                      mode={question.mode}\n                                      answer={answer.text}\n                                      key={answer.id}\n                                      onEditAnswerText={e =>\n                                        onEditAnswerText(\n                                          selectedQuestion,\n                                          e.target.value,\n                                          i\n                                        )\n                                      }\n                                      onSetCorrectSingleAnswer={\n                                        onSetCorrectSingleAnswer\n                                      }\n                                      onSetCorrectMultiAnswer={\n                                        onSetCorrectMultiAnswer\n                                      }\n                                      onDeleteAnswer={onDeleteAnswer}\n                                      disabled={question.type === \"vote\"}\n                                    />\n                                  </div>\n                                )}\n                              </Draggable>\n                            ))}\n                            {providedDroppable.placeholder}\n                          </div>\n                        )}\n                      </Droppable>\n                    </DragDropContext>\n                  </Col>\n                </Row>\n              </FormGroup>\n\n              <Button\n                outline\n                block\n                color=\"primary\"\n                onClick={() => onAddAnswer(selectedQuestion)}\n              >\n                <PlaylistPlusIcon /> Add answer\n              </Button>\n              <Button\n                outline\n                block\n                color=\"danger\"\n                onClick={() => onDeleteQuestion(selectedQuestion)}\n              >\n                <DeleteIcon /> Delete Question\n              </Button>\n            </Form>\n          ) : (\n            <div className=\"text-center\">\n              <div>\n                <CancelIcon size={32} color=\"#8a817c\" />\n              </div>\n              <div className=\"text-muted mt-3\">No question selected</div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nQuestionEditorContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionEditorContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile, closeDropdown } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n    if (typeof closeDropdown === \"function\") {\n      closeDropdown();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  closeDropdown: PropTypes.func\n};\n\nSingleFileInput.defaultProps = {\n  closeDropdown: null\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionEditorListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            closeDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nQuestionEditorListDropdown.propTypes = {\n  onUploadFile: PropTypes.func.isRequired,\n  onUploadDropbox: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionEditorListDropdown from \"./QuestionEditorListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionEditorList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h5 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h5>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                            style={{ width: \"22px\", height: \"22px\" }}\n                          >\n                            <DragIcon\n                              style={{\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionEditorListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button\n            color=\"light\"\n            onClick={onDownloadFile}\n            disabled={questions.length === 0}\n          >\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionEditorList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorList.defaultProps = {\n  questions: [],\n  selectedQuestion: null\n};\nexport default QuestionEditorList;\n","import Logger from \"./Logger\";\n\nconst getFormattedDate = () => {\n  const today = new Date();\n  let dd = today.getDate();\n\n  let mm = today.getMonth() + 1;\n  const yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = `0${dd}`;\n  }\n\n  if (mm < 10) {\n    mm = `0${mm}`;\n  }\n  return `${dd}-${mm}-${yyyy}`;\n};\n\nexport const downloadFile = data => {\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n    JSON.stringify(data)\n  )}`;\n  const downloadAnchorNode = document.createElement(\"a\");\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\n    \"download\",\n    `weclare-${getFormattedDate()}.json`\n  );\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n  Logger.info(\"Created and started file download\");\n};\n\nexport const saveToStorage = data => {\n  localStorage.setItem(\"weclare\", data);\n  Logger.info(\"Saved questionset to local storage\");\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\"\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  progress: \"0/0\",\n  questionIdx: 0,\n  text: \"Mock question: How is the development going?\",\n  type: \"single\",\n  mode: \"question\",\n  answers: [\n    { id: \"6FedDc\", text: \"Good\", isCorrect: true },\n    { id: \"9FbdDa\", text: \"Not Good\", isCorrect: false }\n  ]\n};\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport QuestionEditorContent from \"./QuestionEditorContent\";\nimport QuestionEditorList from \"./QuestionEditorList\";\nimport { saveToStorage, downloadFile } from \"../../shared/util/FileHelpers\";\nimport { TQuestion } from \"../../shared/types\";\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    props.loadQuestionsFromStorage();\n  }\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editCurrentQuestionText,\n      editCurrentQuestionCode,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer,\n      saveFileToStorage,\n      validateAndSaveToStorage\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionEditorList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                saveToStorage(JSON.stringify(questions));\n                downloadFile(questions);\n              }}\n              onUploadFile={saveFileToStorage}\n              onUploadDropbox={validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionEditorContent\n              key={\n                (questions[selectedQuestion] &&\n                  questions[selectedQuestion].id) ||\n                \"none\"\n              }\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editCurrentQuestionText}\n              onEditQuestionCode={editCurrentQuestionCode}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n              disabled={!questions.length > 0}\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default QuestionEditor;\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.arrayOf(TQuestion).isRequired,\n  // Questions\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editCurrentQuestionText: PropTypes.func.isRequired,\n  editCurrentQuestionCode: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  loadQuestionsFromStorage: PropTypes.func.isRequired,\n  saveFileToStorage: PropTypes.func.isRequired,\n  validateAndSaveToStorage: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired,\n  history: ReactRouterPropTypes.history.isRequired\n};\n\nQuestionEditor.defaultProps = {\n  selectedQuestion: null\n};\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single question\",\n    required: [\"id\", \"type\", \"text\", \"answers\", \"questionIdx\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      questionIdx: {\n        type: \"number\",\n        title: \"Question Index\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      code: {\n        type: \"string\",\n        title: \"Executable code for this question\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","import tv4 from \"tv4\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionSchema from \"../../shared/util/QuestionsSchema\";\nimport { saveToStorage } from \"../../shared/util/FileHelpers\";\n\n// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    dispatch({ type: ADD_QUESTION });\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport function editCurrentQuestionText(text) {\n  return (dispatch, getState) => {\n    const { selectedQuestion } = getState();\n    dispatch({\n      type: EDIT_QUESTION_TEXT,\n      payload: {\n        questionIdx: selectedQuestion,\n        text\n      }\n    });\n  };\n}\n\nexport const EDIT_QUESTION_CODE = \"EDIT_QUESTION_CODE\";\nexport function editCurrentQuestionCode(code) {\n  return (dispatch, getState) => {\n    const { selectedQuestion } = getState();\n    dispatch({\n      type: EDIT_QUESTION_CODE,\n      payload: {\n        questionIdx: selectedQuestion,\n        code\n      }\n    });\n  };\n}\n\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { questionEditor: questions } = getState();\n    // Delete first element\n    if (questionIdx === 0) {\n      // It is not the last element\n      if (questions.length > 0) {\n        dispatch(selectQuestion(0));\n        // It is the last element\n      } else {\n        dispatch(selectQuestion(null));\n      }\n    } else {\n      dispatch(selectQuestion(questionIdx - 1));\n    }\n  };\n}\n\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport const loadQuestionsFromStorage = () => dispatch => {\n  const newQuestions = localStorage.getItem(\"weclare\");\n  if (newQuestions) {\n    dispatch(loadQuestions(JSON.parse(newQuestions)));\n  }\n};\n\nexport const validateAndSaveToStorage = data => dispatch => {\n  const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n  if (valid) {\n    Logger.info(\"Questionset was successfully validated\");\n    saveToStorage(data);\n    dispatch(loadQuestionsFromStorage());\n  } else {\n    Logger.error(\"Imported file was invalid\", tv4.error);\n  }\n};\n\nexport const saveFileToStorage = file => dispatch => {\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch(validateAndSaveToStorage(reader.result));\n  };\n  reader.readAsText(file);\n};\n\nexport const SORT_QUESTION = \"SORT_QUESTION\";\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Question Editor Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SORT_ANSWER = \"SORT_ANSWER\";\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport * as questionEditorActions from \"../actions/questions\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = {\n  ...questionEditorActions,\n  ...answerActions\n};\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport java from \"highlight.js/lib/languages/java\";\nimport PropTypes from \"prop-types\";\nimport DefaultCard from \"./DefaultCard\";\nimport \"../scss/quill.scss\";\nimport Logger from \"../util/Logger\";\nimport { TQuestion, DQuestion } from \"../types\";\nimport CodemirrorWrapper from \"./CodemirrorWrapper\";\n\nclass QuestionCard extends React.Component {\n  // Convert boolean array to numerical array, e.g. [true, false, true] -> [0,2]\n  static convertSelectedAnswersArray(selectedAnswersArray) {\n    if (selectedAnswersArray) {\n      return selectedAnswersArray\n        .map((answer, i) => answer && i)\n        .filter(answer => typeof answer === \"number\");\n    }\n    return [];\n  }\n\n  constructor(props) {\n    super(props);\n    hljs.registerLanguage(\"java\", java);\n    hljs.configure({ languages: [\"java\"] });\n  }\n\n  componentDidUpdate() {\n    const block = document.querySelector(\".ql-syntax\");\n    if (block) {\n      hljs.highlightBlock(block);\n    }\n  }\n\n  render() {\n    const {\n      question,\n      selectedAnswersIdx,\n      disabled,\n      countedAnswers,\n      children,\n      toggleSelectedAnswers,\n      onSendAnswers,\n      isServer,\n      toggleDisabled,\n      highlightSolutions\n    } = this.props;\n\n    let footer;\n    if (question.mode === \"multi\" && !isServer) {\n      footer = (\n        <>\n          <p className=\"text-center text-muted\">\n            Multiple choice question: Select answers and click send.\n          </p>\n          <Button\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => {\n              const selectedAnswers = QuestionCard.convertSelectedAnswersArray(\n                selectedAnswersIdx\n              );\n              Logger.info(\"Sending multi answer \", selectedAnswers);\n              onSendAnswers(selectedAnswers);\n              toggleDisabled();\n            }}\n            block\n          >\n            Send Answers\n          </Button>\n          {children}\n        </>\n      );\n    } else {\n      footer = children;\n    }\n\n    return (\n      <DefaultCard\n        title={isServer ? \"Ask Question\" : \"Answer Question\"}\n        badge={question && question.progress}\n        footer={footer}\n      >\n        {question.text && (\n          <div\n            id=\"code-container\"\n            className=\"text-center my-5 h4\"\n            // eslint-disable-next-line\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.code && (\n          <CodemirrorWrapper content={question.code} readOnly=\"nocursor\" />\n        )}\n\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={\n                !(highlightSolutions && answer.isCorrect) &&\n                !selectedAnswersIdx[i]\n              }\n              id={i}\n              key={answer.id}\n              block\n              onClick={e => {\n                const selectedAnswer = parseInt(e.target.id, 10);\n                toggleSelectedAnswers(selectedAnswer);\n                if (question.mode === \"single\") {\n                  Logger.info(\"Sending single answer \", selectedAnswer);\n                  onSendAnswers([selectedAnswer]);\n                  toggleDisabled();\n                }\n              }}\n              color={\n                highlightSolutions && answer.isCorrect ? \"success\" : \"secondary\"\n              }\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge\n                  className=\"float-right\"\n                  style={{ lineHeight: 1.5 }}\n                  color=\"secondary\"\n                >\n                  {typeof countedAnswers[i] === \"number\" && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  question: TQuestion,\n  selectedAnswersIdx: PropTypes.arrayOf(PropTypes.bool),\n  disabled: PropTypes.bool,\n  countedAnswers: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.number),\n    PropTypes.bool\n  ]),\n  children: PropTypes.node,\n  toggleSelectedAnswers: PropTypes.func,\n  onSendAnswers: PropTypes.func,\n  isServer: PropTypes.bool,\n  toggleDisabled: PropTypes.func,\n  highlightSolutions: PropTypes.bool\n};\nQuestionCard.defaultProps = {\n  question: DQuestion,\n  selectedAnswersIdx: [],\n  disabled: false,\n  countedAnswers: [],\n  children: null,\n  toggleSelectedAnswers: () => console.log(\"Click\"),\n  onSendAnswers: () => console.log(\"Click\"),\n  isServer: false,\n  toggleDisabled: () => console.log(\"Click\"),\n  highlightSolutions: false\n};\n\nexport default QuestionCard;\n","export const isConnected = state => {\n  const {\n    server: { connections }\n  } = state;\n  return connections.length > 0;\n};\n\nexport const hasNextQuestion = state => {\n  const {\n    questionEditor: questions = [],\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return currentQuestionIdx + 1 < questions.length;\n};\n\nexport const hasPreviousQuestion = state => {\n  const {\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return !(currentQuestionIdx - 1 < 0);\n};\n","import React from \"react\";\nimport { Button, Spinner } from \"reactstrap\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipNextIcon from \"mdi-react/SkipNextIcon\";\n\nconst AskScreenContinueButton = props => {\n  const { hasNextQuestion, nextAskScreenState } = props;\n  const buttonState = {\n    // Waiting for clients, button disabled\n    0: {\n      text: (\n        <>\n          <Spinner size=\"sm\" className=\"mr-2\" /> Waiting for clients to start\n        </>\n      ),\n      color: \"primary\",\n      additionalButtonProps: {\n        outline: true,\n        disabled: true\n      }\n    },\n    // Clients connected, ready to send first question and accept answers\n    1: {\n      text: (\n        <>\n          <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start Question\n        </>\n      ),\n      color: \"primary\"\n    },\n    // Accepting answers\n    2: {\n      text: (\n        <>\n          <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop Question\n        </>\n      ),\n      color: \"primary\"\n    },\n    3: {\n      text: (\n        <>\n          <SkipNextIcon style={{ paddingBottom: \"3px\" }} /> Next Question\n        </>\n      ),\n      color: \"secondary\",\n      additionalButtonProps: {\n        disabled: !hasNextQuestion\n      }\n    }\n  };\n\n  const { currentAskScreenState } = props;\n  const currentPhaseObj = buttonState[currentAskScreenState];\n  return (\n    <Button\n      color={currentPhaseObj.color}\n      outline={currentPhaseObj.outline}\n      block\n      onClick={nextAskScreenState}\n      {...currentPhaseObj &&\n        currentPhaseObj.additionalButtonProps &&\n        currentPhaseObj.additionalButtonProps}\n    >\n      {currentPhaseObj.text}\n    </Button>\n  );\n};\n\nexport default AskScreenContinueButton;\n","import { connect } from \"react-redux\";\nimport { nextAskScreenState } from \"../actions/server\";\nimport { isConnected, hasNextQuestion } from \"../selectors/server\";\nimport AskScreenContinueButton from \"./AskScreenContinueButton\";\n\nconst mapStateToProps = state => ({\n  isConnected: isConnected(state),\n  hasNextQuestion: hasNextQuestion(state),\n  currentAskScreenState: state.server.currentAskScreenState\n});\n\nconst mapDispatchToProps = {\n  nextAskScreenState\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AskScreenContinueButton);\n","import React from \"react\";\nimport ChevronRightIcon from \"mdi-react/ChevronRightIcon\";\nimport ChevronLeftIcon from \"mdi-react/ChevronLeftIcon\";\n\nexport const ChevronLeft = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div\n      className=\"text-right align-middle\"\n      onClick={disabled ? null : onClick}\n    >\n      <ChevronLeftIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n\nexport const ChevronRight = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div className=\"text-left align-middle\" onClick={disabled ? null : onClick}>\n      <ChevronRightIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TerminalWindow extends React.Component {\n  static defaultProps = {\n    messages: [],\n    showTerminal: false\n  };\n\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.string),\n    showTerminal: PropTypes.bool\n  };\n\n  terminalRef = React.createRef();\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    this.terminalRef.current.scrollTop = this.terminalRef.current.scrollHeight;\n  };\n\n  render() {\n    const { showTerminal, messages } = this.props;\n\n    return (\n      <div\n        ref={this.terminalRef}\n        style={{ height: \"300px\", overflow: \"auto\", whiteSpace: \"pre-wrap\" }}\n        id=\"terminal\"\n        className={`border rounded text-white bg-dark p-3 my-3 ${\n          showTerminal ? \"d-block\" : \"d-none\"\n        }`}\n      >\n        {messages.map((msg, i) => (\n          <span key={i}>{msg}</span>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TerminalWindow;\n","// Server Terminal Actions\nexport const ADD_LINE = \"ADD_LINE\";\nexport function addLine(line, addNewLine = true) {\n  return {\n    type: ADD_LINE,\n    payload: {\n      line,\n      addNewLine\n    }\n  };\n}\n\nexport const RESET_TERMINAL = \"RESET_TERMINAL\";\nexport function resetTerminal() {\n  return {\n    type: RESET_TERMINAL\n  };\n}\n","import { connect } from \"react-redux\";\nimport TerminalWindow from \"./TerminalWindow\";\nimport { addLine, resetTerminal } from \"../actions/terminal\";\n\nconst mapDispatchToProps = {\n  addLine,\n  resetTerminal\n};\n\nconst mapStateToProps = state => ({\n  messages: state.terminal\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TerminalWindow);\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport CodeTagsIcon from \"mdi-react/CodeTagsIcon\";\n\nconst ExecuteCodeButton = props => {\n  const { onClick, runCurrentCode } = props;\n\n  return (\n    <Button\n      color=\"primary\"\n      outline\n      block\n      onClick={() => {\n        runCurrentCode();\n        onClick();\n      }}\n    >\n      <CodeTagsIcon /> Execute Interactive Code Snippet\n    </Button>\n  );\n};\n\nexport default ExecuteCodeButton;\n","import { addLine } from \"./terminal\";\nimport { toggleBusy } from \"./server\";\n\nconst Doppio = require(\"doppiojvm\");\nconst BrowserFS = require(\"browserfs\");\n\nconst findPublicStaticClass = source => {\n  const re = /public\\s+class\\s+(\\b[A-Za-z][A-Za-z0-9_]*\\b)/m;\n  const result = re.exec(source);\n  return result ? result[1] : null;\n};\n\nconst writeJavaSourceFileAsync = async (name, source) =>\n  new Promise((resolve, reject) => {\n    const { fs } = window;\n\n    fs.writeFile(`/tmp/${name}.java`, source, err => {\n      if (err) reject(err);\n      resolve();\n    });\n  });\n\nconst setupBrowserFs = async () => {\n  BrowserFS.install(window);\n  await new Promise((resolve, reject) => {\n    BrowserFS.configure(\n      {\n        fs: \"MountableFileSystem\",\n        options: {\n          \"/tmp\": { fs: \"InMemory\" },\n          \"/sys\": {\n            fs: \"XmlHttpRequest\",\n            options: {\n              index: `${process.env.PUBLIC_URL}/doppio/listings.json`\n            }\n          }\n        }\n      },\n      e => {\n        if (e) {\n          // An error happened!\n          reject(e);\n        }\n        // Otherwise, BrowserFS is ready-to-use!\n        window.fs = window.require(\"fs\");\n        resolve();\n      }\n    );\n  });\n};\n\n// Doppio JS Actions\nexport const RUN_CURRENT_CODE = \"RUN_CURRENT_CODE\";\nexport function runCurrentCode() {\n  return async (dispatch, getState) => {\n    const {\n      questionEditor: questions,\n      server: { currentQuestionIdx }\n    } = getState();\n\n    const currentQuestion = questions[currentQuestionIdx];\n\n    if (currentQuestion.code) {\n      dispatch(toggleBusy());\n      const classname = findPublicStaticClass(currentQuestion.code);\n      if (!classname) {\n        dispatch(addLine(\"Could not find a public class to compile.\", false));\n        return;\n      }\n      await setupBrowserFs();\n      const { process } = window;\n      await writeJavaSourceFileAsync(classname, currentQuestion.code);\n      // fs.readdir(\"/tmp\", (err, files) => {\n      //   // handling error\n      //   if (err) {\n      //     return console.log(\"Unable to scan directory: \" + err);\n      //   }\n      //   // listing all files using forEach\n      //   files.forEach(file => {\n      //     // Do whatever you want to do with the file\n      //     console.log(file);\n      //   });\n      // });\n\n      // Only attach listeners once\n      if (process.stdout.listenerCount(\"data\") === 0) {\n        process.stdout.on(\"data\", data =>\n          dispatch(addLine(data.toString(), false))\n        );\n        process.stderr.on(\"data\", data =>\n          dispatch(addLine(data.toString(), false))\n        );\n      }\n\n      dispatch(addLine(\"Loading JVM...\"));\n\n      // Instantiate Doppio JVM\n      // eslint-disable-next-line\n      new Doppio.VM.JVM(\n        {\n          doppioHomePath: \"/sys\",\n          classpath: [\".\", \"/sys/\", \"/tmp/\"]\n        },\n        (err, jvmObject) => {\n          jvmObject.runClass(\"Loader\", [classname], exitCode => {\n            if (exitCode !== 0) {\n              dispatch(addLine(\"JVM exited with an error\"));\n            }\n            dispatch(toggleBusy());\n          });\n        }\n      );\n    }\n  };\n}\n","import { connect } from \"react-redux\";\nimport ExecuteCodeButton from \"./ExecuteCodeButton\";\nimport { runCurrentCode } from \"../actions/doppio\";\n\nconst mapDispatchToProps = {\n  runCurrentCode\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ExecuteCodeButton);\n","import React from \"react\";\nimport TerminalWindowContainer from \"./TerminalWindowContainer\";\nimport ExecuteCodeButtonContainer from \"./ExecuteCodeButtonContainer\";\n\nconst CodeExecutionArea = props => {\n  const { showTerminal, onClickExecute } = props;\n\n  return (\n    <>\n      {!showTerminal && <ExecuteCodeButtonContainer onClick={onClickExecute} />}\n      <TerminalWindowContainer showTerminal={showTerminal} />\n    </>\n  );\n};\n\nexport default CodeExecutionArea;\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport CheckAllIcon from \"mdi-react/CheckAllIcon\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport AskScreenContinueButtonContainer from \"./AskScreenContinueButtonContainer\";\nimport { ChevronRight, ChevronLeft } from \"../../shared/components/Chevron\";\nimport CodeExecutionArea from \"./CodeExecutionArea\";\n\nclass AskScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      showVoteCount: false,\n      showTerminal: false,\n      highlightSolutions: false,\n      prevQuestion: props.currentQuestion\n    };\n    this.state = this.initialState;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (\n      props.currentQuestion &&\n      props.currentQuestion.text !== state.prevQuestion.text\n    ) {\n      return {\n        prevQuestion: props.currentQuestion,\n        showTerminal: false,\n        showVoteCount: false,\n        highlightSolutions: false\n      };\n    }\n    return null;\n  }\n\n  toggleShowVoteCount = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      showVoteCount: !prevState.showVoteCount\n    }));\n  };\n\n  toggleShowTerminal = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      showTerminal: !prevState.showTerminal\n    }));\n  };\n\n  toggleHighlightSolutions = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      highlightSolutions: !prevState.highlightSolutions\n    }));\n  };\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const {\n      currentQuestion,\n      countedAnswers,\n      receivedAnswersCounter,\n      hasNextQuestion,\n      hasPreviousQuestion,\n      incrementQuestionIdx,\n      decrementQuestionIdx,\n      acceptingAnswers,\n      isBusy,\n      resetTerminal\n    } = this.props;\n\n    const { showVoteCount, highlightSolutions, showTerminal } = this.state;\n\n    const questionHasCodeSnippet = currentQuestion && currentQuestion.code;\n    return (\n      <Row className=\"justify-content-center\">\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronLeft\n            disabled={!hasPreviousQuestion || acceptingAnswers || isBusy}\n            onClick={() => {\n              resetTerminal();\n              decrementQuestionIdx();\n            }}\n          />\n        </Col>\n        <QuestionCard\n          question={currentQuestion}\n          countedAnswers={showVoteCount && countedAnswers}\n          highlightSolutions={highlightSolutions}\n          isServer\n          disabled\n        >\n          <>\n            {receivedAnswersCounter && (\n              <div className=\"d-flex flex-row justify-content-between align-items-center mb-2\">\n                <div className=\"text-muted\">\n                  {receivedAnswersCounter} users have answered\n                </div>\n                <div>\n                  {currentQuestion &&\n                    currentQuestion.type &&\n                    currentQuestion.type === \"question\" && (\n                      <Button\n                        size=\"sm\"\n                        outline={!highlightSolutions}\n                        onClick={this.toggleHighlightSolutions}\n                        className=\"mr-2\"\n                      >\n                        <CheckAllIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                        {highlightSolutions ? \"Hide\" : \"Show\"} Solutions\n                      </Button>\n                    )}\n                  <Button\n                    size=\"sm\"\n                    outline={!showVoteCount}\n                    onClick={this.toggleShowVoteCount}\n                  >\n                    <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                    {showVoteCount ? \"Hide\" : \"Show\"} Results\n                  </Button>\n                </div>\n              </div>\n            )}\n            <AskScreenContinueButtonContainer />\n            {questionHasCodeSnippet && (\n              <CodeExecutionArea\n                showTerminal={showTerminal}\n                onClickExecute={this.toggleShowTerminal}\n              />\n            )}\n          </>\n        </QuestionCard>\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronRight\n            disabled={!hasNextQuestion || acceptingAnswers || isBusy}\n            onClick={() => {\n              resetTerminal();\n              incrementQuestionIdx();\n            }}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default AskScreen;\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport AskScreen from \"./AskScreen\";\nimport { getCurrentQuestion } from \"../selectors/questions\";\nimport {\n  getAnswerCountForCurrentQuestion,\n  getNumberOfUsersAnsweredString\n} from \"../selectors/answers\";\nimport { incrementQuestionIdx, decrementQuestionIdx } from \"../actions/server\";\nimport { runCurrentCode } from \"../actions/doppio\";\nimport { hasPreviousQuestion, hasNextQuestion } from \"../selectors/server\";\nimport { resetTerminal } from \"../actions/terminal\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: getCurrentQuestion(state),\n  countedAnswers: getAnswerCountForCurrentQuestion(state),\n  receivedAnswersCounter: getNumberOfUsersAnsweredString(state),\n  hasPreviousQuestion: hasPreviousQuestion(state),\n  hasNextQuestion: hasNextQuestion(state),\n  acceptingAnswers: state.server.acceptingAnswers,\n  isBusy: state.server.isBusy\n});\n\nconst mapDispatchToProps = {\n  incrementQuestionIdx,\n  decrementQuestionIdx,\n  runCurrentCode,\n  resetTerminal\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n\nexport const updateQuestionIndexes = array =>\n  array.map((element, i) => ({ ...element, questionIdx: i }));\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS,\n  TOGGLE_ACCEPTING_CONNECTIONS,\n  NEXT_ASK_SCREEN_STATE,\n  SET_ASK_SCREEN_STATE,\n  TOGGLE_BUSY\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestionIdx: 0,\n    currentAskScreenState: 0,\n    acceptingAnswers: false,\n    acceptingConnections: true,\n    isBusy: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return {\n        ...state,\n        currentQuestionIdx:\n          action.payload.questionIdx < 0 ? 0 : action.payload.questionIdx\n      };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    case TOGGLE_ACCEPTING_CONNECTIONS:\n      return { ...state, acceptingConnections: !state.acceptingConnections };\n\n    case TOGGLE_BUSY:\n      return { ...state, isBusy: !state.isBusy };\n\n    case NEXT_ASK_SCREEN_STATE:\n      return {\n        ...state,\n        currentAskScreenState: (state.currentAskScreenState + 1) % 4\n      };\n\n    case SET_ASK_SCREEN_STATE:\n      return {\n        ...state,\n        currentAskScreenState: action.payload.newState\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { ADD_LINE, RESET_TERMINAL } from \"../actions/terminal\";\n\n// Reducers\n\nexport const terminal = (state = [], action) => {\n  switch (action.type) {\n    case ADD_LINE: {\n      return action.payload.addNewLine\n        ? [...state, action.payload.line + \"\\n\"]\n        : [...state, action.payload.line];\n    }\n\n    case RESET_TERMINAL: {\n      return [];\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default terminal;\n","import { REGISTER_ANSWERS, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWERS: {\n      const { answerIdxArray, questionIdx, userId } = action.payload;\n\n      const registeredAnswers = changeInArray(state, questionIdx, question =>\n        question.map((answer, i) => {\n          if (answerIdxArray.includes(i)) {\n            return [...answer, userId];\n          }\n          return answer;\n        })\n      );\n\n      return registeredAnswers;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import {\n  SET_CONNECTION_STATUS,\n  SET_PEER,\n  SET_CONNECTION_ERROR,\n  TOGGLE_CONNECTION_BUSY,\n  CLEAR_CONNECTION_ERROR\n} from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0,\n    errorMsg: null,\n    busy: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case TOGGLE_CONNECTION_BUSY:\n      return { ...state, busy: !state.busy };\n\n    case SET_CONNECTION_ERROR:\n      return { ...state, errorMsg: action.payload.newErrorMsg };\n\n    case CLEAR_CONNECTION_ERROR:\n      return { ...state, errorMsg: null };\n\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questions\";\nimport { server } from \"./server\";\nimport { terminal } from \"./terminal\";\nimport { registeredAnswers } from \"./answers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion,\n  terminal\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  EDIT_QUESTION_CODE,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questions\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray,\n  updateQuestionIndexes\n} from \"../../shared/util/QuestionHelpers\";\n\nconst newQuestion = (idx = 0) => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  questionIdx: idx,\n  code: null,\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\n// This is the selected question in the questionEditor, don't confuse with\n// selected question in server state\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const questionsCount = state.length;\n      deepClonedState.push(newQuestion(questionsCount));\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_CODE: {\n      const { questionIdx, code } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        code\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      const reindexedArray = updateQuestionIndexes(deepClonedState);\n\n      return reindexedArray;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport ConnectFormServerContainer from \"./ConnectFormServerContainer\";\nimport QuestionEditorContainer from \"./QuestionEditorContainer\";\nimport AskScreenContainer from \"./AskScreenContainer\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/server/create\"\n              component={ConnectFormServerContainer}\n            />\n            <Route exact path=\"/server/ask\" component={AskScreenContainer} />\n            <Route\n              exact\n              path=\"/server/editor\"\n              component={QuestionEditorContainer}\n            />\n            <Route\n              path=\"/server\"\n              render={() => <Redirect to=\"/server/editor\" />}\n            />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","import Logger from \"../../shared/util/Logger\";\nimport {\n  setPeer,\n  setConnectionStatus,\n  setConnectionError,\n  toggleConnectionBusy\n} from \"../../shared/actions/connection\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\n// Client Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\n// This is probably unnecessary b/c PeerJS keeps its own connection object, however API docs say, one should not rely on the PeerJS Object\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n\nexport function sendAnswers(answerIdxArray) {\n  return (dispatch, getState) => {\n    const {\n      client: { connection = null, currentQuestion = null }\n    } = getState();\n\n    if (\n      connection &&\n      currentQuestion &&\n      typeof answerIdxArray !== \"undefined\"\n    ) {\n      const msg = {\n        type: \"answer\",\n        payload: {\n          questionIdx: currentQuestion.questionIdx,\n          answerIdxArray,\n          userId: connection.provider.id\n        }\n      };\n      connection.send(msg);\n    }\n  };\n}\n\nexport function connectToServer() {\n  return async (dispatch, getState) => {\n    const {\n      client: { remoteServerId = null }\n    } = getState();\n\n    const peer = createPeer();\n    peer.on(\"error\", err => {\n      switch (err.type) {\n        case \"peer-unavailable\": {\n          dispatch(setConnectionError(\"This ID does not exist.\"));\n          dispatch(toggleConnectionBusy());\n          break;\n        }\n        default: {\n          console.log(\"Error Type: \", err.type);\n        }\n      }\n      dispatch(setConnectionStatus(3));\n    });\n\n    const dataHandler = data => {\n      const dataObj = JSON.parse(data);\n      const { type, payload } = dataObj;\n      Logger.info(\"Received Data: \", dataObj);\n      switch (type) {\n        case \"question\":\n          dispatch(setCurrentQuestion(payload));\n          break;\n\n        default:\n          Logger.error(\"ERROR: Client Data Handler Default Case\");\n      }\n    };\n\n    async function openAsync(connection) {\n      return new Promise(resolve => {\n        connection.on(\"open\", () => {\n          Logger.info(`Successfully connected to server ${connection.peer}`);\n          connection.on(\"data\", data => dataHandler(data));\n          resolve();\n        });\n      });\n    }\n\n    dispatch(setPeer(peer));\n\n    const connection = peer.connect(\n      remoteServerId,\n      { reliable: false }\n    );\n    dispatch(addConnection(connection));\n    dispatch(setConnectionStatus(1));\n    await openAsync(connection);\n    dispatch(setConnectionStatus(2));\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    currentQuestion: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\n\nimport { setRemoteServerId, connectToServer } from \"../actions/client\";\nimport {\n  toggleConnectionBusy,\n  clearConnectionError\n} from \"../../shared/actions/connection\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: () => dispatch(connectToServer()),\n  onToggleConnectionBusy: () => dispatch(toggleConnectionBusy()),\n  onClearConnectionError: () => dispatch(clearConnectionError())\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId,\n  connectionStatus: state.connection.status,\n  connectionError: state.connection.errorMsg,\n  connectionBusy: state.connection.busy\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\",\n  busyText: \"Connecting...\",\n  validationError:\n    \"Must start and end with alphanumeric characters. '-','_' and ' ' allowed in between.\",\n  isServer: false\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Spinner } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, text } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex flex-column justify-content-center\">\n          <div style={{ textAlign: \"center\" }}>\n            <Spinner size=\"lg\" />\n          </div>\n          {text && (\n            <div\n              style={{\n                textAlign: \"center\"\n              }}\n              className=\"mt-4 text-muted\"\n            >\n              {text}\n            </div>\n          )}\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","const isConnected = state => {\n  const {\n    client: { connection }\n  } = state;\n  return connection && connection.open;\n};\n\nexport default isConnected;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\nimport { TQuestion, DQuestion } from \"../../shared/types\";\nimport { sendAnswers } from \"../actions/client\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport isConnected from \"../selectors/client\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  isConnected: isConnected(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSendAnswers: answerIdxArray => dispatch(sendAnswers(answerIdxArray))\n});\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswersIdx: []\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n      this.initSelectedAnswers(currentQuestion.answers.length);\n    }\n  }\n\n  toggleSelectedAnswers = answerIdx => {\n    this.setState(prevState => {\n      const { selectedAnswersIdx } = prevState;\n      return {\n        ...prevState,\n        selectedAnswersIdx: changeInArray(\n          selectedAnswersIdx,\n          answerIdx,\n          e => !e\n        )\n      };\n    });\n  };\n\n  toggleDisabled = () => {\n    this.setState(prevState => ({\n      disabled: !prevState.disabled\n    }));\n  };\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  initSelectedAnswers(answerCount) {\n    this.setState({ selectedAnswersIdx: Array(answerCount).fill(false) });\n  }\n\n  render() {\n    const { currentQuestion, onSendAnswers, isConnected } = this.props;\n    const { disabled, selectedAnswersIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    const commonProps = {\n      question: currentQuestion,\n      disabled,\n      selectedAnswersIdx,\n      toggleSelectedAnswers: this.toggleSelectedAnswers,\n      toggleDisabled: this.toggleDisabled,\n      onSendAnswers\n    };\n\n    return (\n      <Row className=\"justify-content-center\">\n        {isConnected ? (\n          hasQuestion ? (\n            <QuestionCard {...commonProps} />\n          ) : (\n            <SpinnerCard\n              title=\"Waiting For Question From Server\"\n              text=\"You're connected to the server, but the Quiz Session has not been started yet.\"\n            />\n          )\n        ) : (\n          <SpinnerCard\n            title=\"Connecting to Server\"\n            text=\"Trying to connect to the server.\"\n          />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectFormClientContainer from \"./ConnectFormClientContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectFormClientContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n            <Route\n              path=\"/client\"\n              render={() => <Redirect to=\"/client/connect\" />}\n            />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport raw from \"raw.macro\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow-none\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>\n              <div\n                className=\"markdown-body\"\n                style={{\n                  fontFamily: \"IBM Plex Sans\"\n                }}\n                // eslint-disable-next-line\n                dangerouslySetInnerHTML={{\n                  __html: snarkdown(raw(\"../public/README.MD\"))\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h4 className=\"my-0\">{header}</h4>\n      </CardHeader>\n      <CardBody className=\"d-flex flex-column\">\n        <CardText>\n          <span\n            role=\"img\"\n            aria-label=\"Student\"\n            className=\"d-block\"\n            style={{ fontSize: \"4em\" }}\n          >\n            {emoji}\n          </span>\n\n          <span>{text}</span>\n        </CardText>\n        {children}\n      </CardBody>\n    </Card>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Button, Container, CardDeck } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-5 mx-auto text-center mt-5\">\n      <h1 className=\"display-3 font-weight-bold text-dark\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <CardDeck className=\"text-center\">\n      <SelectBox\n        header=\"For Students\"\n        text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n        emoji=\"👩‍🎓\"\n      >\n        <Button\n          tag={Link}\n          to=\"/client/connect\"\n          size=\"lg\"\n          block\n          outline\n          color=\"primary\"\n          className=\"align-self-end mt-auto\"\n        >\n          Join Quiz Session\n        </Button>\n      </SelectBox>\n\n      <SelectBox\n        header=\"For Instructors\"\n        text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n        emoji=\"👩‍🏫\"\n      >\n        <>\n          <div className=\"text-danger mb-3\">\n            <small className=\"text-muted\">\n              Attention: This app will load ~60 MB of Java Runtime files.\n            </small>\n          </div>\n          <Button\n            tag={Link}\n            to=\"/server/editor\"\n            size=\"lg\"\n            block\n            outline\n            color=\"primary\"\n            className=\"align-self-end mt-auto\"\n          >\n            Create Quiz Session\n          </Button>\n        </>\n      </SelectBox>\n    </CardDeck>\n\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 96;"],"sourceRoot":""}