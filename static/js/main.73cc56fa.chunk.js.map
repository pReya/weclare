{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/util/Logger.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","server/actions/server.js","server/actions/answers.js","shared/actions/connection.js","server/components/CreatorContainer.js","shared/components/InfoPopoverIcon.js","server/components/EditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionList.js","shared/util/questionsSchema.js","server/actions/questionEditor.js","server/components/QuestionEditor.js","shared/types.js","shared/components/SpinnerCard.js","server/components/WaitScreen.js","shared/components/QuestionCard.js","server/components/AskScreen.js","shared/util/Helpers.js","server/reducers/server.js","server/reducers/registeredAnswers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questionEditor.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","ModalFooter","Button","color","queryCommandSupported","ClipboardTextIcon_default","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","Nav","NavItem","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","pill","CardBody","CardText","CardFooter","ConnectForm","log","match","onChangeServerId","onClickConnect","serverId","buttonText","history","params","components_DefaultCard","Form","FormGroup","row","id","type","onChange","e","target","push","ADD_CONNECTION","SET_SERVER_ID","REGISTER_ANSWER","INIT_ANSWERS","registerAnswer","questionIdx","answerIdx","userId","dispatch","getState","acceptingAnswers","payload","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","SET_PEER","SET_CONNECTION_STATUS","setServerStatus","newStatus","setPeer","createPeer","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","on","info","dataHandler","addConnection","err","error","staticProps","withRouter","newServerId","newId","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","EditorAnswerInput","isHovered","_this2","answer","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","EditorAnswerInput_RadioInput","onSetCorrectAnswer","EditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_EditorAnswerInput","isCorrect","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionList","questions","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","onUploadFile","onUploadDropbox","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","UncontrolledButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","DownloadIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_MODE","EDIT_QUESTION_TYPE","DELETE_QUESTION","LOAD_QUESTIONS","SORT_QUESTION","selectQuestion","addQuestion","editQuestionText","editQuestionMode","newMode","oldMode","editQuestionType","newType","oldType","deleteQuestion","loadQuestions","newQuestions","sortQuestion","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","setCorrectSingleAnswer","setCorrectMultiAnswer","addAnswer","editAnswerText","deleteAnswer","sortAnswer","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","objectSpread","questionEditorActions","answerActions","QuestionEditor","loadQuestionsFromStorage","localStorage","getItem","JSON","parse","downloadFile","dataStr","encodeURIComponent","stringify","downloadAnchorNode","setAttribute","getFormattedDate","remove","saveToStorage","setItem","validateAndSaveToStorage","tv4","validate","QuestionSchema","saveFileToStorage","reader","FileReader","onload","readAsText","components_QuestionList","components_QuestionContent","xs","ContentSaveIcon_default","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","DQuestion","PropTypes","string","shape","progress","arrayOf","object","selectedAnswerIdx","SpinnerCard","Helmet","react_md_spinner_lib_default","color1","color2","color3","color4","hasClients","pluralizeClient","pluralizeVerb","components_SpinnerCard","QuestionCard","onClickAnswer","countedAnswers","dangerouslySetInnerHTML","__html","selectedAnswer","AskScreen","buttonPhase","registeredAnswers","currentQuestionIdx","setCurrentQuestionIdx","toggleAcceptingAnswers","currentQuestionIdxNoNull","nextQuestionIdx","formattedQuestion","questionWithoutAnswer","esm_extends","currentQuestionIdxString","String","questionsCount","getFormattedQuestion","components_QuestionCard","forEach","send","sendQuestion","countAnswers","PlayIcon_default","PauseIcon_default","FormatListNumberedIcon_default","SkipForwardIcon_default","currentQuestion","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","undefined","toConsumableArray","q","combineReducers","deepClonedState","nanoid","_action$payload","_action$payload2","firstAnswerFound","_action$payload3","_action$payload4","filter","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","CreatorContainer","WaitScreen","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","newQuestion","clickConnect","timeoutId","heartbeat","setTimeout","socket","_wsOpen","makePeerHeartbeater","reliable","AnswerScreen","initialState","prevProps","resetState","hasQuestion","provider","sendAnswer","clientStore","mainClientReducer","Client","ClientHeaderContainer","Switch","ConnectorContainer","About","snarkdown","fontFamily","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73cc56fa.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    size={400}\n                  />\n                </ModalBody>\n                <ModalFooter>\n                  <Button color=\"secondary\" onClick={this.toggleModal}>\n                    Close\n                  </Button>\n                </ModalFooter>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    `${window.location.origin}/client/connect/${ownServerId}`\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between bg-white\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport { Form, FormGroup, Button, Input, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nconst ConnectForm = props => {\n  console.log(props);\n  const {\n    match,\n    onChangeServerId,\n    onClickConnect,\n    serverId,\n    title,\n    text,\n    buttonText,\n    history,\n    location\n  } = props;\n\n  if (match && match.params && match.params.serverId) {\n    onChangeServerId(match.params.serverId);\n  }\n\n  return (\n    <DefaultCard title={title} text={text}>\n      <Form>\n        <FormGroup row className=\"form-row\">\n          <Col md={6}>\n            <Input\n              id=\"serverId\"\n              type=\"text\"\n              value={serverId}\n              onChange={e => onChangeServerId(e.target.value)}\n            />\n          </Col>\n          <Col md={3}>\n            <Button\n              type=\"button\"\n              id=\"connect\"\n              className=\"btn-block\"\n              onClick={() => {\n                onClickConnect(serverId);\n                if (history && location) {\n                  history.push(location);\n                }\n              }}\n            >\n              {buttonText}\n            </Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    </DefaultCard>\n  );\n};\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired\n};\n\nConnectForm.defaultProps = {\n  buttonText: \"Connect\"\n};\n\nexport default ConnectForm;\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: \"SET_CURRENT_QUESTION_IDX\",\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function toggleAcceptingAnswers() {\n  return {\n    type: \"TOGGLE_ACCEPTING_ANSWERS\"\n  };\n}\n","// Server Actions\nexport const REGISTER_ANSWER = \"REGISTER_ANSWER\";\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\n\nexport function registerAnswer(questionIdx, answerIdx, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWER,\n        payload: {\n          questionIdx,\n          answerIdx,\n          userId\n        }\n      });\n    } else {\n      console.log(\"TEST\");\n    }\n  };\n}\n\n// const initAnswerState = () => {\n//   return {\n//     type: INIT_ANSWERS,\n//     payload: {\n//       emptyAnswerArray\n//     }\n//   };\n// };\n\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setServerStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport Logger from \"../../shared/util/Logger\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { addConnection, setServerId } from \"../actions/server\";\nimport { registerAnswer } from \"../actions/answers\";\nimport { setPeer, setServerStatus } from \"../../shared/actions/connection\";\n\nconst dataHandler = (data, dispatch) => {\n  const { type, payload } = data;\n  Logger.info(\"Received Data: \", data);\n  switch (type) {\n    case \"answer\":\n      console.log(\"Received answer\", payload);\n      dispatch(\n        registerAnswer(payload.questionIdx, payload.answerIdx, payload.userId)\n      );\n      break;\n    default:\n      console.log(\"Default\");\n  }\n};\n\nconst createPeer = (ownServerId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n  const peer = new Peer(ownServerId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n  dispatch(setPeer(peer));\n\n  peer.on(\"open\", id => {\n    Logger.info(\"Successfully created Peer with id \", id);\n    dispatch(setServerStatus(1));\n  });\n\n  peer.on(\"connection\", connection => {\n    Logger.info(\"New client connected with id: \", connection.peer);\n    connection.on(\"data\", data => dataHandler(data, dispatch));\n    dispatch(setServerStatus(2));\n    dispatch(addConnection(connection));\n  });\n\n  peer.on(\"error\", err => {\n    Logger.error(\"FEHLER: \", err);\n    dispatch(setServerStatus(3));\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: ownServerId => {\n    createPeer(ownServerId, dispatch);\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Create a New Server Id\",\n  text:\n    \"Please define your individual Server Id that you can give to participants.\",\n  buttonText: \"Create\",\n  location: \"/server/wait\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={18}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass EditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default EditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport EditorAnswerInput from \"./EditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">Question Text</Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  Answers{\" \"}\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <EditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon style={{ marginBottom: \"3px\" }} />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color=\"light\" caret>\n              <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem>\n                <SingleFileInput onSelectFile={file => onUploadFile(file)}>\n                  <div>\n                    <FileUploadIcon className=\"text-secondary\" /> File\n                  </div>\n                </SingleFileInput>\n              </DropdownItem>\n              <DropdownItem>\n                <DropboxChooser\n                  appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n                  linkType=\"direct\"\n                  success={e => {\n                    fetch(e[0].link)\n                      .then(response => response.text())\n                      .then(text => onUploadDropbox(text));\n                  }}\n                >\n                  <DropboxIcon className=\"text-secondary\" /> Dropbox\n                </DropboxChooser>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const SORT_QUESTION = \"SORT_QUESTION\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { selectedQuestion } = getState();\n    if (selectedQuestion <= 0) {\n      dispatch(selectQuestion(0));\n    } else {\n      dispatch(selectQuestion(selectedQuestion - 1));\n    }\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport const SORT_ANSWER = \"SORT_ANSWER\";\n\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport tv4 from \"tv4\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport QuestionSchema from \"../../shared/util/questionsSchema\";\nimport * as questionEditorActions from \"../actions/questionEditor\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = { ...questionEditorActions, ...answerActions };\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadQuestionsFromStorage();\n  }\n\n  static getFormattedDate = () => {\n    const today = new Date();\n    let dd = today.getDate();\n\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    return `${dd}-${mm}-${yyyy}`;\n  };\n\n  loadQuestionsFromStorage = () => {\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  };\n\n  downloadFile = data => {\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\n      \"download\",\n      `weclare-${QuestionEditor.getFormattedDate()}.json`\n    );\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    Logger.info(\"Created and started file download\");\n  };\n\n  saveToStorage = data => {\n    localStorage.setItem(\"weclare\", data);\n    Logger.info(\"Saved questionset to local storage\");\n  };\n\n  validateAndSaveToStorage = data => {\n    const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n    if (valid) {\n      Logger.info(\"Questionset was successfully validated\");\n      this.saveToStorage(data);\n      this.loadQuestionsFromStorage();\n    } else {\n      Logger.error(\"Imported file was invalid\", tv4.error);\n    }\n  };\n\n  saveFileToStorage = file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.validateAndSaveToStorage(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                this.saveToStorage(JSON.stringify(questions));\n                this.downloadFile(questions);\n              }}\n              onUploadFile={this.saveFileToStorage}\n              onUploadDropbox={this.validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                this.saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.array.isRequired,\n  // Questions\n  loadQuestions: PropTypes.func.isRequired,\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    text: null,\n    type: null,\n    answers: null\n  },\n  disabled: false,\n  selectedAnswerIdx: null\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex justify-content-center\">\n          <MDSpinner\n            color1=\"#8a817c\"\n            color2=\"#f44336\"\n            color3=\"#dc9125\"\n            color4=\"#5fa15d\"\n            size={size}\n          />\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Row } from \"reactstrap\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\n\nfunction WaitScreen(props) {\n  const { connections, history } = props;\n  const hasClients = connections.length > 0;\n  const pluralizeClient = connections.length === 1 ? \"client\" : \"clients\";\n  const pluralizeVerb = connections.length === 1 ? \"is\" : \"are\";\n\n  return (\n    <Row className=\"justify-content-center\">\n      {hasClients ? (\n        <DefaultCard\n          title=\"Start the quiz\"\n          text={`Currently there ${pluralizeVerb} ${\n            connections.length\n          } ${pluralizeClient} connected. You can choose to wait for more participants or just go ahead and start the quiz.`}\n        >\n          <Button\n            color=\"secondary\"\n            block\n            onClick={() => {\n              history.push(\"/server/ask\");\n            }}\n          >\n            Start Quiz\n          </Button>\n        </DefaultCard>\n      ) : (\n        <SpinnerCard title=\"Waiting for participants\" />\n      )}\n    </Row>\n  );\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections\n});\n\nexport default connect(mapStateToProps)(withRouter(WaitScreen));\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TQuestion, DQuestion } from \"../types\";\n\nconst QuestionCard = props => {\n  const {\n    question,\n    onClickAnswer,\n    countedAnswers,\n    disabled,\n    selectedAnswerIdx\n  } = props;\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <DefaultCard title=\"Answer question\" badge={question.progress} {...props}>\n        {question.text && (\n          <div\n            className=\"text-center mb-4 h4\"\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={selectedAnswerIdx !== i}\n              id={i}\n              key={i}\n              block\n              onClick={\n                onClickAnswer\n                  ? e => {\n                      const selectedAnswer = parseInt(e.target.id, 10);\n                      onClickAnswer(selectedAnswer);\n                    }\n                  : null\n              }\n              color=\"secondary\"\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge className=\"float-right\" color=\"secondary\">\n                  {countedAnswers[i] !== 0 && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n} from \"../actions/server\";\n\nconst getFormattedQuestion = (questions, currentQuestionIdx) => {\n  if (questions && questions[currentQuestionIdx]) {\n    const question = questions[currentQuestionIdx];\n\n    const { ...questionWithoutAnswer } = question;\n    const currentQuestionIdxString = String(currentQuestionIdx + 1);\n    const questionsCount = Object.keys(questions).length;\n    return {\n      question: {\n        ...questionWithoutAnswer,\n        questionIdx: currentQuestionIdx,\n        progress: `${currentQuestionIdxString}/${questionsCount}`\n      }\n    };\n  }\n  return null;\n};\n\nconst sendQuestion = (formattedQuestion, connections) => {\n  if (connections.length > 0 && formattedQuestion) {\n    connections.forEach(connection =>\n      connection.send(JSON.stringify(formattedQuestion))\n    );\n  } else {\n    console.error(\"Can't send question to clients\");\n  }\n};\n\nclass AskScreen extends React.Component {\n  state = {\n    buttonPhase: 0,\n    countedAnswers: null\n  };\n\n  countAnswers(registeredAnswers, questionIdx) {\n    const countedAnswers = registeredAnswers[questionIdx].map(\n      answer => answer.length\n    );\n    this.setState(prevState => ({ ...prevState, countedAnswers }));\n  }\n\n  render() {\n    const {\n      connections,\n      questions,\n      currentQuestionIdx,\n      setCurrentQuestionIdx,\n      toggleAcceptingAnswers,\n      history,\n      status,\n      registeredAnswers\n    } = this.props;\n    const { buttonPhase, countedAnswers } = this.state;\n    const hasClients = connections.length > 0;\n    const currentQuestionIdxNoNull = currentQuestionIdx\n      ? currentQuestionIdx\n      : 0;\n    const nextQuestionIdx = currentQuestionIdxNoNull + 1;\n    const formattedQuestion = getFormattedQuestion(\n      questions,\n      currentQuestionIdxNoNull\n    );\n    return (\n      <Row className=\"justify-content-center\">\n        {hasClients ? (\n          <QuestionCard\n            question={formattedQuestion.question}\n            countedAnswers={countedAnswers}\n            disabled\n            footer={\n              hasClients && (\n                <Button\n                  color=\"secondary\"\n                  block\n                  onClick={() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        sendQuestion(formattedQuestion, connections);\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 1\n                        });\n                        break;\n                      case 1:\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 2\n                        });\n                        break;\n                      case 2:\n                        // Show voting results\n                        this.countAnswers(\n                          registeredAnswers,\n                          currentQuestionIdxNoNull\n                        );\n                        this.setState({\n                          buttonPhase: 3\n                        });\n                        break;\n                      case 3:\n                        setCurrentQuestionIdx(nextQuestionIdx);\n                        this.setState({\n                          buttonPhase: 0\n                        });\n                        break;\n                      default:\n                    }\n                  }}\n                >\n                  {(() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        return (\n                          <>\n                            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start\n                            question\n                          </>\n                        );\n                      case 1:\n                        return (\n                          <>\n                            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop\n                            Question\n                          </>\n                        );\n                      case 2:\n                        return (\n                          <>\n                            <FormatListNumberedIcon\n                              style={{ paddingBottom: \"3px\" }}\n                            />{\" \"}\n                            Show Results\n                          </>\n                        );\n                      case 3:\n                        return (\n                          <>\n                            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                            Next Question\n                          </>\n                        );\n                      default:\n                        return <></>;\n                    }\n                  })()}\n                </Button>\n              )\n            }\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for participants\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections,\n  questions: state.questionEditor,\n  currentQuestionIdx: state.server.currentQuestion,\n  registeredAnswers: state.registeredAnswers\n});\n\nconst mapDispatchToProps = {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestion: null,\n    acceptingAnswers: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestion: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWER, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/Helpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWER: {\n      console.log(\"Reducer\", action.payload);\n      return changeInArray(state, action.payload.questionIdx, q =>\n        changeInArray(q, action.payload.answerIdx, a => {\n          a.push(action.payload.userId);\n          return a;\n        })\n      );\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questionEditor\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./registeredAnswers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questionEditor\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray\n} from \"../../shared/util/Helpers\";\n\nconst newQuestion = () => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState.push(newQuestion());\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      console.log(\"Mode reducer: \", action.payload);\n      const { questionIdx, newMode, oldMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      console.log(\"Type reducer: \", action.payload);\n      const { questionIdx, newType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      return deepClonedState;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport CreatorContainer from \"./CreatorContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport WaitScreen from \"./WaitScreen\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/server/create\" component={CreatorContainer} />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/wait\" component={WaitScreen} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport Logger from \"../../shared/util/Logger\";\nimport { setServerStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\n// Source: https://github.com/peers/peerjs/issues/227#issue-39009356\nconst makePeerHeartbeater = peer => {\n  let timeoutId = 0;\n  function heartbeat() {\n    timeoutId = setTimeout(heartbeat, 20000);\n    // eslint-disable-next-line\n    if (peer.socket._wsOpen()) {\n      peer.socket.send({ type: \"HEARTBEAT\" });\n      Logger.info(\"Sent heartbeat\");\n    }\n  }\n  // Start\n  heartbeat();\n  // return\n  return {\n    start() {\n      if (timeoutId === 0) {\n        heartbeat();\n      }\n    },\n    stop() {\n      clearTimeout(timeoutId);\n      timeoutId = 0;\n    }\n  };\n};\n\nconst clickConnect = (serverId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  const peer = new Peer({\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n\n  const heartbeater = makePeerHeartbeater(peer);\n\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setServerStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: false }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setServerStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setServerStatus(2));\n    connection.on(\"data\", data => {\n      const msg = JSON.parse(data);\n      console.log(\"Received data: \", msg);\n      dispatch(setCurrentQuestion(msg.question));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\n\nimport { TQuestion, DQuestion } from \"../../shared/types\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  connection: state.client.connection\n});\n\nconst sendAnswer = (connection, answerIdx, questionIdx) => {\n  if (connection) {\n    connection.send({\n      type: \"answer\",\n      payload: {\n        questionIdx,\n        answerIdx,\n        userId: connection.provider.id\n      }\n    });\n  }\n};\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswerIdx: null\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n    }\n  }\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { currentQuestion, connection } = this.props;\n    const { disabled, selectedAnswerIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard\n            question={currentQuestion}\n            disabled={disabled}\n            selectedAnswerIdx={selectedAnswerIdx}\n            onClickAnswer={answerIdx => {\n              console.log(\"Sending back answer \", answerIdx, currentQuestion);\n              sendAnswer(connection, answerIdx, currentQuestion.questionIdx);\n              this.setState(\n                {\n                  disabled: true,\n                  selectedAnswerIdx: answerIdx\n                },\n                () => console.log(\"New state\", this.state)\n              );\n            }}\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for question\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectorContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/README.MD`)\n      .then(response => response.text())\n      .then(text => snarkdown(text))\n      .then(data => this.setState({ data }));\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <Header />\n        <Container>\n          <Row>\n            <Col md=\"12\">\n              <Card className=\"shadow\">\n                <CardHeader>\n                  <h6 className=\"my-0\">About</h6>\n                </CardHeader>\n                <CardBody>\n                  <div\n                    className=\"markdown-body\"\n                    style={{\n                      fontFamily: \"IBM Plex Sans\"\n                    }}\n                    dangerouslySetInnerHTML={{ __html: data }}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Footer />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}