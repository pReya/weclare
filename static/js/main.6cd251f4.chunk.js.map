{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/util/Logger.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","server/actions/server.js","server/actions/answers.js","shared/actions/connection.js","server/components/CreatorContainer.js","shared/components/InfoPopoverIcon.js","server/components/EditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionListDropdown.js","server/components/QuestionList.js","shared/util/questionsSchema.js","server/actions/questionEditor.js","server/components/QuestionEditor.js","shared/types.js","shared/components/SpinnerCard.js","server/components/WaitScreen.js","shared/components/QuestionCard.js","server/components/AskScreen.js","shared/util/Helpers.js","server/reducers/server.js","server/reducers/registeredAnswers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questionEditor.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","Nav","NavItem","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","log","match","onChangeServerId","onClickConnect","serverId","buttonText","history","params","components_DefaultCard","Form","FormGroup","row","id","type","onChange","e","target","Button","push","ADD_CONNECTION","SET_SERVER_ID","REGISTER_ANSWER","INIT_ANSWERS","registerAnswer","questionIdx","answerIdx","userId","dispatch","getState","acceptingAnswers","payload","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","SET_PEER","SET_CONNECTION_STATUS","setServerStatus","newStatus","setPeer","createPeer","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","on","info","dataHandler","addConnection","err","error","staticProps","withRouter","newServerId","newId","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","EditorAnswerInput","isHovered","_this2","answer","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","EditorAnswerInput_RadioInput","onSetCorrectAnswer","EditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_EditorAnswerInput","isCorrect","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","preventDefault","fileInput","current","files","createRef","onCloseDropdown","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionList","questions","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionListDropdown","DownloadIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_MODE","EDIT_QUESTION_TYPE","DELETE_QUESTION","LOAD_QUESTIONS","SORT_QUESTION","selectQuestion","addQuestion","editQuestionText","editQuestionMode","newMode","oldMode","editQuestionType","newType","oldType","deleteQuestion","loadQuestions","newQuestions","sortQuestion","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","setCorrectSingleAnswer","setCorrectMultiAnswer","addAnswer","editAnswerText","deleteAnswer","sortAnswer","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","objectSpread","questionEditorActions","answerActions","QuestionEditor","loadQuestionsFromStorage","localStorage","getItem","JSON","parse","downloadFile","dataStr","encodeURIComponent","stringify","downloadAnchorNode","setAttribute","getFormattedDate","remove","saveToStorage","setItem","validateAndSaveToStorage","tv4","validate","QuestionSchema","saveFileToStorage","reader","FileReader","onload","readAsText","components_QuestionList","components_QuestionContent","xs","ContentSaveIcon_default","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","DQuestion","PropTypes","string","shape","progress","arrayOf","object","selectedAnswerIdx","SpinnerCard","Helmet","react_md_spinner_lib_default","color1","color2","color3","color4","hasClients","pluralizeClient","pluralizeVerb","components_SpinnerCard","QuestionCard","onClickAnswer","countedAnswers","dangerouslySetInnerHTML","__html","selectedAnswer","AskScreen","buttonPhase","registeredAnswers","currentQuestionIdx","setCurrentQuestionIdx","toggleAcceptingAnswers","currentQuestionIdxNoNull","nextQuestionIdx","formattedQuestion","questionWithoutAnswer","esm_extends","currentQuestionIdxString","String","questionsCount","getFormattedQuestion","components_QuestionCard","forEach","send","sendQuestion","countAnswers","PlayIcon_default","PauseIcon_default","FormatListNumberedIcon_default","SkipForwardIcon_default","currentQuestion","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","undefined","toConsumableArray","q","combineReducers","deepClonedState","nanoid","_action$payload","_action$payload2","firstAnswerFound","_action$payload3","_action$payload4","filter","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","CreatorContainer","WaitScreen","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","newQuestion","clickConnect","timeoutId","heartbeat","setTimeout","socket","_wsOpen","makePeerHeartbeater","reliable","AnswerScreen","initialState","prevProps","resetState","hasQuestion","provider","sendAnswer","clientStore","mainClientReducer","Client","ClientHeaderContainer","Switch","ConnectorContainer","About","snarkdown","fontFamily","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cd251f4.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    `${window.location.origin}/client/connect/${ownServerId}`\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between bg-white\"\n      >\n        <Container>\n          <NavbarBrand href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport { Form, FormGroup, Button, Input, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nconst ConnectForm = props => {\n  console.log(props);\n  const {\n    match,\n    onChangeServerId,\n    onClickConnect,\n    serverId,\n    title,\n    text,\n    buttonText,\n    history,\n    location\n  } = props;\n\n  if (match && match.params && match.params.serverId) {\n    onChangeServerId(match.params.serverId);\n  }\n\n  return (\n    <DefaultCard title={title} text={text}>\n      <Form>\n        <FormGroup row className=\"form-row\">\n          <Col md={6}>\n            <Input\n              id=\"serverId\"\n              type=\"text\"\n              value={serverId}\n              onChange={e => onChangeServerId(e.target.value)}\n            />\n          </Col>\n          <Col md={3}>\n            <Button\n              type=\"button\"\n              id=\"connect\"\n              className=\"btn-block\"\n              onClick={() => {\n                onClickConnect(serverId);\n                if (history && location) {\n                  history.push(location);\n                }\n              }}\n            >\n              {buttonText}\n            </Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    </DefaultCard>\n  );\n};\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired\n};\n\nConnectForm.defaultProps = {\n  buttonText: \"Connect\"\n};\n\nexport default ConnectForm;\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: \"SET_CURRENT_QUESTION_IDX\",\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function toggleAcceptingAnswers() {\n  return {\n    type: \"TOGGLE_ACCEPTING_ANSWERS\"\n  };\n}\n","// Server Actions\nexport const REGISTER_ANSWER = \"REGISTER_ANSWER\";\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\n\nexport function registerAnswer(questionIdx, answerIdx, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWER,\n        payload: {\n          questionIdx,\n          answerIdx,\n          userId\n        }\n      });\n    } else {\n      console.log(\"TEST\");\n    }\n  };\n}\n\n// const initAnswerState = () => {\n//   return {\n//     type: INIT_ANSWERS,\n//     payload: {\n//       emptyAnswerArray\n//     }\n//   };\n// };\n\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setServerStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport Logger from \"../../shared/util/Logger\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { addConnection, setServerId } from \"../actions/server\";\nimport { registerAnswer } from \"../actions/answers\";\nimport { setPeer, setServerStatus } from \"../../shared/actions/connection\";\n\nconst dataHandler = (data, dispatch) => {\n  const { type, payload } = data;\n  Logger.info(\"Received Data: \", data);\n  switch (type) {\n    case \"answer\":\n      console.log(\"Received answer\", payload);\n      dispatch(\n        registerAnswer(payload.questionIdx, payload.answerIdx, payload.userId)\n      );\n      break;\n    default:\n      console.log(\"Default\");\n  }\n};\n\nconst createPeer = (ownServerId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n  const peer = new Peer(ownServerId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n  dispatch(setPeer(peer));\n\n  peer.on(\"open\", id => {\n    Logger.info(\"Successfully created Peer with id \", id);\n    dispatch(setServerStatus(1));\n  });\n\n  peer.on(\"connection\", connection => {\n    Logger.info(\"New client connected with id: \", connection.peer);\n    connection.on(\"data\", data => dataHandler(data, dispatch));\n    dispatch(setServerStatus(2));\n    dispatch(addConnection(connection));\n  });\n\n  peer.on(\"error\", err => {\n    Logger.error(\"FEHLER: \", err);\n    dispatch(setServerStatus(3));\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: ownServerId => {\n    createPeer(ownServerId, dispatch);\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Create a New Server Id\",\n  text:\n    \"Please define your individual Server Id that you can give to participants.\",\n  buttonText: \"Create\",\n  location: \"/server/wait\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={18}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass EditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default EditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport EditorAnswerInput from \"./EditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">Question Text</Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  Answers{\" \"}\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <EditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n  };\n\n  render() {\n    const { children, onCloseDropdown } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n            if (onCloseDropdown) {\n              onCloseDropdown();\n            }\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  onCloseDropdown: PropTypes.func\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            onCloseDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nexport default QuestionListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionListDropdown from \"./QuestionListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon\n                              style={{\n                                marginBottom: \"3px\",\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const SORT_QUESTION = \"SORT_QUESTION\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { selectedQuestion } = getState();\n    if (selectedQuestion <= 0) {\n      dispatch(selectQuestion(0));\n    } else {\n      dispatch(selectQuestion(selectedQuestion - 1));\n    }\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport const SORT_ANSWER = \"SORT_ANSWER\";\n\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport tv4 from \"tv4\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport QuestionSchema from \"../../shared/util/questionsSchema\";\nimport * as questionEditorActions from \"../actions/questionEditor\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = { ...questionEditorActions, ...answerActions };\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadQuestionsFromStorage();\n  }\n\n  static getFormattedDate = () => {\n    const today = new Date();\n    let dd = today.getDate();\n\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    return `${dd}-${mm}-${yyyy}`;\n  };\n\n  loadQuestionsFromStorage = () => {\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  };\n\n  downloadFile = data => {\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\n      \"download\",\n      `weclare-${QuestionEditor.getFormattedDate()}.json`\n    );\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    Logger.info(\"Created and started file download\");\n  };\n\n  saveToStorage = data => {\n    localStorage.setItem(\"weclare\", data);\n    Logger.info(\"Saved questionset to local storage\");\n  };\n\n  validateAndSaveToStorage = data => {\n    const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n    if (valid) {\n      Logger.info(\"Questionset was successfully validated\");\n      this.saveToStorage(data);\n      this.loadQuestionsFromStorage();\n    } else {\n      Logger.error(\"Imported file was invalid\", tv4.error);\n    }\n  };\n\n  saveFileToStorage = file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.validateAndSaveToStorage(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                this.saveToStorage(JSON.stringify(questions));\n                this.downloadFile(questions);\n              }}\n              onUploadFile={this.saveFileToStorage}\n              onUploadDropbox={this.validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                this.saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.array.isRequired,\n  // Questions\n  loadQuestions: PropTypes.func.isRequired,\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string,\n  size: PropTypes.number\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\",\n  size: 30\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    progress: PropTypes.string,\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  question: {\n    progress: \"\",\n    questionIdx: null,\n    text: null,\n    type: null,\n    answers: null\n  },\n  disabled: false,\n  selectedAnswerIdx: null\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MDSpinner from \"react-md-spinner\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, size } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex justify-content-center\">\n          <MDSpinner\n            color1=\"#8a817c\"\n            color2=\"#f44336\"\n            color3=\"#dc9125\"\n            color4=\"#5fa15d\"\n            size={size}\n          />\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Row } from \"reactstrap\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\n\nfunction WaitScreen(props) {\n  const { connections, history } = props;\n  const hasClients = connections.length > 0;\n  const pluralizeClient = connections.length === 1 ? \"client\" : \"clients\";\n  const pluralizeVerb = connections.length === 1 ? \"is\" : \"are\";\n\n  return (\n    <Row className=\"justify-content-center\">\n      {hasClients ? (\n        <DefaultCard\n          title=\"Start the quiz\"\n          text={`Currently there ${pluralizeVerb} ${\n            connections.length\n          } ${pluralizeClient} connected. You can choose to wait for more participants or just go ahead and start the quiz.`}\n        >\n          <Button\n            color=\"secondary\"\n            block\n            onClick={() => {\n              history.push(\"/server/ask\");\n            }}\n          >\n            Start Quiz\n          </Button>\n        </DefaultCard>\n      ) : (\n        <SpinnerCard title=\"Waiting for participants\" />\n      )}\n    </Row>\n  );\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections\n});\n\nexport default connect(mapStateToProps)(withRouter(WaitScreen));\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TQuestion, DQuestion } from \"../types\";\n\nconst QuestionCard = props => {\n  const {\n    question,\n    onClickAnswer,\n    countedAnswers,\n    disabled,\n    selectedAnswerIdx\n  } = props;\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <DefaultCard title=\"Answer question\" badge={question.progress} {...props}>\n        {question.text && (\n          <div\n            className=\"text-center mb-4 h4\"\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={selectedAnswerIdx !== i}\n              id={i}\n              key={i}\n              block\n              onClick={\n                onClickAnswer\n                  ? e => {\n                      const selectedAnswer = parseInt(e.target.id, 10);\n                      onClickAnswer(selectedAnswer);\n                    }\n                  : null\n              }\n              color=\"secondary\"\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge className=\"float-right\" color=\"secondary\">\n                  {countedAnswers[i] !== 0 && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n} from \"../actions/server\";\n\nconst getFormattedQuestion = (questions, currentQuestionIdx) => {\n  if (questions && questions[currentQuestionIdx]) {\n    const question = questions[currentQuestionIdx];\n\n    const { ...questionWithoutAnswer } = question;\n    const currentQuestionIdxString = String(currentQuestionIdx + 1);\n    const questionsCount = Object.keys(questions).length;\n    return {\n      question: {\n        ...questionWithoutAnswer,\n        questionIdx: currentQuestionIdx,\n        progress: `${currentQuestionIdxString}/${questionsCount}`\n      }\n    };\n  }\n  return null;\n};\n\nconst sendQuestion = (formattedQuestion, connections) => {\n  if (connections.length > 0 && formattedQuestion) {\n    connections.forEach(connection =>\n      connection.send(JSON.stringify(formattedQuestion))\n    );\n  } else {\n    console.error(\"Can't send question to clients\");\n  }\n};\n\nclass AskScreen extends React.Component {\n  state = {\n    buttonPhase: 0,\n    countedAnswers: null\n  };\n\n  countAnswers(registeredAnswers, questionIdx) {\n    const countedAnswers = registeredAnswers[questionIdx].map(\n      answer => answer.length\n    );\n    this.setState(prevState => ({ ...prevState, countedAnswers }));\n  }\n\n  render() {\n    const {\n      connections,\n      questions,\n      currentQuestionIdx,\n      setCurrentQuestionIdx,\n      toggleAcceptingAnswers,\n      history,\n      status,\n      registeredAnswers\n    } = this.props;\n    const { buttonPhase, countedAnswers } = this.state;\n    const hasClients = connections.length > 0;\n    const currentQuestionIdxNoNull = currentQuestionIdx\n      ? currentQuestionIdx\n      : 0;\n    const nextQuestionIdx = currentQuestionIdxNoNull + 1;\n    const formattedQuestion = getFormattedQuestion(\n      questions,\n      currentQuestionIdxNoNull\n    );\n    return (\n      <Row className=\"justify-content-center\">\n        {hasClients ? (\n          <QuestionCard\n            question={formattedQuestion.question}\n            countedAnswers={countedAnswers}\n            disabled\n            footer={\n              hasClients && (\n                <Button\n                  color=\"secondary\"\n                  block\n                  onClick={() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        sendQuestion(formattedQuestion, connections);\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 1\n                        });\n                        break;\n                      case 1:\n                        toggleAcceptingAnswers();\n                        this.setState({\n                          buttonPhase: 2\n                        });\n                        break;\n                      case 2:\n                        // Show voting results\n                        this.countAnswers(\n                          registeredAnswers,\n                          currentQuestionIdxNoNull\n                        );\n                        this.setState({\n                          buttonPhase: 3\n                        });\n                        break;\n                      case 3:\n                        setCurrentQuestionIdx(nextQuestionIdx);\n                        this.setState({\n                          buttonPhase: 0\n                        });\n                        break;\n                      default:\n                    }\n                  }}\n                >\n                  {(() => {\n                    switch (buttonPhase) {\n                      case 0:\n                        return (\n                          <>\n                            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start\n                            question\n                          </>\n                        );\n                      case 1:\n                        return (\n                          <>\n                            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop\n                            Question\n                          </>\n                        );\n                      case 2:\n                        return (\n                          <>\n                            <FormatListNumberedIcon\n                              style={{ paddingBottom: \"3px\" }}\n                            />{\" \"}\n                            Show Results\n                          </>\n                        );\n                      case 3:\n                        return (\n                          <>\n                            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                            Next Question\n                          </>\n                        );\n                      default:\n                        return <></>;\n                    }\n                  })()}\n                </Button>\n              )\n            }\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for participants\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  connections: state.server.connections,\n  questions: state.questionEditor,\n  currentQuestionIdx: state.server.currentQuestion,\n  registeredAnswers: state.registeredAnswers\n});\n\nconst mapDispatchToProps = {\n  setCurrentQuestionIdx,\n  toggleAcceptingAnswers\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestion: null,\n    acceptingAnswers: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestion: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWER, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/Helpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWER: {\n      console.log(\"Reducer\", action.payload);\n      return changeInArray(state, action.payload.questionIdx, q =>\n        changeInArray(q, action.payload.answerIdx, a => {\n          a.push(action.payload.userId);\n          return a;\n        })\n      );\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questionEditor\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./registeredAnswers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questionEditor\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray\n} from \"../../shared/util/Helpers\";\n\nconst newQuestion = () => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState.push(newQuestion());\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      return deepClonedState;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport CreatorContainer from \"./CreatorContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport WaitScreen from \"./WaitScreen\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/server/create\" component={CreatorContainer} />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/wait\" component={WaitScreen} />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport Logger from \"../../shared/util/Logger\";\nimport { setServerStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\n// Source: https://github.com/peers/peerjs/issues/227#issue-39009356\nconst makePeerHeartbeater = peer => {\n  let timeoutId = 0;\n  function heartbeat() {\n    timeoutId = setTimeout(heartbeat, 20000);\n    // eslint-disable-next-line\n    if (peer.socket._wsOpen()) {\n      peer.socket.send({ type: \"HEARTBEAT\" });\n      Logger.info(\"Sent heartbeat\");\n    }\n  }\n  // Start\n  heartbeat();\n  // return\n  return {\n    start() {\n      if (timeoutId === 0) {\n        heartbeat();\n      }\n    },\n    stop() {\n      clearTimeout(timeoutId);\n      timeoutId = 0;\n    }\n  };\n};\n\nconst clickConnect = (serverId, dispatch) => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  const peer = new Peer({\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n\n  const heartbeater = makePeerHeartbeater(peer);\n\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setServerStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: false }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setServerStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setServerStatus(2));\n    connection.on(\"data\", data => {\n      const msg = JSON.parse(data);\n      console.log(\"Received data: \", msg);\n      dispatch(setCurrentQuestion(msg.question));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\n\nimport { TQuestion, DQuestion } from \"../../shared/types\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  connection: state.client.connection\n});\n\nconst sendAnswer = (connection, answerIdx, questionIdx) => {\n  if (connection) {\n    connection.send({\n      type: \"answer\",\n      payload: {\n        questionIdx,\n        answerIdx,\n        userId: connection.provider.id\n      }\n    });\n  }\n};\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswerIdx: null\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n    }\n  }\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { currentQuestion, connection } = this.props;\n    const { disabled, selectedAnswerIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard\n            question={currentQuestion}\n            disabled={disabled}\n            selectedAnswerIdx={selectedAnswerIdx}\n            onClickAnswer={answerIdx => {\n              console.log(\"Sending back answer \", answerIdx, currentQuestion);\n              sendAnswer(connection, answerIdx, currentQuestion.questionIdx);\n              this.setState(\n                {\n                  disabled: true,\n                  selectedAnswerIdx: answerIdx\n                },\n                () => console.log(\"New state\", this.state)\n              );\n            }}\n          />\n        ) : (\n          <SpinnerCard title=\"Waiting for question\" />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectorContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/README.MD`)\n      .then(response => response.text())\n      .then(text => snarkdown(text))\n      .then(data => this.setState({ data }));\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <Header />\n        <Container>\n          <Row>\n            <Col md=\"12\">\n              <Card className=\"shadow\">\n                <CardHeader>\n                  <h6 className=\"my-0\">About</h6>\n                </CardHeader>\n                <CardBody>\n                  <div\n                    className=\"markdown-body\"\n                    style={{\n                      fontFamily: \"IBM Plex Sans\"\n                    }}\n                    dangerouslySetInnerHTML={{ __html: data }}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Footer />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}