{"version":3,"sources":["../node_modules/peerjs/dist sync","shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","shared/util/Logger.js","shared/actions/connection.js","server/actions/answers.js","server/selectors/questions.js","shared/util/NetworkHelpers.js","server/actions/server.js","server/components/ConnectFormServerContainer.js","shared/components/InfoPopoverIcon.js","server/components/QuestionEditorAnswerInput.js","server/components/QuillWrapper.js","server/components/QuestionEditorContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionEditorListDropdown.js","server/components/QuestionEditorList.js","shared/util/FileHelpers.js","shared/types.js","server/components/QuestionEditor.js","shared/util/QuestionsSchema.js","server/actions/questions.js","server/components/QuestionEditorContainer.js","shared/components/SingleQuestionCard.js","shared/components/MultiQuestionCard.js","shared/components/QuestionCard.js","server/selectors/server.js","server/components/AskScreenContinueButton.js","server/selectors/answers.js","shared/components/Chevron.js","server/components/AskScreen.js","shared/util/QuestionHelpers.js","server/reducers/server.js","server/reducers/answers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questions.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectFormClientContainer.js","shared/components/SpinnerCard.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","encodeURI","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","NavLink","tag","Link","to","connect","connection","peer","connections","length","components_Header","assign","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","inputIsInvalid","isWaitingForServer","setWaitingForServer","objectSpread","validateServerId","isValid","test","_this2","match","onChangeServerId","onClickConnect","serverId","buttonText","history","helpText","validationError","connectionStatus","push","params","components_DefaultCard","Form","FormGroup","row","bsSize","type","invalid","onChange","newId","target","FormFeedback","FormText","Button","Spinner","undefined","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","SET_PEER","SET_CONNECTION_STATUS","setConnectionStatus","newStatus","payload","setPeer","REGISTER_ANSWERS","registerAnswers","questionIdx","answerIdxArray","userId","dispatch","getState","acceptingAnswers","INIT_ANSWERS","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","getCurrentQuestion","questions","currentQuestionIdx","progress","getProgress","getCurrentQuestionNoSolution","currentQuestion","answer","isCorrect","objectWithoutProperties","createPeer","ownId","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","ADD_CONNECTION","addConnection","SET_SERVER_ID","setServerId","SET_CURRENT_QUESTION_IDX","setCurrentQuestionIdx","incrementQuestionIdx","_getState$server$curr","TOGGLE_ACCEPTING_ANSWERS","TOGGLE_ACCEPTING_CONNECTIONS","staticProps","withRouter","newServerId","_ref","asyncToGenerator","regenerator_default","mark","_callee2","_getState4","_getState4$server$own","openAsync","_openAsync","dataHandler","wrap","_context2","prev","next","_callee","_context","abrupt","Promise","reject","on","info","err","stop","apply","_x3","error","sent","_x","_x2","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","QuestionEditorAnswerInput","isHovered","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","QuestionEditorAnswerInput_RadioInput","onSetCorrectAnswer","QuestionEditorAnswerInput_CheckboxInput","PencilIcon_default","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","QuillWrapper","formats","modules","toolbar","list","font","syntax","highlight","hljs","highlightAuto","handleChange","newValue","onEditQuestionText","react_quill_lib_default","QuestionEditorContent","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_QuestionEditorAnswerInput","placeholder","block","PlaylistPlusIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","closeDropdown","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionEditorListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionEditorList","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","marginBottom","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionEditorListDropdown","DownloadIcon_default","downloadFile","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","setAttribute","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","getFormattedDate","remove","saveToStorage","localStorage","setItem","DQuestion","PropTypes","string","shape","arrayOf","object","QuestionEditor","loadQuestionsFromStorage","addQuestion","selectQuestion","editQuestionText","editQuestionType","editQuestionMode","deleteQuestion","addAnswer","editAnswerText","deleteAnswer","setCorrectSingleAnswer","setCorrectMultiAnswer","sortQuestion","sortAnswer","saveFileToStorage","validateAndSaveToStorage","components_QuestionEditorList","components_QuestionEditorContent","xs","ContentSaveIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_MODE","newMode","oldMode","EDIT_QUESTION_TYPE","newType","oldType","DELETE_QUESTION","LOAD_QUESTIONS","loadQuestions","newQuestions","getItem","parse","tv4","validate","QuestionSchema","reader","FileReader","onload","readAsText","SORT_QUESTION","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","answerIdx","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","questionEditorActions","answerActions","SingleQuestionCard","_props$selectedAnswer","selectedAnswersIdx","onClickAnswer","countedAnswers","toggleSelectedAnswers","onSendAnswers","toggleDisabled","dangerouslySetInnerHTML","__html","selectedAnswer","lineHeight","MultiQuestionCard","selectedAnswersArray","selectedAnswers","filter","QuestionCard","log","Helmet","components_SingleQuestionCard","components_MultiQuestionCard","isConnected","hasNextQuestion","_state$questionEditor","_state$server$current","hasPreviousQuestion","_state$server$current2","sendCurrentQuestionToClients","currentQuestionNoSolution","forEach","send","toggleAcceptingAnswers","stopAcceptingConnections","_getState3","_getState3$connection","acceptingConnections","disconnect","AskScreenContinueButton","buttonPhase","nextButtonPhase","currentPhaseObj","0","additionalButtonProps","1","PlayIcon_default","2","PauseIcon_default","3","SkipForwardIcon_default","getAnswerCountForCurrentQuestion","registeredAnswers","getReceivedAnswersCounter","_state$server$connect","flatRegisteredAnswers","flat","distinctUsers","toConsumableArray","Set","connectionCount","percentageValue","Math","trunc","percentageString","Number","isNaN","ChevronLeft","ChevronLeftIcon_default","ChevronRight","ChevronRightIcon_default","AskScreen","showVoteCount","toggleShowVoteCount","receivedAnswersCounter","decrementQuestionIdx","Chevron_ChevronLeft","components_QuestionCard","FormatListNumberedIcon_default","components_AskScreenContinueButton","Chevron_ChevronRight","_getState2$server$cur","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","_action$payload","combineReducers","deepClonedState","questionsCount","idx","nanoid","newQuestion","_action$payload2","firstAnswerFound","_action$payload3","_action$payload4","q","_action$payload5","_action$payload6","modAnswers","_action$payload7","_action$payload8","element","_action$payload9","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Route","exact","path","component","ConnectFormServerContainer","QuestionEditorContainer","components_Footer","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","_getState2","_getState2$client$rem","dataObj","reliable","SpinnerCard","textAlign","AnswerScreen","initialState","prevProps","resetState","initSelectedAnswers","answerCount","fill","hasQuestion","components_SpinnerCard","_getState$client","_getState$client$conn","_getState$client$curr","provider","sendAnswers","clientStore","mainClientReducer","Client","ClientHeaderContainer","Switch","ConnectFormClientContainer","About","fontFamily","snarkdown","SelectBox","emoji","role","aria-label","fontSize","StartPage","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7accdd49.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 112;","import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nconst Footer = () => (\n  <div>\n    <hr />\n    <footer className=\"container\">\n      <Row>\n        <Col>\n          <a className=\"font-weight-light text-muted\" href=\"/about\">\n            &copy; 2018 Moritz Stückler – HAW Hamburg\n          </a>\n        </Col>\n        <Col className=\"text-right\">\n          <a href=\"https://github.com/pReya/weclare/\">\n            <GithubCircleIcon />\n          </a>\n        </Col>\n      </Row>\n    </footer>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    encodeURI(\n                      `${window.location.origin}/client/connect/${ownServerId}`\n                    )\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Container, Navbar, NavbarBrand, NavLink } from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-none d-flex flex-row justify-content-between bg-white py-3\"\n      >\n        <Container>\n          <NavbarBrand className=\"w-50\" href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <NavLink className=\"w-50 text-right\" tag={Link} to=\"/about\">\n            About\n          </NavLink>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport {\n  Form,\n  FormText,\n  FormFeedback,\n  FormGroup,\n  Button,\n  Input,\n  Col,\n  Spinner\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nclass ConnectForm extends React.Component {\n  state = {\n    inputIsInvalid: false,\n    isWaitingForServer: false\n  };\n\n  setWaitingForServer = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      isWaitingForServer: true\n    }));\n  };\n\n  validateServerId = id => {\n    const serverIdRex = /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/;\n    const isValid = !id || serverIdRex.test(id);\n    this.setState(prevState => ({ ...prevState, inputIsInvalid: !isValid }));\n  };\n\n  render() {\n    const {\n      match,\n      onChangeServerId,\n      onClickConnect,\n      serverId,\n      title,\n      text,\n      buttonText,\n      history,\n      location,\n      helpText,\n      validationError,\n      connectionStatus\n    } = this.props;\n\n    const { inputIsInvalid, isWaitingForServer } = this.state;\n\n    if (history && location && connectionStatus === 1) {\n      history.push(location);\n    }\n\n    // React Router: If URL has serverID\n    if (match && match.params && match.params.serverId) {\n      onChangeServerId(match.params.serverId);\n    }\n\n    return (\n      <DefaultCard title={title} text={text}>\n        <Form>\n          <FormGroup row className=\"form-row mb-1\">\n            <Col>\n              <Input\n                bsSize=\"lg\"\n                id=\"serverId\"\n                type=\"text\"\n                value={serverId}\n                disabled={isWaitingForServer}\n                invalid={inputIsInvalid}\n                onChange={e => {\n                  const newId = e.target.value;\n                  this.validateServerId(newId);\n                  onChangeServerId(newId);\n                }}\n              />\n              {validationError && (\n                <FormFeedback>{validationError}</FormFeedback>\n              )}\n              {helpText && <FormText>{helpText}</FormText>}\n            </Col>\n            <Col md={3}>\n              <Button\n                type=\"button\"\n                id=\"connect\"\n                className=\"btn-block\"\n                size=\"lg\"\n                disabled={isWaitingForServer || inputIsInvalid}\n                onClick={() => {\n                  onClickConnect(serverId);\n                  this.setWaitingForServer();\n                }}\n              >\n                {isWaitingForServer ? (\n                  <>\n                    <Spinner size=\"sm\" color=\"info\" /> Waiting...\n                  </>\n                ) : (\n                  buttonText\n                )}\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </DefaultCard>\n    );\n  }\n}\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  validationError: PropTypes.string,\n  inputIsInvalid: PropTypes.bool,\n  match: ReactRouterPropTypes.match\n};\n\nConnectForm.defaultProps = {\n  helpText: undefined,\n  match: undefined,\n  buttonText: \"Connect\",\n  validationError: undefined,\n  inputIsInvalid: false\n};\n\nexport default ConnectForm;\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setConnectionStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n\n// export function sendNextQuestionToClients() {\n//   return (dispatch, getState) => {\n//     const {\n//       server: { connections = [], currentQuestionIdx },\n//       questionEditor: questions\n//     } = getState();\n//     // use getFormattedQuestion here – how?\n//     if (connections.length > 0 && formattedQuestion) {\n//       connections.forEach(connection =>\n//         connection.send(JSON.stringify(formattedQuestion))\n//       );\n//     } else {\n//       console.error(\"Can't send question to clients\");\n//     }\n//   };\n// }\n","// Server Answer Actions\nexport const REGISTER_ANSWERS = \"REGISTER_ANSWERS\";\nexport function registerAnswers(questionIdx, answerIdxArray, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWERS,\n        payload: {\n          questionIdx,\n          answerIdxArray,\n          userId\n        }\n      });\n    }\n  };\n}\n\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const getProgress = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n\n  if (questions.length > 0 && typeof currentQuestionIdx === \"number\") {\n    return `${currentQuestionIdx + 1}/${questions.length}`;\n  }\n  return \"0/0\";\n};\n\nexport const getCurrentQuestion = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n  const progress = getProgress(state);\n\n  if (questions.length > 0 && typeof currentQuestionIdx === \"number\") {\n    return { ...questions[currentQuestionIdx], progress };\n  }\n\n  return undefined;\n};\n\nexport const getCurrentQuestionNoSolution = state => {\n  const currentQuestion = getCurrentQuestion(state);\n\n  return {\n    ...currentQuestion,\n    answers: currentQuestion.answers.map(answer => {\n      const { isCorrect, ...answerNoSolution } = answer;\n      return answerNoSolution;\n    })\n  };\n};\n","import Peer from \"peerjs\";\n\nconst createPeer = ownId => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  return new Peer(ownId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n};\n\nexport default createPeer;\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport { registerAnswers } from \"./answers\";\nimport { getCurrentQuestionNoSolution } from \"../selectors/questions\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: SET_CURRENT_QUESTION_IDX,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function incrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx + 1));\n  };\n}\n\nexport function decrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx - 1));\n  };\n}\n\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\nexport function toggleAcceptingAnswers() {\n  return {\n    type: TOGGLE_ACCEPTING_ANSWERS\n  };\n}\n\nexport const TOGGLE_ACCEPTING_CONNECTIONS = \"TOGGLE_ACCEPTING_CONNECTIONS\";\nexport function stopAcceptingConnections() {\n  return (dispatch, getState) => {\n    const {\n      connection: { peer = null },\n      server: { acceptingConnections }\n    } = getState();\n\n    if (acceptingConnections) {\n      dispatch({\n        type: TOGGLE_ACCEPTING_CONNECTIONS\n      });\n      peer.disconnect();\n    }\n  };\n}\n\nexport function startServer() {\n  return async (dispatch, getState) => {\n    const {\n      server: { ownServerId = null }\n    } = getState();\n\n    const peer = createPeer(ownServerId);\n\n    async function openAsync(peer) {\n      return new Promise((resolve, reject) => {\n        peer.on(\"open\", id => {\n          Logger.info(`Successfully created peer with ID \"${id}\"`);\n          resolve(id);\n        });\n        peer.on(\"error\", err => reject(err));\n      });\n    }\n\n    const dataHandler = data => {\n      const { type, payload } = data;\n      Logger.info(\"Received Data: \", data);\n      switch (type) {\n        case \"answer\":\n          dispatch(\n            registerAnswers(\n              payload.questionIdx,\n              payload.answerIdxArray,\n              payload.userId\n            )\n          );\n          break;\n        default:\n          Logger.error(\"Switch case default reached\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    const id = await openAsync(peer);\n    dispatch(setConnectionStatus(1));\n    dispatch(setServerId(id));\n\n    peer.on(\"connection\", connection => {\n      Logger.info(\"New client connected with id: \", connection.peer);\n      connection.on(\"data\", data => dataHandler(data));\n      dispatch(setConnectionStatus(2));\n      dispatch(addConnection(connection));\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n\nexport function sendCurrentQuestionToClients() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    const currentQuestionNoSolution = getCurrentQuestionNoSolution(getState());\n\n    const msg = {\n      type: \"question\",\n      payload: currentQuestionNoSolution\n    };\n\n    if (connections.length > 0 && currentQuestionNoSolution) {\n      Logger.info(\"Sending question to clients\", currentQuestionNoSolution);\n      connections.forEach(connection => connection.send(JSON.stringify(msg)));\n    } else {\n      Logger.error(\"Can't send question to clients\");\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerId, startServer } from \"../actions/server\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: () => {\n    dispatch(startServer());\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId,\n  connectionStatus: state.connection.status\n});\n\nconst staticProps = {\n  title: \"Choose a Server ID\",\n  text:\n    \"Please pick a server ID that uniquely identifies your quiz session (e.g. 'algorithms_2_2018') or leave it empty to generate a random ID.\",\n  buttonText: \"Create\",\n  location: \"/server/ask\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={20}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass QuestionEditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText>\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nQuestionEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport \"highlight.js/styles/atom-one-light.css\";\nimport hljs from \"highlight.js\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\",\n    \"font\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"],\n      [{ font: [] }]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  handleChange = newValue => {\n    const { onEditQuestionText, selectedQuestion } = this.props;\n    onEditQuestionText(selectedQuestion, newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport QuestionEditorAnswerInput from \"./QuestionEditorAnswerInput\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nconst QuestionEditorContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onEditQuestionMode,\n    onEditQuestionType,\n    onAddAnswer,\n    onSortAnswer,\n    onSetCorrectSingleAnswer,\n    onSetCorrectMultiAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h5 className=\"my-0\">Edit Question</h5>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\" className=\"font-weight-bold\">\n                  Question Text\n                </Label>\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        A <strong>question</strong> does have a set of correct\n                        answers. A <strong>vote</strong> does not have any\n                        correct answers. It will just show the distribution of\n                        all given answers.\n                      </>\n                    }\n                    id=\"info-question-type\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"question\"}\n                      onClick={() => {\n                        if (question.type !== \"question\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"question\",\n                            \"vote\"\n                          );\n                        }\n                      }}\n                    >\n                      Question\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      active={question.type === \"vote\"}\n                      onClick={() => {\n                        if (question.type !== \"vote\") {\n                          onEditQuestionType(\n                            selectedQuestion,\n                            \"vote\",\n                            \"question\"\n                          );\n                        }\n                      }}\n                    >\n                      Vote\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n              <Row form>\n                <Col>\n                  <QuillWrapper\n                    content={question.text}\n                    onEditQuestionText={onEditQuestionText}\n                    selectedQuestion={selectedQuestion}\n                  />\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <FormGroup>\n              <Row form className=\"justify-content-between\">\n                <Label sm=\"auto\">\n                  <span className=\"font-weight-bold\">Answers </span>\n                  <span className=\"small text-muted\">\n                    {question.mode === \"multi\"\n                      ? \"(Check the correct answers)\"\n                      : \"(Select the correct answer)\"}\n                  </span>\n                </Label>\n\n                <Col sm=\"auto\">\n                  <InfoPopoverIcon\n                    text={\n                      <>\n                        Choose if you want to allow users to pick just a{\" \"}\n                        <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                        answers.\n                      </>\n                    }\n                    id=\"info-question-mode\"\n                    placement=\"left\"\n                  />\n                  <ButtonGroup size=\"sm\">\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"single\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"single\",\n                            \"multi\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"single\"}\n                    >\n                      Single\n                    </Button>\n                    <Button\n                      outline\n                      color=\"primary\"\n                      onClick={() => {\n                        if (question.mode !== \"multi\") {\n                          onEditQuestionMode(\n                            selectedQuestion,\n                            \"multi\",\n                            \"single\"\n                          );\n                        }\n                      }}\n                      active={question.mode === \"multi\"}\n                    >\n                      Multiple\n                    </Button>\n                    {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n\n              <Row form>\n                <Col>\n                  <DragDropContext\n                    onDragEnd={result => {\n                      const { destination, source } = result;\n                      if (!destination) {\n                        return;\n                      }\n\n                      if (\n                        destination.droppableId === source.droppableId &&\n                        destination.index === source.inde\n                      ) {\n                        return;\n                      }\n\n                      onSortAnswer(\n                        selectedQuestion,\n                        source.index,\n                        destination.index\n                      );\n                    }}\n                  >\n                    <Droppable droppableId=\"answerList\">\n                      {providedDroppable => (\n                        <div\n                          {...providedDroppable.droppableProps}\n                          ref={providedDroppable.innerRef}\n                        >\n                          {question.answers.map((answer, i) => (\n                            <Draggable\n                              draggableId={answer.id}\n                              index={i}\n                              key={answer.id}\n                            >\n                              {providedDraggable => (\n                                <div\n                                  {...providedDraggable.draggableProps}\n                                  ref={providedDraggable.innerRef}\n                                  key={answer.id}\n                                >\n                                  <QuestionEditorAnswerInput\n                                    isCorrectAnswer={answer.isCorrect}\n                                    dragHandleProps={\n                                      providedDraggable.dragHandleProps\n                                    }\n                                    selectedQuestion={selectedQuestion}\n                                    number={i}\n                                    mode={question.mode}\n                                    answer={answer.text}\n                                    key={answer.id}\n                                    onEditAnswerText={e =>\n                                      onEditAnswerText(\n                                        selectedQuestion,\n                                        e.target.value,\n                                        i\n                                      )\n                                    }\n                                    onSetCorrectSingleAnswer={\n                                      onSetCorrectSingleAnswer\n                                    }\n                                    onSetCorrectMultiAnswer={\n                                      onSetCorrectMultiAnswer\n                                    }\n                                    onDeleteAnswer={onDeleteAnswer}\n                                    disabled={question.type === \"vote\"}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {providedDroppable.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                </Col>\n              </Row>\n            </FormGroup>\n\n            <Button\n              outline\n              block\n              color=\"primary\"\n              onClick={() => onAddAnswer(selectedQuestion)}\n            >\n              <PlaylistPlusIcon /> Add answer\n            </Button>\n            <Button\n              outline\n              block\n              color=\"danger\"\n              onClick={() => onDeleteQuestion(selectedQuestion)}\n            >\n              <DeleteIcon /> Delete Question\n            </Button>\n          </Form>\n        ) : (\n          <span className=\"text-muted\">No question selected</span>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionEditorContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionEditorContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile, closeDropdown } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n    if (typeof closeDropdown === \"function\") {\n      closeDropdown();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  closeDropdown: PropTypes.func\n};\n\nSingleFileInput.defaultProps = {\n  closeDropdown: null\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionEditorListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            closeDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nQuestionEditorListDropdown.propTypes = {\n  onUploadFile: PropTypes.func.isRequired,\n  onUploadDropbox: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionEditorListDropdown from \"./QuestionEditorListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionEditorList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h5 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h5>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            <DragIcon\n                              style={{\n                                marginBottom: \"3px\",\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionEditorListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button color=\"light\" onClick={onDownloadFile}>\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionEditorList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorList.defaultProps = {\n  questions: [],\n  selectedQuestion: null\n};\nexport default QuestionEditorList;\n","import Logger from \"./Logger\";\n\nconst getFormattedDate = () => {\n  const today = new Date();\n  let dd = today.getDate();\n\n  let mm = today.getMonth() + 1;\n  const yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = `0${dd}`;\n  }\n\n  if (mm < 10) {\n    mm = `0${mm}`;\n  }\n  return `${dd}-${mm}-${yyyy}`;\n};\n\nexport const downloadFile = data => {\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n    JSON.stringify(data)\n  )}`;\n  const downloadAnchorNode = document.createElement(\"a\");\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\n    \"download\",\n    `weclare-${getFormattedDate()}.json`\n  );\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n  Logger.info(\"Created and started file download\");\n};\n\nexport const saveToStorage = data => {\n  localStorage.setItem(\"weclare\", data);\n  Logger.info(\"Saved questionset to local storage\");\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\"\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  progress: \"0/0\",\n  questionIdx: 0,\n  text: \"Mock question: How is the development going?\",\n  type: \"single\",\n  mode: \"question\",\n  answers: [\n    { id: \"6FedDc\", text: \"Good\", isCorrect: true },\n    { id: \"9FbdDa\", text: \"Not Good\", isCorrect: false }\n  ]\n};\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport QuestionEditorContent from \"./QuestionEditorContent\";\nimport QuestionEditorList from \"./QuestionEditorList\";\nimport { saveToStorage, downloadFile } from \"../../shared/util/FileHelpers\";\nimport { TQuestion } from \"../../shared/types\";\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    props.loadQuestionsFromStorage();\n  }\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer,\n      saveFileToStorage,\n      validateAndSaveToStorage\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionEditorList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                saveToStorage(JSON.stringify(questions));\n                downloadFile(questions);\n              }}\n              onUploadFile={saveFileToStorage}\n              onUploadDropbox={validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionEditorContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n              disabled={!questions.length > 0}\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default QuestionEditor;\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.arrayOf(TQuestion).isRequired,\n  // Questions\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editQuestionText: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  loadQuestionsFromStorage: PropTypes.func.isRequired,\n  saveFileToStorage: PropTypes.func.isRequired,\n  validateAndSaveToStorage: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired,\n  history: ReactRouterPropTypes.history.isRequired\n};\n\nQuestionEditor.defaultProps = {\n  selectedQuestion: null\n};\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\", \"questionIdx\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      questionIdx: {\n        type: \"number\",\n        title: \"Question Index\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","import tv4 from \"tv4\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionSchema from \"../../shared/util/QuestionsSchema\";\nimport { saveToStorage } from \"../../shared/util/FileHelpers\";\n\n// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport function editQuestionText(questionIdx, text) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      text\n    }\n  };\n}\n\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { questionEditor: questions } = getState();\n    // Delete first element\n    if (questionIdx === 0) {\n      // It is not the last element\n      if (questions.length > 0) {\n        dispatch(selectQuestion(0));\n        // It is the last element\n      } else {\n        dispatch(selectQuestion(null));\n      }\n    } else {\n      dispatch(selectQuestion(questionIdx - 1));\n    }\n  };\n}\n\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport const loadQuestionsFromStorage = () => dispatch => {\n  const newQuestions = localStorage.getItem(\"weclare\");\n  if (newQuestions) {\n    dispatch(loadQuestions(JSON.parse(newQuestions)));\n  }\n};\n\nexport const validateAndSaveToStorage = data => dispatch => {\n  const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n  if (valid) {\n    Logger.info(\"Questionset was successfully validated\");\n    saveToStorage(data);\n    dispatch(loadQuestionsFromStorage());\n  } else {\n    Logger.error(\"Imported file was invalid\", tv4.error);\n  }\n};\n\nexport const saveFileToStorage = file => dispatch => {\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch(validateAndSaveToStorage(reader.result));\n  };\n  reader.readAsText(file);\n};\n\nexport const SORT_QUESTION = \"SORT_QUESTION\";\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Question Editor Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SORT_ANSWER = \"SORT_ANSWER\";\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport * as questionEditorActions from \"../actions/questions\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = {\n  ...questionEditorActions,\n  ...answerActions\n};\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport Logger from \"../util/Logger\";\n\nconst SingleQuestionCard = props => {\n  const {\n    title,\n    question,\n    selectedAnswersIdx = [],\n    onClickAnswer,\n    disabled,\n    countedAnswers,\n    children,\n    toggleSelectedAnswers,\n    onSendAnswers,\n    isServer,\n    toggleDisabled\n  } = props;\n\n  return (\n    <DefaultCard title={title} badge={question.progress} footer={children}>\n      {question.text && (\n        <div\n          className=\"text-center my-5 h4\"\n          // eslint-disable-next-line\n          dangerouslySetInnerHTML={{ __html: question.text }}\n        />\n      )}\n      {question.answers &&\n        question.answers.map((answer, i) => (\n          <Button\n            outline={!selectedAnswersIdx[i]}\n            id={i}\n            key={answer.id}\n            block\n            onClick={e => {\n              const selectedAnswer = parseInt(e.target.id, 10);\n              toggleSelectedAnswers(selectedAnswer);\n              Logger.info(\"Sending single answer \", selectedAnswer);\n              onSendAnswers([selectedAnswer]);\n              toggleDisabled();\n            }}\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            {answer.text}\n            {countedAnswers && (\n              <Badge\n                className=\"float-right\"\n                style={{ lineHeight: 1.5 }}\n                color=\"secondary\"\n              >\n                {typeof countedAnswers[i] === \"number\" && countedAnswers[i]}\n              </Badge>\n            )}\n          </Button>\n        ))}\n    </DefaultCard>\n  );\n};\n\nexport default SingleQuestionCard;\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport Logger from \"../util/Logger\";\n\nconst convertSelectedAnswersArray = selectedAnswersArray => {\n  if (selectedAnswersArray) {\n    return selectedAnswersArray\n      .map((answer, i) => answer && i)\n      .filter(answer => typeof answer === \"number\");\n  }\n  return [];\n};\n\nconst MultiQuestionCard = props => {\n  const {\n    title,\n    question,\n    selectedAnswersIdx = [],\n    onClickAnswer,\n    disabled,\n    countedAnswers,\n    children,\n    toggleSelectedAnswers,\n    onSendAnswers,\n    isServer,\n    toggleDisabled\n  } = props;\n\n  return (\n    <DefaultCard\n      title={title}\n      badge={question && question.progress}\n      footer={\n        <>\n          {question.mode === \"multi\" &&\n            !isServer && (\n              <>\n                <p className=\"text-center text-muted\">\n                  Multiple choice question: Select answers and click send.\n                </p>\n                <Button\n                  color=\"primary\"\n                  disabled={disabled}\n                  onClick={() => {\n                    const selectedAnswers = convertSelectedAnswersArray(\n                      selectedAnswersIdx\n                    );\n                    Logger.info(\"Sending multi answer \", selectedAnswers);\n                    onSendAnswers(selectedAnswers);\n                    toggleDisabled();\n                  }}\n                  block\n                >\n                  Send Answers\n                </Button>\n              </>\n            )}\n          {children}\n        </>\n      }\n    >\n      {question.text && (\n        <div\n          className=\"text-center my-5 h4\"\n          // eslint-disable-next-line\n          dangerouslySetInnerHTML={{ __html: question.text }}\n        />\n      )}\n      {question.answers &&\n        question.answers.map((answer, i) => (\n          <Button\n            outline={!selectedAnswersIdx[i]}\n            id={i}\n            key={answer.id}\n            block\n            onClick={e => {\n              const selectedAnswer = parseInt(e.target.id, 10);\n              toggleSelectedAnswers(selectedAnswer);\n              Logger.info(\"Toggling multi answer \", selectedAnswer);\n            }}\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            {answer.text}\n            {countedAnswers && (\n              <Badge\n                className=\"float-right\"\n                style={{ lineHeight: 1.5 }}\n                color=\"secondary\"\n              >\n                {typeof countedAnswers[i] === \"number\" && countedAnswers[i]}\n              </Badge>\n            )}\n          </Button>\n        ))}\n    </DefaultCard>\n  );\n};\n\nexport default MultiQuestionCard;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { TQuestion, DQuestion } from \"../types\";\nimport SingleQuestionCard from \"./SingleQuestionCard\";\nimport MultiQuestionCard from \"./MultiQuestionCard\";\n\nconst QuestionCard = props => {\n  const { question, isServer } = props;\n\n  const title = isServer ? \"Ask Question\" : \"Answer Question\";\n  console.log(\"Props Question Card\", props);\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {question.mode === \"single\" ? (\n        <SingleQuestionCard title={title} question={question} {...props} />\n      ) : (\n        <MultiQuestionCard title={title} question={question} {...props} />\n      )}\n    </>\n  );\n};\n\nQuestionCard.propTypes = { question: TQuestion };\nQuestionCard.defaultProps = { question: DQuestion };\n\nexport default QuestionCard;\n","export const isConnected = state => {\n  const {\n    server: { connections }\n  } = state;\n  return connections.length > 0;\n};\n\nexport const hasNextQuestion = state => {\n  const {\n    questionEditor: questions = [],\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return currentQuestionIdx + 1 < questions.length;\n};\n\nexport const hasPreviousQuestion = state => {\n  const {\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return !(currentQuestionIdx - 1 < 0);\n};\n","import React from \"react\";\nimport { Button, Spinner } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipForwardIcon from \"mdi-react/SkipForwardIcon\";\nimport {\n  toggleAcceptingAnswers,\n  sendCurrentQuestionToClients,\n  incrementQuestionIdx,\n  stopAcceptingConnections\n} from \"../actions/server\";\nimport { isConnected, hasNextQuestion } from \"../selectors/server\";\n\nconst mapStateToProps = state => ({\n  isConnected: isConnected(state),\n  hasNextQuestion: hasNextQuestion(state)\n});\n\nconst mapDispatchToProps = {\n  sendCurrentQuestionToClients,\n  toggleAcceptingAnswers,\n  stopAcceptingConnections,\n  incrementQuestionIdx\n};\n\nclass AskScreenContinueButton extends React.Component {\n  state = {\n    buttonPhase: 0\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.isConnected && state.buttonPhase === 0) {\n      return {\n        buttonPhase: 1\n      };\n    }\n    return null;\n  }\n\n  nextButtonPhase = () => {\n    const { buttonPhase } = this.state;\n\n    // Transition from 0 -> 1 must happen in getDerivedStateFromProps(), because it's based on clients\n    if (buttonPhase > 0) {\n      this.setState(prevState => ({\n        buttonPhase: (prevState.buttonPhase + 1) % 4\n      }));\n    }\n  };\n\n  render() {\n    const {\n      toggleAcceptingAnswers,\n      stopAcceptingConnections,\n      sendCurrentQuestionToClients,\n      incrementQuestionIdx,\n      hasNextQuestion\n    } = this.props;\n    const buttonStateMachine = {\n      // Waiting for clients, button disabled\n      0: {\n        text: (\n          <>\n            <Spinner size=\"sm\" /> Waiting for clients\n          </>\n        ),\n        color: \"primary\",\n        additionalButtonProps: {\n          outline: true,\n          disabled: true\n        }\n      },\n      // Clients connected, ready to send first question and accept answers\n      1: {\n        onClick: () => {\n          stopAcceptingConnections();\n          toggleAcceptingAnswers();\n          sendCurrentQuestionToClients();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start Quiz\n          </>\n        ),\n        color: \"primary\"\n      },\n      // Accepting answers\n      2: {\n        onClick: () => {\n          toggleAcceptingAnswers();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop Question\n          </>\n        ),\n        color: \"primary\"\n      },\n      // // Don't accept answers, waiting to show results\n      // 3: {\n      //   onClick: () => {\n      //     toggleShowVoteCount();\n      //     this.nextButtonPhase();\n      //   },\n      //   text: (\n      //     <>\n      //       <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} /> Show\n      //       Results\n      //     </>\n      //   ),\n      //   color: \"primary\"\n      // },\n      3: {\n        onClick: () => {\n          incrementQuestionIdx();\n          this.nextButtonPhase();\n        },\n        text: (\n          <>\n            <SkipForwardIcon style={{ paddingBottom: \"3px\" }} /> Next Question\n          </>\n        ),\n        color: \"secondary\",\n        additionalButtonProps: {\n          disabled: !hasNextQuestion\n        }\n      }\n    };\n\n    const { buttonPhase } = this.state;\n    const currentPhaseObj = buttonStateMachine[buttonPhase];\n    return (\n      <Button\n        color={currentPhaseObj.color}\n        outline={currentPhaseObj.outline}\n        block\n        onClick={currentPhaseObj.onClick}\n        {...currentPhaseObj &&\n          currentPhaseObj.additionalButtonProps &&\n          currentPhaseObj.additionalButtonProps}\n      >\n        {currentPhaseObj.text}\n      </Button>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AskScreenContinueButton);\n","export const getAnswerCountForCurrentQuestion = state => {\n  const {\n    server: { currentQuestionIdx },\n    registeredAnswers\n  } = state;\n  if (\n    registeredAnswers.length > 0 &&\n    typeof currentQuestionIdx !== \"undefined\"\n  ) {\n    return registeredAnswers[currentQuestionIdx].map(answer => answer.length);\n  }\n  return [];\n};\n\nexport const getReceivedAnswersCounter = state => {\n  const {\n    server: { connections = [] },\n    registeredAnswers\n  } = state;\n  const flatRegisteredAnswers = registeredAnswers.flat(2);\n  const distinctUsers = [...new Set(flatRegisteredAnswers)].length;\n\n  const connectionCount = connections.length;\n  if (connectionCount === 0) return null;\n  const percentageValue = Math.trunc((distinctUsers / connectionCount) * 100);\n  const percentageString = Number.isNaN(percentageValue)\n    ? \"\"\n    : `(${percentageValue}%)`;\n\n  return `${distinctUsers}/${connectionCount} ${percentageString}`;\n};\n","import React from \"react\";\nimport ChevronRightIcon from \"mdi-react/ChevronRightIcon\";\nimport ChevronLeftIcon from \"mdi-react/ChevronLeftIcon\";\n\nexport const ChevronLeft = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div\n      className=\"text-right align-middle\"\n      onClick={disabled ? null : onClick}\n    >\n      <ChevronLeftIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n\nexport const ChevronRight = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div className=\"text-left align-middle\" onClick={disabled ? null : onClick}>\n      <ChevronRightIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport AskScreenContinueButton from \"./AskScreenContinueButton\";\nimport { getCurrentQuestion } from \"../selectors/questions\";\nimport {\n  getAnswerCountForCurrentQuestion,\n  getReceivedAnswersCounter\n} from \"../selectors/answers\";\nimport { incrementQuestionIdx, decrementQuestionIdx } from \"../actions/server\";\nimport { ChevronRight, ChevronLeft } from \"../../shared/components/Chevron\";\nimport { hasPreviousQuestion, hasNextQuestion } from \"../selectors/server\";\n\nclass AskScreen extends React.Component {\n  state = {\n    showVoteCount: false\n  };\n\n  toggleShowVoteCount = () => {\n    this.setState(prevState => ({\n      showVoteCount: !prevState.showVoteCount\n    }));\n  };\n\n  render() {\n    const {\n      currentQuestion,\n      countedAnswers,\n      receivedAnswersCounter,\n      hasNextQuestion,\n      hasPreviousQuestion,\n      incrementQuestionIdx,\n      decrementQuestionIdx\n    } = this.props;\n    const { showVoteCount } = this.state;\n\n    return (\n      <Row className=\"justify-content-center\">\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronLeft\n            disabled={!hasPreviousQuestion}\n            onClick={() => decrementQuestionIdx()}\n          />\n        </Col>\n        <QuestionCard\n          question={currentQuestion}\n          countedAnswers={showVoteCount && countedAnswers}\n          isServer\n          disabled\n        >\n          <>\n            {receivedAnswersCounter && (\n              <div className=\"d-flex flex-row justify-content-between align-items-center mb-2\">\n                {/* <div className=\"d-flex flex-row justify-content-between\"> */}\n\n                <div className=\"text-muted\">\n                  {receivedAnswersCounter} users have answered\n                </div>\n\n                <Button\n                  size=\"sm\"\n                  outline={!showVoteCount}\n                  onClick={this.toggleShowVoteCount}\n                >\n                  <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                  {showVoteCount ? \"Hide\" : \"Show\"} Results\n                </Button>\n              </div>\n            )}\n\n            <AskScreenContinueButton />\n          </>\n        </QuestionCard>\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronRight\n            disabled={!hasNextQuestion}\n            onClick={() => incrementQuestionIdx()}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentQuestion: getCurrentQuestion(state),\n  countedAnswers: getAnswerCountForCurrentQuestion(state),\n  receivedAnswersCounter: getReceivedAnswersCounter(state),\n  hasPreviousQuestion: hasPreviousQuestion(state),\n  hasNextQuestion: hasNextQuestion(state)\n});\n\nconst mapDispatchToProps = {\n  incrementQuestionIdx,\n  decrementQuestionIdx\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n\nexport const updateQuestionIndexes = array =>\n  array.map((element, i) => ({ ...element, questionIdx: i }));\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS,\n  TOGGLE_ACCEPTING_CONNECTIONS\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestionIdx: 0,\n    acceptingAnswers: false,\n    acceptingConnections: true\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return {\n        ...state,\n        currentQuestionIdx:\n          action.payload.questionIdx < 0 ? 0 : action.payload.questionIdx\n      };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    case TOGGLE_ACCEPTING_CONNECTIONS:\n      return { ...state, acceptingConnections: !state.acceptingConnections };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { REGISTER_ANSWERS, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWERS: {\n      const { answerIdxArray, questionIdx, userId } = action.payload;\n\n      const registeredAnswers = changeInArray(state, questionIdx, question =>\n        question.map((answer, i) => {\n          if (answerIdxArray.includes(i)) {\n            return [...answer, userId];\n          }\n          return answer;\n        })\n      );\n\n      return registeredAnswers;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questions\";\nimport { server } from \"./server\";\nimport { registeredAnswers } from \"./answers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questions\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray,\n  updateQuestionIndexes\n} from \"../../shared/util/QuestionHelpers\";\n\nconst newQuestion = (idx = 0) => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  questionIdx: idx,\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\n// This is the selected question in the questionEditor, don't confuse with\n// selected question in server state\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const questionsCount = state.length;\n      deepClonedState.push(newQuestion(questionsCount));\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      const reindexedArray = updateQuestionIndexes(deepClonedState);\n\n      return reindexedArray;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport ConnectFormServerContainer from \"./ConnectFormServerContainer\";\nimport QuestionEditorContainer from \"./QuestionEditorContainer\";\nimport AskScreen from \"./AskScreen\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Route\n            exact\n            path=\"/server/create\"\n            component={ConnectFormServerContainer}\n          />\n          <Route\n            exact\n            path=\"/server/editor\"\n            component={QuestionEditorContainer}\n          />\n          <Route exact path=\"/server/ask\" component={AskScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\n// Client Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\n// TODO: This is probably unnecessary b/c PeerJS keeps its own connection object\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n\nexport function sendAnswers(answerIdxArray) {\n  return (dispatch, getState) => {\n    const {\n      client: { connection = null, currentQuestion = null }\n    } = getState();\n\n    if (\n      connection &&\n      currentQuestion &&\n      typeof answerIdxArray !== \"undefined\"\n    ) {\n      const msg = {\n        type: \"answer\",\n        payload: {\n          questionIdx: currentQuestion.questionIdx,\n          answerIdxArray,\n          userId: connection.provider.id\n        }\n      };\n      connection.send(msg);\n    }\n  };\n}\n\nexport function connectToServer() {\n  return async (dispatch, getState) => {\n    const {\n      client: { remoteServerId = null }\n    } = getState();\n\n    const peer = createPeer();\n\n    const dataHandler = data => {\n      const dataObj = JSON.parse(data);\n      const { type, payload } = dataObj;\n      Logger.info(\"Received Data: \", dataObj);\n      switch (type) {\n        case \"question\":\n          dispatch(setCurrentQuestion(payload));\n          break;\n\n        default:\n          Logger.error(\"ERROR: Client Data Handler Default Case\");\n      }\n    };\n\n    async function openAsync(connection) {\n      return new Promise((resolve, reject) => {\n        connection.on(\"open\", () => {\n          Logger.info(`Successfully connected to server`);\n          connection.on(\"data\", data => dataHandler(data));\n          resolve();\n        });\n        peer.on(\"error\", err => reject(err));\n      });\n    }\n\n    dispatch(setPeer(peer));\n\n    const connection = peer.connect(\n      remoteServerId,\n      { reliable: false }\n    );\n    dispatch(addConnection(connection));\n    dispatch(setConnectionStatus(1));\n    await openAsync(connection);\n    dispatch(setConnectionStatus(2));\n\n    // connection.on(\"open\", () => {\n    //   Logger.info(`Successfully connected to server ${connection.peer}`);\n    //   dispatch(setConnectionStatus(2));\n    //   connection.on(\"data\", data => dataHandler(data));\n    // });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\n\nimport { setRemoteServerId, connectToServer } from \"../actions/client\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: () => dispatch(connectToServer())\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId,\n  connectionStatus: state.connection.status\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Spinner } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, text } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex flex-column justify-content-center\">\n          <div style={{ textAlign: \"center\" }}>\n            <Spinner size=\"lg\" />\n          </div>\n          {text && (\n            <div\n              style={{\n                textAlign: \"center\"\n              }}\n              className=\"mt-4 text-muted\"\n            >\n              {text}\n            </div>\n          )}\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\nimport { TQuestion, DQuestion } from \"../../shared/types\";\nimport { sendAnswers } from \"../actions/client\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSendAnswers: answerIdxArray => dispatch(sendAnswers(answerIdxArray))\n});\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswersIdx: []\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n      this.initSelectedAnswers(currentQuestion.answers.length);\n    }\n  }\n\n  toggleSelectedAnswers = answerIdx => {\n    this.setState(prevState => {\n      const { selectedAnswersIdx } = prevState;\n      return {\n        ...prevState,\n        selectedAnswersIdx: changeInArray(\n          selectedAnswersIdx,\n          answerIdx,\n          e => !e\n        )\n      };\n    });\n  };\n\n  toggleDisabled = () => {\n    this.setState(prevState => ({\n      disabled: !prevState.disabled\n    }));\n  };\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  initSelectedAnswers(answerCount) {\n    this.setState({ selectedAnswersIdx: Array(answerCount).fill(false) });\n  }\n\n  render() {\n    const { currentQuestion, onSendAnswers } = this.props;\n    const { disabled, selectedAnswersIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    const commonProps = {\n      question: currentQuestion,\n      disabled,\n      selectedAnswersIdx,\n      toggleSelectedAnswers: this.toggleSelectedAnswers,\n      toggleDisabled: this.toggleDisabled,\n      onSendAnswers\n    };\n    return (\n      <Row className=\"justify-content-center\">\n        {hasQuestion ? (\n          <QuestionCard {...commonProps} />\n        ) : (\n          <SpinnerCard\n            title=\"Waiting For Question From Server\"\n            text=\"You're connected to the server, but the Quiz Session has not been started yet.\"\n          />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectFormClientContainer from \"./ConnectFormClientContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectFormClientContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport raw from \"raw.macro\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow-none\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>\n              <div\n                className=\"markdown-body\"\n                style={{\n                  fontFamily: \"IBM Plex Sans\"\n                }}\n                // eslint-disable-next-line\n                dangerouslySetInnerHTML={{\n                  __html: snarkdown(raw(\"../public/README.MD\"))\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-5 mx-auto text-center mt-5\">\n      <h1 className=\"display-3 font-weight-bold text-dark\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              size=\"lg\"\n              block\n              outline\n              color=\"primary\"\n            >\n              Join Quiz Session\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              size=\"lg\"\n              block\n              outline\n              color=\"primary\"\n            >\n              Create Quiz Session\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}