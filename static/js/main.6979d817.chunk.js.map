{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","shared/util/Logger.js","shared/actions/connection.js","server/actions/answers.js","server/selectors/questions.js","shared/util/NetworkHelpers.js","server/actions/server.js","server/components/ConnectFormServerContainer.js","shared/components/InfoPopoverIcon.js","server/components/QuestionEditorAnswerInput.js","shared/components/CodemirrorWrapper.js","server/components/QuillWrapper.js","server/components/QuestionEditorContent.js","shared/components/SingleFileInput.js","server/components/DropboxChooser.js","server/components/QuestionEditorListDropdown.js","server/components/QuestionEditorList.js","shared/util/FileHelpers.js","shared/types.js","server/components/QuestionEditor.js","shared/util/QuestionsSchema.js","server/actions/questions.js","server/components/QuestionEditorContainer.js","shared/components/QuestionCard.js","server/selectors/server.js","server/components/AskScreenContinueButton.js","server/components/AskScreenContinueButtonContainer.js","shared/components/Chevron.js","server/components/TerminalWindow.js","server/actions/terminal.js","server/components/TerminalWindowContainer.js","server/components/ExecuteCodeButton.js","server/actions/doppio.js","server/components/ExecuteCodeButtonContainer.js","server/components/CodeExecutionArea.js","server/components/AskScreen.js","server/selectors/answers.js","server/components/AskScreenContainer.js","shared/util/QuestionHelpers.js","server/reducers/server.js","server/reducers/terminal.js","server/reducers/answers.js","shared/reducers/connection.js","server/reducers/main.js","server/reducers/questions.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectFormClientContainer.js","shared/components/SpinnerCard.js","client/selectors/client.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","shared/components/SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js","../node_modules/peerjs/dist sync"],"names":["Footer","react_default","a","createElement","className","Row","Col","href","GithubCircleIcon_default","copyToClipboard","content","tempInput","document","style","value","body","appendChild","select","execCommand","removeChild","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleModal","state","dropdownOpen","showModal","setState","prevState","_this$props","status","isServer","numberOfClients","ownServerId","_this$state","client","server","concat","InputGroup","includes","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","divider","cursor","onClick","QrcodeIcon_default","Modal","size","ModalHeader","ModalBody","lib_default","window","location","origin","width","height","renderAs","queryCommandSupported","ClipboardTextIcon_default","encodeURI","LinkIcon_default","Input","disabled","React","Component","defaultProps","Header","isClient","Fragment","Navbar","expand","Container","NavbarBrand","ConnectionIndicator_ConnectionIndicator","NavLink","tag","Link","to","connect","connection","peer","keys","connections","length","components_Header","assign","DefaultCard","title","text","children","badge","footer","md","Card","CardHeader","Badge","color","pill","CardBody","CardText","CardFooter","ConnectForm","inputIsInvalid","isWaitingForServer","setWaitingForServer","objectSpread","validateServerId","id","isValid","test","_this2","match","onChangeServerId","onClickConnect","serverId","buttonText","history","helpText","validationError","connectionStatus","params","Redirect","components_DefaultCard","Form","FormGroup","row","bsSize","type","invalid","onChange","e","newId","target","FormFeedback","FormText","Button","Spinner","undefined","Logger","msg","_len","arguments","data","Array","_key","emitMessage","_len2","_key2","_len3","_key3","_len4","_key4","msgType","console","SET_PEER","SET_CONNECTION_STATUS","setConnectionStatus","newStatus","payload","setPeer","REGISTER_ANSWERS","registerAnswers","questionIdx","answerIdxArray","userId","dispatch","getState","acceptingAnswers","INIT_ANSWERS","initAnswers","emptyAnswerArray","questionEditor","map","question","answers","array","getCurrentQuestion","questions","currentQuestionIdx","progress","getProgress","getCurrentQuestionNoSolution","currentQuestion","answer","isCorrect","objectWithoutProperties","createPeer","ownId","_process$env","process","REACT_APP_PEERJS_SERVER","secure","REACT_APP_PEERJS_SECURE","debug","REACT_APP_PEERJS_DEBUG","Peer","host","parseInt","ADD_CONNECTION","addConnection","SET_SERVER_ID","setServerId","SET_CURRENT_QUESTION_IDX","setCurrentQuestionIdx","SET_ASK_SCREEN_STATE","resetAskScreenState","newState","incrementQuestionIdx","_getState3$server$cur","TOGGLE_ACCEPTING_ANSWERS","toggleAcceptingAnswers","TOGGLE_BUSY","toggleBusy","TOGGLE_ACCEPTING_CONNECTIONS","NEXT_ASK_SCREEN_STATE","nextAskScreenState","_getState6$server","currentAskScreenState","0","1","_getState5","_getState5$connection","acceptingConnections","disconnect","currentQuestionNoSolution","info","forEach","send","JSON","stringify","error","2","3","staticProps","withRouter","newServerId","_ref","asyncToGenerator","regenerator_default","mark","_callee2","_getState7","_getState7$server$own","openAsync","_openAsync","dataHandler","wrap","_context2","prev","next","_callee","_context","abrupt","Promise","resolve","reject","on","err","stop","apply","_x3","sent","_x","_x2","components_ConnectForm","InfoPopoverIcon","placement","InformationIcon_default","marginRight","UncontrolledPopover","trigger","PopoverBody","QuestionEditorAnswerInput","isHovered","number","mode","selectedQuestion","isCorrectAnswer","onEditAnswerText","onSetCorrectSingleAnswer","onSetCorrectMultiAnswer","onDeleteAnswer","dragHandleProps","commonProps","onMouseEnter","onMouseLeave","InputGroupAddon","InputGroupText","QuestionEditorAnswerInput_RadioInput","onSetCorrectAnswer","QuestionEditorAnswerInput_CheckboxInput","DeleteIcon_default","DragIcon_default","RadioInput","addon","checked","name","CheckboxInput","CodemirrorWrapper","onEditContent","_props$readOnly","readOnly","react_codemirror2","options","lineNumbers","theme","viewportMargin","Infinity","onBeforeChange","editor","QuillWrapper","formats","modules","toolbar","list","font","syntax","highlight","hljs","highlightAuto","handleChange","newValue","registerLanguage","java","configure","languages","react_quill_lib_default","QuestionEditorContent","toggleCodeSnippetVisibility","codeSnippetVisible","Boolean","code","onEditQuestionText","onEditQuestionCode","onEditQuestionMode","onEditQuestionType","onAddAnswer","onSortAnswer","onDeleteQuestion","form","Label","sm","components_InfoPopoverIcon","ButtonGroup","outline","active","components_QuillWrapper","components_CodemirrorWrapper","block","MonitorIcon_default","react_beautiful_dnd_esm","onDragEnd","result","destination","source","droppableId","index","inde","providedDroppable","droppableProps","ref","innerRef","i","draggableId","key","providedDraggable","draggableProps","components_QuestionEditorAnswerInput","placeholder","PlaylistPlusIcon_default","CancelIcon_default","SingleFileInput","handleSubmit","event","onSelectFile","closeDropdown","preventDefault","fileInput","current","files","createRef","display","cloneElement","click","scriptLoadingStarted","DropboxChooser","onChoose","Dropbox","appKey","isDropboxReady","loadScript","attrs","data-app-key","success","cancel","linkType","multiselect","extensions","choose","QuestionEditorListDropdown","onUploadFile","onUploadDropbox","ButtonDropdown","UploadIcon_default","components_SingleFileInput","file","FileUploadIcon_default","DropboxChooser_DropboxChooser","fetch","link","then","response","DropboxIcon_default","QuestionEditorList","onSelectQuestion","onSortQuestion","onAddQuestion","onDownloadFile","ListGroup","flush","ListGroupItem","action","limit","after","words","trim","split","slice","join","truncate","html","DOMParser","parseFromString","textContent","ListGroupItemText","AddCircleOutlineIcon_default","paddingBottom","components_QuestionEditorListDropdown","DownloadIcon_default","downloadFile","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","getFormattedDate","remove","saveToStorage","localStorage","setItem","DQuestion","PropTypes","string","shape","arrayOf","object","QuestionEditor","loadQuestionsFromStorage","addQuestion","selectQuestion","editCurrentQuestionText","editCurrentQuestionCode","editQuestionType","editQuestionMode","deleteQuestion","addAnswer","editAnswerText","deleteAnswer","setCorrectSingleAnswer","setCorrectMultiAnswer","sortQuestion","sortAnswer","saveFileToStorage","validateAndSaveToStorage","components_QuestionEditorList","components_QuestionEditorContent","xs","push","ContentSaveIcon_default","schema","$schema","$id","items","required","properties","additionalProperties","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","EDIT_QUESTION_CODE","EDIT_QUESTION_MODE","newMode","oldMode","EDIT_QUESTION_TYPE","newType","oldType","DELETE_QUESTION","LOAD_QUESTIONS","loadQuestions","newQuestions","getItem","parse","tv4","validate","QuestionSchema","reader","FileReader","onload","readAsText","SORT_QUESTION","oldQuestionIdx","newQuestionIdx","SET_CORRECT_SINGLE_ANSWER","answerIdx","SET_CORRECT_MULTI_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","SORT_ANSWER","oldAnswerIdx","newAnswerIdx","mapDispatchToProps","questionEditorActions","answerActions","QuestionCard","selectedAnswersArray","filter","querySelector","highlightBlock","selectedAnswersIdx","countedAnswers","toggleSelectedAnswers","onSendAnswers","toggleDisabled","highlightSolutions","selectedAnswers","convertSelectedAnswersArray","dangerouslySetInnerHTML","__html","selectedAnswer","lineHeight","log","isConnected","hasNextQuestion","_state$questionEditor","_state$server$current","hasPreviousQuestion","_state$server$current2","AskScreenContinueButton","currentPhaseObj","additionalButtonProps","PlayIcon_default","PauseIcon_default","SkipNextIcon_default","ChevronLeft","ChevronLeftIcon_default","ChevronRight","ChevronRightIcon_default","TerminalWindow","terminalRef","scrollToBottom","scrollTop","scrollHeight","showTerminal","messages","overflow","whiteSpace","ADD_LINE","addLine","line","addNewLine","RESET_TERMINAL","resetTerminal","terminal","ExecuteCodeButton","runCurrentCode","CodeTagsIcon_default","Doppio","require","BrowserFS","findPublicStaticClass","exec","writeJavaSourceFileAsync","fs","writeFile","setupBrowserFs","_ref2","install","/tmp","/sys","_ref3","_callee3","_getState","classname","_window2","_process","_context3","stdout","listenerCount","toString","stderr","VM","JVM","doppioHomePath","classpath","jvmObject","runClass","exitCode","_x4","CodeExecutionArea","onClickExecute","ExecuteCodeButtonContainer","TerminalWindowContainer","AskScreen","toggleShowVoteCount","showVoteCount","toggleShowTerminal","toggleHighlightSolutions","initialState","prevQuestion","receivedAnswersCounter","decrementQuestionIdx","isBusy","questionHasCodeSnippet","Chevron_ChevronLeft","components_QuestionCard","CheckAllIcon_default","FormatListNumberedIcon_default","AskScreenContinueButtonContainer","components_CodeExecutionArea","Chevron_ChevronRight","getAnswerCountForCurrentQuestion","registeredAnswers","getReceivedAnswersCounter","_state$server","_state$server$connect","_state$registeredAnsw","connectionCount","flatRegisteredAnswers","flat","distinctUsers","toConsumableArray","Set","percentageValue","Math","trunc","percentageString","Number","isNaN","_getState4$server$cur","changeInArray","changer","item","reorderArray","oldIndex","newIndex","splice","_action$payload","combineReducers","deepClonedState","questionsCount","idx","nanoid","newQuestion","_action$payload2","_action$payload3","firstAnswerFound","_action$payload4","_action$payload5","q","_action$payload6","_action$payload7","modAnswers","_action$payload8","_action$payload9","element","_action$payload10","serverStore","createStore","mainServerReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","store","ServerHeaderContainer","Switch","Route","exact","path","component","ConnectFormServerContainer","AskScreenContainer","QuestionEditorContainer","render","components_Footer","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","_getState2","_getState2$client$rem","dataObj","reliable","SpinnerCard","Helmet","textAlign","open","AnswerScreen","prevProps","resetState","initSelectedAnswers","answerCount","fill","hasQuestion","components_SpinnerCard","_getState$client","_getState$client$conn","_getState$client$curr","provider","sendAnswers","clientStore","mainClientReducer","Client","ClientHeaderContainer","ConnectFormClientContainer","About","fontFamily","snarkdown","SelectBox","emoji","role","aria-label","fontSize","StartPage","CardDeck","components_SelectBox","App","BrowserRouter","basename","titleTemplate","defaultTitle","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","Error","module","exports"],"mappings":"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","file":"static/js/main.6979d817.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nconst Footer = () => (\n  <div>\n    <hr />\n    <footer className=\"container\">\n      <Row>\n        <Col>\n          <a className=\"font-weight-light text-muted\" href=\"/about\">\n            &copy; 2018 Moritz Stückler – HAW Hamburg\n          </a>\n        </Col>\n        <Col className=\"text-right\">\n          <a href=\"https://github.com/pReya/weclare/\">\n            <GithubCircleIcon />\n          </a>\n        </Col>\n      </Row>\n    </footer>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\nimport QRCode from \"qrcode.react\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      showModal: false\n    };\n  }\n\n  toggleDropdown() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ showModal: !prevState.showModal }));\n  }\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen, showModal } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropdown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share with client</DropdownItem>\n              <DropdownItem divider />\n\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={this.toggleModal}\n              >\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              <Modal isOpen={showModal} toggle={this.toggleModal} size=\"lg\">\n                <ModalHeader toggle={this.toggleModal}>\n                  Share QR Code\n                </ModalHeader>\n                <ModalBody>\n                  <QRCode\n                    value={`${\n                      window.location.origin\n                    }/client/connect/${ownServerId}`}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    renderAs=\"svg\"\n                  />\n                </ModalBody>\n              </Modal>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyToClipboard(\n                    encodeURI(\n                      `${window.location.origin}/client/connect/${ownServerId}`\n                    )\n                  );\n                }}\n              >\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Container, Navbar, NavbarBrand, NavLink } from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-none d-flex flex-row justify-content-between bg-white py-3\"\n      >\n        <Container>\n          <NavbarBrand className=\"w-50\" href=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <NavLink className=\"w-50 text-right\" tag={Link} to=\"/about\">\n            About\n          </NavLink>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardText,\n  Col,\n  Badge\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge, footer } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n        {footer && <CardFooter>{footer}</CardFooter>}\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null,\n  footer: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport {\n  Form,\n  FormText,\n  FormFeedback,\n  FormGroup,\n  Button,\n  Input,\n  Col,\n  Spinner\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport { Redirect } from \"react-router-dom\";\nimport DefaultCard from \"./DefaultCard\";\n\nclass ConnectForm extends React.Component {\n  state = {\n    inputIsInvalid: false,\n    isWaitingForServer: false\n  };\n\n  setWaitingForServer = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      isWaitingForServer: true\n    }));\n  };\n\n  validateServerId = id => {\n    const serverIdRex = /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/;\n    const isValid = !id || serverIdRex.test(id);\n    this.setState(prevState => ({ ...prevState, inputIsInvalid: !isValid }));\n  };\n\n  render() {\n    const {\n      match,\n      onChangeServerId,\n      onClickConnect,\n      serverId,\n      title,\n      text,\n      buttonText,\n      history,\n      location,\n      helpText,\n      validationError,\n      connectionStatus\n    } = this.props;\n\n    const { inputIsInvalid, isWaitingForServer } = this.state;\n\n    // React Router: If URL has serverID\n    if (match && match.params && match.params.serverId) {\n      onChangeServerId(match.params.serverId);\n    }\n\n    if (history && location && connectionStatus === 1) {\n      return <Redirect to={location} />;\n    }\n\n    return (\n      <DefaultCard title={title} text={text}>\n        <Form>\n          <FormGroup row className=\"form-row mb-1\">\n            <Col>\n              <Input\n                bsSize=\"lg\"\n                id=\"serverId\"\n                type=\"text\"\n                value={serverId}\n                disabled={isWaitingForServer}\n                invalid={inputIsInvalid}\n                onChange={e => {\n                  const newId = e.target.value;\n                  this.validateServerId(newId);\n                  onChangeServerId(newId);\n                }}\n              />\n              {validationError && (\n                <FormFeedback>{validationError}</FormFeedback>\n              )}\n              {helpText && <FormText>{helpText}</FormText>}\n            </Col>\n            <Col md={3}>\n              <Button\n                type=\"button\"\n                id=\"connect\"\n                className=\"btn-block\"\n                size=\"lg\"\n                disabled={isWaitingForServer || inputIsInvalid}\n                onClick={() => {\n                  onClickConnect(serverId);\n                  this.setWaitingForServer();\n                }}\n              >\n                {isWaitingForServer ? (\n                  <>\n                    <Spinner size=\"sm\" color=\"info\" /> Waiting...\n                  </>\n                ) : (\n                  buttonText\n                )}\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </DefaultCard>\n    );\n  }\n}\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  validationError: PropTypes.string,\n  inputIsInvalid: PropTypes.bool,\n  match: ReactRouterPropTypes.match\n};\n\nConnectForm.defaultProps = {\n  helpText: undefined,\n  match: undefined,\n  buttonText: \"Connect\",\n  validationError: undefined,\n  inputIsInvalid: false\n};\n\nexport default ConnectForm;\n","class Logger {\n  static info(msg, ...data) {\n    Logger.emitMessage(\"info\", msg, data);\n  }\n\n  static error(msg, ...data) {\n    Logger.emitMessage(\"error\", msg, data);\n  }\n\n  static warn(msg, ...data) {\n    Logger.emitMessage(\"warn\", msg, data);\n  }\n\n  static debug(msg, ...data) {\n    Logger.emitMessage(\"debug\", msg, data);\n  }\n\n  static emitMessage(msgType, msg, data) {\n    if (data.length > 0) {\n      console[msgType](msg, data);\n    } else {\n      console[msgType](msg);\n    }\n  }\n}\n\nexport default Logger;\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setConnectionStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","// Server Answer Actions\nexport const REGISTER_ANSWERS = \"REGISTER_ANSWERS\";\nexport function registerAnswers(questionIdx, answerIdxArray, userId) {\n  return (dispatch, getState) => {\n    const { server } = getState();\n    if (server.acceptingAnswers) {\n      dispatch({\n        type: REGISTER_ANSWERS,\n        payload: {\n          questionIdx,\n          answerIdxArray,\n          userId\n        }\n      });\n    }\n  };\n}\n\nexport const INIT_ANSWERS = \"INIT_ANSWERS\";\nexport function initAnswers() {\n  return (dispatch, getState) => {\n    const { questionEditor } = getState();\n    const emptyAnswerArray = questionEditor.map(question =>\n      question.answers.map(() => [])\n    );\n    dispatch({\n      type: INIT_ANSWERS,\n      payload: {\n        array: emptyAnswerArray\n      }\n    });\n  };\n}\n","export const getProgress = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n\n  if (questions.length > 0 && typeof currentQuestionIdx === \"number\") {\n    return `${currentQuestionIdx + 1}/${questions.length}`;\n  }\n  return \"0/0\";\n};\n\nexport const getCurrentQuestion = state => {\n  const {\n    questionEditor: questions,\n    server: { currentQuestionIdx }\n  } = state;\n  const progress = getProgress(state);\n\n  if (questions.length > 0 && typeof currentQuestionIdx === \"number\") {\n    return { ...questions[currentQuestionIdx], progress };\n  }\n\n  return undefined;\n};\n\nexport const getCurrentQuestionNoSolution = state => {\n  const currentQuestion = getCurrentQuestion(state);\n\n  return {\n    ...currentQuestion,\n    answers: currentQuestion.answers.map(answer => {\n      const { isCorrect, ...answerNoSolution } = answer;\n      return answerNoSolution;\n    })\n  };\n};\n","import Peer from \"peerjs\";\n\nconst createPeer = ownId => {\n  const {\n    REACT_APP_PEERJS_SERVER: server,\n    REACT_APP_PEERJS_SECURE: secure,\n    REACT_APP_PEERJS_DEBUG: debug\n  } = process.env;\n\n  return new Peer(ownId, {\n    host: server,\n    secure: secure === \"true\",\n    debug: parseInt(debug, 10)\n  });\n};\n\nexport default createPeer;\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport { registerAnswers } from \"./answers\";\nimport { getCurrentQuestionNoSolution } from \"../selectors/questions\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: SET_CURRENT_QUESTION_IDX,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function sendCurrentQuestionToClients() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    const currentQuestionNoSolution = getCurrentQuestionNoSolution(getState());\n\n    const msg = {\n      type: \"question\",\n      payload: currentQuestionNoSolution\n    };\n\n    if (connections.length > 0 && currentQuestionNoSolution) {\n      Logger.info(\"Sending question to clients\", currentQuestionNoSolution);\n      connections.forEach(connection => connection.send(JSON.stringify(msg)));\n    } else {\n      Logger.error(\"Can't send question to clients\");\n    }\n  };\n}\n\nexport const SET_ASK_SCREEN_STATE = \"SET_ASK_SCREEN_STATE\";\nexport function setAskScreenState(newState) {\n  return {\n    type: SET_ASK_SCREEN_STATE,\n    payload: {\n      newState\n    }\n  };\n}\n\nexport function resetAskScreenState() {\n  return (dispatch, getState) => {\n    const {\n      server: { connections }\n    } = getState();\n\n    if (connections.length > 0) {\n      dispatch({\n        type: SET_ASK_SCREEN_STATE,\n        payload: {\n          newState: 1\n        }\n      });\n    } else {\n      dispatch({\n        type: SET_ASK_SCREEN_STATE,\n        payload: {\n          newState: 0\n        }\n      });\n    }\n  };\n}\n\nexport function incrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx + 1));\n    dispatch(resetAskScreenState());\n  };\n}\n\nexport function decrementQuestionIdx() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentQuestionIdx = 0 }\n    } = getState();\n    dispatch(setCurrentQuestionIdx(currentQuestionIdx - 1));\n    dispatch(resetAskScreenState());\n  };\n}\n\nexport const TOGGLE_ACCEPTING_ANSWERS = \"TOGGLE_ACCEPTING_ANSWERS\";\nexport function toggleAcceptingAnswers() {\n  return {\n    type: TOGGLE_ACCEPTING_ANSWERS\n  };\n}\n\nexport const TOGGLE_BUSY = \"TOGGLE_BUSY\";\nexport function toggleBusy() {\n  return {\n    type: TOGGLE_BUSY\n  };\n}\n\nexport const TOGGLE_ACCEPTING_CONNECTIONS = \"TOGGLE_ACCEPTING_CONNECTIONS\";\nexport function stopAcceptingConnections() {\n  return (dispatch, getState) => {\n    const {\n      connection: { peer = null },\n      server: { acceptingConnections }\n    } = getState();\n\n    if (acceptingConnections) {\n      dispatch({\n        type: TOGGLE_ACCEPTING_CONNECTIONS\n      });\n      peer.disconnect();\n    }\n  };\n}\n\nexport const NEXT_ASK_SCREEN_STATE = \"NEXT_ASK_SCREEN_STATE\";\nexport function nextAskScreenState() {\n  return (dispatch, getState) => {\n    const {\n      server: { currentAskScreenState, connections }\n    } = getState();\n\n    const actions = {\n      // Waiting for clients, button disabled\n      0: () => {\n        if (connections.length > 0) {\n          dispatch({\n            type: NEXT_ASK_SCREEN_STATE\n          });\n        }\n      },\n      // Clients connected, ready to send first question and accept answers\n      1: () => {\n        dispatch(stopAcceptingConnections());\n        dispatch(toggleAcceptingAnswers());\n        dispatch(sendCurrentQuestionToClients());\n        dispatch({\n          type: NEXT_ASK_SCREEN_STATE\n        });\n      },\n      // Stop accepting Answers\n      2: () => {\n        dispatch(toggleAcceptingAnswers());\n        dispatch({\n          type: NEXT_ASK_SCREEN_STATE\n        });\n      },\n      // Next question\n      3: () => {\n        dispatch(incrementQuestionIdx());\n      }\n    };\n\n    // Run transition actions\n    actions[currentAskScreenState]();\n  };\n}\n\nexport function startServer() {\n  return async (dispatch, getState) => {\n    const {\n      server: { ownServerId = null }\n    } = getState();\n\n    const peer = createPeer(ownServerId);\n\n    async function openAsync(peer) {\n      return new Promise((resolve, reject) => {\n        peer.on(\"open\", id => {\n          Logger.info(`Successfully created peer with ID \"${id}\"`);\n          resolve(id);\n        });\n        peer.on(\"error\", err => reject(err));\n      });\n    }\n\n    const dataHandler = data => {\n      const { type, payload } = data;\n      Logger.info(\"Received Data: \", data);\n      switch (type) {\n        case \"answer\":\n          dispatch(\n            registerAnswers(\n              payload.questionIdx,\n              payload.answerIdxArray,\n              payload.userId\n            )\n          );\n          break;\n        default:\n          Logger.error(\"dataHandler Switch case default reached\");\n      }\n    };\n\n    dispatch(setPeer(peer));\n\n    const id = await openAsync(peer);\n    dispatch(setConnectionStatus(1));\n    dispatch(setServerId(id));\n\n    peer.on(\"connection\", connection => {\n      Logger.info(\"New client connected with id: \", connection.peer);\n      connection.on(\"data\", data => dataHandler(data));\n      dispatch(setConnectionStatus(2));\n      dispatch(addConnection(connection));\n      dispatch(nextAskScreenState());\n    });\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerId, startServer } from \"../actions/server\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: () => {\n    dispatch(startServer());\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId,\n  connectionStatus: state.connection.status\n});\n\nconst staticProps = {\n  title: \"Choose a Server ID\",\n  text:\n    \"Please pick a server ID that uniquely identifies your quiz session (e.g. 'algorithms_2_2018') or leave it empty to generate a random ID.\",\n  buttonText: \"Create\",\n  location: \"/server/ask\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport InformationIcon from \"mdi-react/InformationIcon\";\nimport { UncontrolledPopover, PopoverBody } from \"reactstrap\";\n\nfunction InfoPopoverIcon(props) {\n  const { id, text, placement } = props;\n\n  return (\n    <>\n      <InformationIcon\n        style={{ marginRight: \"10px\" }}\n        size={20}\n        color=\"#8a817c\"\n        id={id}\n      />\n      <UncontrolledPopover placement={placement} target={id} trigger=\"hover\">\n        <PopoverBody>{text}</PopoverBody>\n      </UncontrolledPopover>\n    </>\n  );\n}\n\nexport default InfoPopoverIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport PencilIcon from \"mdi-react/PencilIcon\";\n\nclass QuestionEditorAnswerInput extends React.Component {\n  state = {\n    isHovered: false\n  };\n\n  render() {\n    const {\n      answer,\n      number,\n      mode,\n      selectedQuestion,\n      isCorrectAnswer,\n      onEditAnswerText,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      dragHandleProps,\n      disabled\n    } = this.props;\n    const { isHovered } = this.state;\n\n    const commonProps = {\n      isCorrectAnswer,\n      selectedQuestion,\n      number,\n      disabled\n    };\n\n    return (\n      <>\n        <span className=\"invisible\" {...dragHandleProps} />\n        <InputGroup\n          className=\"mb-2\"\n          onMouseEnter={() => this.setState({ isHovered: true })}\n          onMouseLeave={() => this.setState({ isHovered: false })}\n        >\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>\n              {mode === \"single\" ? (\n                <RadioInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectSingleAnswer(selectedQuestion, number);\n                  }}\n                />\n              ) : (\n                <CheckboxInput\n                  {...commonProps}\n                  onSetCorrectAnswer={() => {\n                    onSetCorrectMultiAnswer(selectedQuestion, number);\n                  }}\n                />\n              )}\n            </InputGroupText>\n          </InputGroupAddon>\n          <Input value={answer} onChange={onEditAnswerText} />\n\n          {isHovered && (\n            <InputGroupAddon addonType=\"append\">\n              {/* <InputGroupText className=\"pointerCursor\">\n                <PencilIcon />\n              </InputGroupText> */}\n              <InputGroupText\n                className=\"pointerCursor\"\n                onClick={() => {\n                  onDeleteAnswer(selectedQuestion, number);\n                }}\n              >\n                <DeleteIcon />\n              </InputGroupText>\n              <InputGroupText className=\"pointerCursor\" {...dragHandleProps}>\n                <DragIcon />\n              </InputGroupText>\n            </InputGroupAddon>\n          )}\n        </InputGroup>\n      </>\n    );\n  }\n}\n\nQuestionEditorAnswerInput.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorAnswerInput;\n\nconst RadioInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"radio\"\n      name=\"answer\"\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nRadioInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nRadioInput.defaultProps = {\n  disabled: false\n};\n\nconst CheckboxInput = props => {\n  const { isCorrectAnswer, number, onSetCorrectAnswer, disabled } = props;\n  return (\n    <Input\n      addon\n      checked={isCorrectAnswer}\n      type=\"checkbox\"\n      name={`answer-${number}`}\n      onChange={onSetCorrectAnswer}\n      disabled={disabled}\n    />\n  );\n};\n\nCheckboxInput.propTypes = {\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nCheckboxInput.defaultProps = {\n  disabled: false\n};\n","import React from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport PropTypes from \"prop-types\";\nimport \"codemirror/theme/eclipse.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/clike/clike\";\n\nconst CodemirrorWrapper = props => {\n  const { content, onEditContent, readOnly = false } = props;\n\n  return (\n    <CodeMirror\n      className=\"border rounded overflow-hidden mb-4\"\n      options={{\n        readOnly,\n        lineNumbers: true,\n        theme: \"eclipse\",\n        mode: \"text/x-java\",\n        viewportMargin: Infinity\n      }}\n      value={content}\n      onBeforeChange={(editor, data, value) => {\n        onEditContent(value);\n      }}\n    />\n  );\n};\n\nCodemirrorWrapper.propTypes = {\n  content: PropTypes.string,\n  onEditContent: PropTypes.func,\n  readOnly: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\n\nCodemirrorWrapper.defaultProps = {\n  content: \"\",\n  onEditContent: () => null,\n  readOnly: false\n};\n\nexport default CodemirrorWrapper;\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"../../shared/scss/quill.scss\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport java from \"highlight.js/lib/languages/java\";\nimport ReactQuill from \"react-quill\";\n\nclass QuillWrapper extends React.Component {\n  formats = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"code-block\",\n    \"code\",\n    \"list\",\n    \"link\",\n    \"font\"\n  ];\n\n  modules = {\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\"],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\"],\n      [\"code-block\"],\n      [\"clean\"],\n      [{ font: [] }]\n    ],\n    syntax: {\n      highlight: text => hljs.highlightAuto(text).value\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    hljs.registerLanguage(\"java\", java);\n    hljs.configure({ languages: [\"java\"] });\n  }\n\n  handleChange = newValue => {\n    const { onEditContent } = this.props;\n    onEditContent(newValue);\n  };\n\n  render() {\n    const { content } = this.props;\n\n    return (\n      <ReactQuill\n        className=\"mb-4\"\n        id=\"question\"\n        value={content}\n        formats={this.formats}\n        modules={this.modules}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default QuillWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport PlaylistPlusIcon from \"mdi-react/PlaylistPlusIcon\";\nimport MonitorIcon from \"mdi-react/MonitorIcon\";\nimport CancelIcon from \"mdi-react/CancelIcon\";\nimport DeleteIcon from \"mdi-react/DeleteIcon\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup,\n  Label,\n  Row\n} from \"reactstrap\";\nimport InfoPopoverIcon from \"../../shared/components/InfoPopoverIcon\";\nimport QuestionEditorAnswerInput from \"./QuestionEditorAnswerInput\";\nimport CodemirrorWrapper from \"../../shared/components/CodemirrorWrapper\";\nimport QuillWrapper from \"./QuillWrapper\";\n\nclass QuestionEditorContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeSnippetVisible: Boolean(props.question.code)\n    };\n  }\n\n  toggleCodeSnippetVisibility = () => {\n    this.setState(prevState => ({\n      codeSnippetVisible: !prevState.codeSnippetVisible\n    }));\n  };\n\n  render() {\n    const {\n      question,\n      selectedQuestion,\n      onEditAnswerText,\n      onEditQuestionText,\n      onEditQuestionCode,\n      onEditQuestionMode,\n      onEditQuestionType,\n      onAddAnswer,\n      onSortAnswer,\n      onSetCorrectSingleAnswer,\n      onSetCorrectMultiAnswer,\n      onDeleteAnswer,\n      onDeleteQuestion\n    } = this.props;\n\n    const { codeSnippetVisible } = this.state;\n\n    return (\n      <Card className=\"shadow-none\">\n        <CardHeader>\n          <h5 className=\"my-0\">Edit Question</h5>\n        </CardHeader>\n        <CardBody>\n          {selectedQuestion != null ? (\n            <Form>\n              <FormGroup>\n                <Row form className=\"justify-content-between\">\n                  <Label sm=\"auto\" className=\"font-weight-bold\">\n                    Question Text\n                  </Label>\n                  <Col sm=\"auto\">\n                    <InfoPopoverIcon\n                      text={\n                        <>\n                          A <strong>question</strong> does have a set of correct\n                          answers. A <strong>vote</strong> does not have any\n                          correct answers. It will just show the distribution of\n                          all given answers.\n                        </>\n                      }\n                      id=\"info-question-type\"\n                      placement=\"left\"\n                    />\n                    <ButtonGroup size=\"sm\">\n                      <Button\n                        outline\n                        color=\"primary\"\n                        active={question.type === \"question\"}\n                        onClick={() => {\n                          if (question.type !== \"question\") {\n                            onEditQuestionType(\n                              selectedQuestion,\n                              \"question\",\n                              \"vote\"\n                            );\n                          }\n                        }}\n                      >\n                        Question\n                      </Button>\n                      <Button\n                        outline\n                        color=\"primary\"\n                        active={question.type === \"vote\"}\n                        onClick={() => {\n                          if (question.type !== \"vote\") {\n                            onEditQuestionType(\n                              selectedQuestion,\n                              \"vote\",\n                              \"question\"\n                            );\n                          }\n                        }}\n                      >\n                        Vote\n                      </Button>\n                      {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                    </ButtonGroup>\n                  </Col>\n                </Row>\n                <Row form>\n                  <Col>\n                    <QuillWrapper\n                      content={question.text}\n                      onEditContent={onEditQuestionText}\n                    />\n                  </Col>\n                </Row>\n\n                {codeSnippetVisible ? (\n                  <>\n                    <Row form className=\"justify-content-between\">\n                      <Label sm=\"auto\" className=\"font-weight-bold\">\n                        Executable Code\n                      </Label>\n                      <Col sm=\"auto\">\n                        <InfoPopoverIcon\n                          text={\n                            <>\n                              A <strong>public class</strong> with a{\" \"}\n                              <strong>main method</strong> is required for the\n                              code execution to work properly.\n                            </>\n                          }\n                          id=\"info-question-code\"\n                          placement=\"left\"\n                        />\n                        <DeleteIcon\n                          style={{ cursor: \"pointer\" }}\n                          color=\"#bc754a\"\n                          onClick={() => {\n                            onEditQuestionCode(\"\");\n                            this.toggleCodeSnippetVisibility();\n                          }}\n                        />\n                      </Col>\n                    </Row>\n                    <Row form>\n                      <Col>\n                        <CodemirrorWrapper\n                          onEditContent={onEditQuestionCode}\n                          content={question.code}\n                        />\n                      </Col>\n                    </Row>\n                  </>\n                ) : (\n                  <Row form>\n                    <Col>\n                      <Button\n                        outline\n                        block\n                        color=\"primary\"\n                        onClick={() => this.toggleCodeSnippetVisibility()}\n                      >\n                        <MonitorIcon /> Add executable code snippet\n                      </Button>\n                    </Col>\n                  </Row>\n                )}\n              </FormGroup>\n\n              <FormGroup>\n                <Row form className=\"justify-content-between\">\n                  <Label sm=\"auto\">\n                    <span className=\"font-weight-bold\">Answers </span>\n                    {question.type === \"question\" && (\n                      <span className=\"small text-muted\">\n                        {question.mode === \"multi\"\n                          ? \"(Check the correct answers)\"\n                          : \"(Select the correct answer)\"}\n                      </span>\n                    )}\n                  </Label>\n\n                  <Col sm=\"auto\">\n                    <InfoPopoverIcon\n                      text={\n                        <>\n                          Choose if you want to allow users to pick just a{\" \"}\n                          <strong>single</strong> or <strong>multiple</strong>{\" \"}\n                          answers.\n                        </>\n                      }\n                      id=\"info-question-mode\"\n                      placement=\"left\"\n                    />\n                    <ButtonGroup size=\"sm\">\n                      <Button\n                        outline\n                        color=\"primary\"\n                        onClick={() => {\n                          if (question.mode !== \"single\") {\n                            onEditQuestionMode(\n                              selectedQuestion,\n                              \"single\",\n                              \"multi\"\n                            );\n                          }\n                        }}\n                        active={question.mode === \"single\"}\n                      >\n                        Single\n                      </Button>\n                      <Button\n                        outline\n                        color=\"primary\"\n                        onClick={() => {\n                          if (question.mode !== \"multi\") {\n                            onEditQuestionMode(\n                              selectedQuestion,\n                              \"multi\",\n                              \"single\"\n                            );\n                          }\n                        }}\n                        active={question.mode === \"multi\"}\n                      >\n                        Multiple\n                      </Button>\n                      {/* <Button\n                          outline\n                          color=\"primary\"\n                          onClick={() => {\n                            if (question.mode !== \"text\") {\n                              console.log(\"Passed Text\");\n                              onEditQuestionMode(selectedQuestion, \"text\");\n                            }\n                          }}\n                          active={question.mode === \"text\"}\n                        >\n                          Text\n                        </Button> */}\n                    </ButtonGroup>\n                  </Col>\n                </Row>\n\n                <Row form>\n                  <Col>\n                    <DragDropContext\n                      onDragEnd={result => {\n                        const { destination, source } = result;\n                        if (!destination) {\n                          return;\n                        }\n\n                        if (\n                          destination.droppableId === source.droppableId &&\n                          destination.index === source.inde\n                        ) {\n                          return;\n                        }\n\n                        onSortAnswer(\n                          selectedQuestion,\n                          source.index,\n                          destination.index\n                        );\n                      }}\n                    >\n                      <Droppable droppableId=\"answerList\">\n                        {providedDroppable => (\n                          <div\n                            {...providedDroppable.droppableProps}\n                            ref={providedDroppable.innerRef}\n                          >\n                            {question.answers.map((answer, i) => (\n                              <Draggable\n                                draggableId={answer.id}\n                                index={i}\n                                key={answer.id}\n                              >\n                                {providedDraggable => (\n                                  <div\n                                    {...providedDraggable.draggableProps}\n                                    ref={providedDraggable.innerRef}\n                                    key={answer.id}\n                                  >\n                                    <QuestionEditorAnswerInput\n                                      isCorrectAnswer={answer.isCorrect}\n                                      dragHandleProps={\n                                        providedDraggable.dragHandleProps\n                                      }\n                                      selectedQuestion={selectedQuestion}\n                                      number={i}\n                                      mode={question.mode}\n                                      answer={answer.text}\n                                      key={answer.id}\n                                      onEditAnswerText={e =>\n                                        onEditAnswerText(\n                                          selectedQuestion,\n                                          e.target.value,\n                                          i\n                                        )\n                                      }\n                                      onSetCorrectSingleAnswer={\n                                        onSetCorrectSingleAnswer\n                                      }\n                                      onSetCorrectMultiAnswer={\n                                        onSetCorrectMultiAnswer\n                                      }\n                                      onDeleteAnswer={onDeleteAnswer}\n                                      disabled={question.type === \"vote\"}\n                                    />\n                                  </div>\n                                )}\n                              </Draggable>\n                            ))}\n                            {providedDroppable.placeholder}\n                          </div>\n                        )}\n                      </Droppable>\n                    </DragDropContext>\n                  </Col>\n                </Row>\n              </FormGroup>\n\n              <Button\n                outline\n                block\n                color=\"primary\"\n                onClick={() => onAddAnswer(selectedQuestion)}\n              >\n                <PlaylistPlusIcon /> Add answer\n              </Button>\n              <Button\n                outline\n                block\n                color=\"danger\"\n                onClick={() => onDeleteQuestion(selectedQuestion)}\n              >\n                <DeleteIcon /> Delete Question\n              </Button>\n            </Form>\n          ) : (\n            <div className=\"text-center\">\n              <div>\n                <CancelIcon size={32} color=\"#8a817c\" />\n              </div>\n              <div className=\"text-muted mt-3\">No question selected</div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nQuestionEditorContent.propTypes = {\n  question: PropTypes.shape({\n    type: PropTypes.string,\n    text: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onEditQuestionMode: PropTypes.func.isRequired,\n  onEditQuestionType: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectSingleAnswer: PropTypes.func.isRequired,\n  onSetCorrectMultiAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nexport default QuestionEditorContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SingleFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit = event => {\n    const { onSelectFile, closeDropdown } = this.props;\n    event.preventDefault();\n    onSelectFile(this.fileInput.current.files[0]);\n    if (typeof closeDropdown === \"function\") {\n      closeDropdown();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <input\n          type=\"file\"\n          ref={this.fileInput}\n          style={{ display: \"none\" }}\n          onChange={this.handleSubmit}\n        />\n        {React.cloneElement(children, {\n          onClick: e => {\n            e.preventDefault();\n            this.fileInput.current.click();\n          }\n        })}\n      </>\n    );\n  }\n}\n\nSingleFileInput.propTypes = {\n  onSelectFile: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  closeDropdown: PropTypes.func\n};\n\nSingleFileInput.defaultProps = {\n  closeDropdown: null\n};\n\nexport default SingleFileInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadScript from \"load-script\";\n\nconst DROPBOX_SDK_URL = \"https://www.dropbox.com/static/api/2/dropins.js\";\nconst SCRIPT_ID = \"dropboxjs\";\n\nlet scriptLoadingStarted = false;\n\n// read more\n// https://www.dropbox.com/developers/chooser\nexport default class DropboxChooser extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    appKey: PropTypes.string.isRequired,\n    success: PropTypes.func.isRequired,\n    cancel: PropTypes.func,\n    linkType: PropTypes.oneOf([\"preview\", \"direct\"]),\n    multiselect: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    cancel: () => {},\n    linkType: \"preview\",\n    multiselect: false,\n    disabled: false\n  };\n\n  static isDropboxReady() {\n    return !!window.Dropbox;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChoose = this.onChoose.bind(this);\n  }\n\n  componentDidMount() {\n    const { appKey } = this.props;\n    if (!DropboxChooser.isDropboxReady() && !scriptLoadingStarted) {\n      scriptLoadingStarted = true;\n      loadScript(DROPBOX_SDK_URL, {\n        attrs: {\n          id: SCRIPT_ID,\n          \"data-app-key\": appKey\n        }\n      });\n    }\n  }\n\n  onChoose() {\n    const {\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions,\n      disabled\n    } = this.props;\n\n    if (!DropboxChooser.isDropboxReady() || disabled) {\n      return null;\n    }\n\n    return window.Dropbox.choose({\n      success,\n      cancel,\n      linkType,\n      multiselect,\n      extensions\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <div onClick={this.onChoose}>\n        {children || <button type=\"button\">Open Dropbox Chooser</button>}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadIcon from \"mdi-react/UploadIcon\";\nimport FileUploadIcon from \"mdi-react/FileUploadIcon\";\nimport DropboxIcon from \"mdi-react/DropboxIcon\";\nimport {\n  ButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\";\nimport SingleFileInput from \"../../shared/components/SingleFileInput\";\nimport DropboxChooser from \"./DropboxChooser\";\n\nclass QuestionEditorListDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { onUploadFile, onUploadDropbox } = this.props;\n    return (\n      <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle color=\"light\" caret>\n          <UploadIcon className=\"text-secondary\" /> Import{\" \"}\n        </DropdownToggle>\n        <DropdownMenu>\n          <SingleFileInput\n            onSelectFile={file => onUploadFile(file)}\n            closeDropdown={this.toggle}\n          >\n            <DropdownItem toggle={false}>\n              <FileUploadIcon className=\"text-secondary\" /> File\n            </DropdownItem>\n          </SingleFileInput>\n\n          <DropdownItem>\n            <DropboxChooser\n              appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n              linkType=\"direct\"\n              success={e => {\n                fetch(e[0].link)\n                  .then(response => response.text())\n                  .then(text => onUploadDropbox(text));\n              }}\n            >\n              <DropboxIcon className=\"text-secondary\" /> Dropbox\n            </DropboxChooser>\n          </DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nQuestionEditorListDropdown.propTypes = {\n  onUploadFile: PropTypes.func.isRequired,\n  onUploadDropbox: PropTypes.func.isRequired\n};\n\nexport default QuestionEditorListDropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCircleOutlineIcon from \"mdi-react/AddCircleOutlineIcon\";\nimport DownloadIcon from \"mdi-react/DownloadIcon\";\nimport DragIcon from \"mdi-react/DragIcon\";\nimport {\n  Button,\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\nimport QuestionEditorListDropdown from \"./QuestionEditorListDropdown\";\n\nconst truncate = (text, limit, after) => {\n  const words = text.trim().split(\" \");\n\n  if (words.length > limit) {\n    return words.slice(0, limit).join(\" \") + (after || \"\");\n  }\n  return text;\n};\n\nconst strip = html => {\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  return doc.body.textContent || \"\";\n};\n\nconst QuestionEditorList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    onSortQuestion,\n    selectedQuestion,\n    onAddQuestion,\n    onDownloadFile,\n    onUploadFile,\n    onUploadDropbox\n  } = props;\n\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h5 className=\"my-0 d-flex justify-content-between\">\n          Questions\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h5>\n      </CardHeader>\n      <DragDropContext\n        onDragEnd={result => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n          ) {\n            return;\n          }\n          onSortQuestion(source.index, destination.index);\n        }}\n      >\n        <Droppable droppableId=\"questionList\">\n          {providedDroppable => (\n            <ListGroup flush>\n              <div\n                {...providedDroppable.droppableProps}\n                ref={providedDroppable.innerRef}\n              >\n                {questions.map((question, i) => (\n                  <Draggable\n                    draggableId={question.id}\n                    index={i}\n                    key={question.id}\n                  >\n                    {providedDraggable => (\n                      <div\n                        {...providedDraggable.draggableProps}\n                        ref={providedDraggable.innerRef}\n                        key={question.id}\n                      >\n                        <ListGroupItem\n                          key={question.id}\n                          tag=\"a\"\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            onSelectQuestion(i);\n                          }}\n                          action\n                          active={selectedQuestion === i}\n                          className=\"d-flex justify-content-between align-items-center hover-container\"\n                        >\n                          {truncate(strip(question.text), 7, \"...\")}\n                          <div\n                            className=\"hover-hide\"\n                            {...providedDraggable.dragHandleProps}\n                            style={{ width: \"22px\", height: \"22px\" }}\n                          >\n                            <DragIcon\n                              style={{\n                                marginRight: \"-6px\"\n                              }}\n                            />\n                          </div>\n                        </ListGroupItem>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n              {questions.length === 0 && (\n                <ListGroupItem disabled>\n                  <ListGroupItemText className=\"mb-0\">\n                    No questions\n                  </ListGroupItemText>\n                </ListGroupItem>\n              )}\n            </ListGroup>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton btn btn-light\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddCircleOutlineIcon\n          className=\"text-success\"\n          style={{ paddingBottom: \"3px\" }}\n        />\n        Add Question\n      </CardFooter>\n      <CardFooter>\n        <div className=\"text-center\">\n          <QuestionEditorListDropdown\n            onUploadFile={onUploadFile}\n            onUploadDropbox={onUploadDropbox}\n          />\n          <Button\n            color=\"light\"\n            onClick={onDownloadFile}\n            disabled={questions.length === 0}\n          >\n            <DownloadIcon className=\"text-secondary\" /> Export\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionEditorList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionEditorList.defaultProps = {\n  questions: [],\n  selectedQuestion: null\n};\nexport default QuestionEditorList;\n","import Logger from \"./Logger\";\n\nconst getFormattedDate = () => {\n  const today = new Date();\n  let dd = today.getDate();\n\n  let mm = today.getMonth() + 1;\n  const yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = `0${dd}`;\n  }\n\n  if (mm < 10) {\n    mm = `0${mm}`;\n  }\n  return `${dd}-${mm}-${yyyy}`;\n};\n\nexport const downloadFile = data => {\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n    JSON.stringify(data)\n  )}`;\n  const downloadAnchorNode = document.createElement(\"a\");\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\n    \"download\",\n    `weclare-${getFormattedDate()}.json`\n  );\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n  Logger.info(\"Created and started file download\");\n};\n\nexport const saveToStorage = data => {\n  localStorage.setItem(\"weclare\", data);\n  Logger.info(\"Saved questionset to local storage\");\n};\n","import PropTypes from \"prop-types\";\n\nexport const TSpinnerCard = {\n  title: PropTypes.string\n};\n\nexport const DSpinnerCard = {\n  title: \"Waiting\"\n};\n\nexport const TQuestion = PropTypes.shape({\n  question: PropTypes.shape({\n    questionIdx: PropTypes.number,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  })\n});\n\nexport const DQuestion = {\n  progress: \"0/0\",\n  questionIdx: 0,\n  text: \"Mock question: How is the development going?\",\n  type: \"single\",\n  mode: \"question\",\n  answers: [\n    { id: \"6FedDc\", text: \"Good\", isCorrect: true },\n    { id: \"9FbdDa\", text: \"Not Good\", isCorrect: false }\n  ]\n};\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport ContentSaveIcon from \"mdi-react/ContentSaveIcon\";\nimport QuestionEditorContent from \"./QuestionEditorContent\";\nimport QuestionEditorList from \"./QuestionEditorList\";\nimport { saveToStorage, downloadFile } from \"../../shared/util/FileHelpers\";\nimport { TQuestion } from \"../../shared/types\";\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    props.loadQuestionsFromStorage();\n  }\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editCurrentQuestionText,\n      editCurrentQuestionCode,\n      editQuestionType,\n      editQuestionMode,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectSingleAnswer,\n      setCorrectMultiAnswer,\n      initAnswers,\n      sortQuestion,\n      sortAnswer,\n      saveFileToStorage,\n      validateAndSaveToStorage\n    } = this.props;\n\n    return (\n      <>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionEditorList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n              onSortQuestion={sortQuestion}\n              onDownloadFile={() => {\n                saveToStorage(JSON.stringify(questions));\n                downloadFile(questions);\n              }}\n              onUploadFile={saveFileToStorage}\n              onUploadDropbox={validateAndSaveToStorage}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionEditorContent\n              key={\n                (questions[selectedQuestion] &&\n                  questions[selectedQuestion].id) ||\n                \"none\"\n              }\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editCurrentQuestionText}\n              onEditQuestionCode={editCurrentQuestionCode}\n              onEditQuestionMode={editQuestionMode}\n              onEditQuestionType={editQuestionType}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectSingleAnswer={setCorrectSingleAnswer}\n              onSetCorrectMultiAnswer={setCorrectMultiAnswer}\n              onSortAnswer={sortAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col xs=\"auto\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                initAnswers();\n                saveToStorage(JSON.stringify(questions));\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n              disabled={!questions.length > 0}\n            >\n              <ContentSaveIcon style={{ paddingBottom: \"3px\" }} /> Save &\n              Continue\n            </Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default QuestionEditor;\n\nQuestionEditor.propTypes = {\n  selectedQuestion: PropTypes.number,\n  questions: PropTypes.arrayOf(TQuestion).isRequired,\n  // Questions\n  selectQuestion: PropTypes.func.isRequired,\n  addQuestion: PropTypes.func.isRequired,\n  editCurrentQuestionText: PropTypes.func.isRequired,\n  editCurrentQuestionCode: PropTypes.func.isRequired,\n  editQuestionMode: PropTypes.func.isRequired,\n  editQuestionType: PropTypes.func.isRequired,\n  deleteQuestion: PropTypes.func.isRequired,\n  sortQuestion: PropTypes.func.isRequired,\n  loadQuestionsFromStorage: PropTypes.func.isRequired,\n  saveFileToStorage: PropTypes.func.isRequired,\n  validateAndSaveToStorage: PropTypes.func.isRequired,\n  // Answers\n  addAnswer: PropTypes.func.isRequired,\n  editAnswerText: PropTypes.func.isRequired,\n  deleteAnswer: PropTypes.func.isRequired,\n  setCorrectSingleAnswer: PropTypes.func.isRequired,\n  setCorrectMultiAnswer: PropTypes.func.isRequired,\n  sortAnswer: PropTypes.func.isRequired,\n  initAnswers: PropTypes.func.isRequired,\n  history: ReactRouterPropTypes.history.isRequired\n};\n\nQuestionEditor.defaultProps = {\n  selectedQuestion: null\n};\n","const schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"http://www.weclare.de/questions.json\",\n  type: \"array\",\n  title: \"A question set for weclare.de\",\n  items: {\n    type: \"object\",\n    title: \"A single questions\",\n    required: [\"id\", \"type\", \"text\", \"answers\", \"questionIdx\"],\n    properties: {\n      id: {\n        type: \"string\",\n        title: \"A unique id\"\n      },\n      type: {\n        type: \"string\",\n        title: \"Type of question (e.g. single, multi, text)\"\n      },\n      questionIdx: {\n        type: \"number\",\n        title: \"Question Index\"\n      },\n      mode: {\n        type: \"string\",\n        title: \"Mode of question (e.g. a vote or question)\"\n      },\n      text: {\n        type: \"string\",\n        title: \"The question text\"\n      },\n      answers: {\n        type: \"array\",\n        title: \"All answer options for this question\",\n        items: {\n          type: \"object\",\n          title: \"A single answer\",\n          required: [\"id\", \"text\", \"isCorrect\"],\n          properties: {\n            id: {\n              type: \"string\",\n              title: \"A unique id\"\n            },\n            text: {\n              type: \"string\",\n              title: \"The text of the answer\"\n            },\n            isCorrect: {\n              type: \"boolean\",\n              title: \"Flag if the answer is correct\"\n            }\n          },\n          additionalProperties: false\n        }\n      }\n    },\n    additionalProperties: false\n  }\n};\n\nexport default schema;\n","import tv4 from \"tv4\";\nimport Logger from \"../../shared/util/Logger\";\nimport QuestionSchema from \"../../shared/util/QuestionsSchema\";\nimport { saveToStorage } from \"../../shared/util/FileHelpers\";\n\n// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    dispatch({ type: ADD_QUESTION });\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport function editCurrentQuestionText(text) {\n  return (dispatch, getState) => {\n    const { selectedQuestion } = getState();\n    dispatch({\n      type: EDIT_QUESTION_TEXT,\n      payload: {\n        questionIdx: selectedQuestion,\n        text\n      }\n    });\n  };\n}\n\nexport const EDIT_QUESTION_CODE = \"EDIT_QUESTION_CODE\";\nexport function editCurrentQuestionCode(code) {\n  return (dispatch, getState) => {\n    const { selectedQuestion } = getState();\n    dispatch({\n      type: EDIT_QUESTION_CODE,\n      payload: {\n        questionIdx: selectedQuestion,\n        code\n      }\n    });\n  };\n}\n\nexport const EDIT_QUESTION_MODE = \"EDIT_QUESTION_MODE\";\nexport function editQuestionMode(questionIdx, newMode, oldMode) {\n  return {\n    type: EDIT_QUESTION_MODE,\n    payload: {\n      questionIdx,\n      newMode,\n      oldMode\n    }\n  };\n}\n\nexport const EDIT_QUESTION_TYPE = \"EDIT_QUESTION_TYPE\";\nexport function editQuestionType(questionIdx, newType, oldType) {\n  return {\n    type: EDIT_QUESTION_TYPE,\n    payload: {\n      questionIdx,\n      newType,\n      oldType\n    }\n  };\n}\n\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    const { questionEditor: questions } = getState();\n    // Delete first element\n    if (questionIdx === 0) {\n      // It is not the last element\n      if (questions.length > 0) {\n        dispatch(selectQuestion(0));\n        // It is the last element\n      } else {\n        dispatch(selectQuestion(null));\n      }\n    } else {\n      dispatch(selectQuestion(questionIdx - 1));\n    }\n  };\n}\n\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\nexport const loadQuestionsFromStorage = () => dispatch => {\n  const newQuestions = localStorage.getItem(\"weclare\");\n  if (newQuestions) {\n    dispatch(loadQuestions(JSON.parse(newQuestions)));\n  }\n};\n\nexport const validateAndSaveToStorage = data => dispatch => {\n  const valid = tv4.validate(JSON.parse(data), QuestionSchema);\n  if (valid) {\n    Logger.info(\"Questionset was successfully validated\");\n    saveToStorage(data);\n    dispatch(loadQuestionsFromStorage());\n  } else {\n    Logger.error(\"Imported file was invalid\", tv4.error);\n  }\n};\n\nexport const saveFileToStorage = file => dispatch => {\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch(validateAndSaveToStorage(reader.result));\n  };\n  reader.readAsText(file);\n};\n\nexport const SORT_QUESTION = \"SORT_QUESTION\";\nexport function sortQuestion(oldQuestionIdx, newQuestionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SORT_QUESTION,\n      payload: {\n        oldQuestionIdx,\n        newQuestionIdx\n      }\n    });\n    const { selectedQuestion } = getState();\n    if (selectedQuestion === oldQuestionIdx) {\n      dispatch(selectQuestion(newQuestionIdx));\n    }\n  };\n}\n\n// Question Editor Answer Actions\nexport const SET_CORRECT_SINGLE_ANSWER = \"SET_CORRECT_SINGLE_ANSWER\";\nexport function setCorrectSingleAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_SINGLE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SET_CORRECT_MULTI_ANSWER = \"SET_CORRECT_MULTI_ANSWER\";\nexport function setCorrectMultiAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_MULTI_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport function editAnswerText(questionIdx, text, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      text,\n      answerIdx\n    }\n  };\n}\n\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport const SORT_ANSWER = \"SORT_ANSWER\";\nexport function sortAnswer(questionIdx, oldAnswerIdx, newAnswerIdx) {\n  return {\n    type: SORT_ANSWER,\n    payload: {\n      questionIdx,\n      oldAnswerIdx,\n      newAnswerIdx\n    }\n  };\n}\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport * as questionEditorActions from \"../actions/questions\";\nimport * as answerActions from \"../actions/answers\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = {\n  ...questionEditorActions,\n  ...answerActions\n};\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n","import React from \"react\";\nimport { Button, Badge } from \"reactstrap\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport java from \"highlight.js/lib/languages/java\";\nimport PropTypes from \"prop-types\";\nimport DefaultCard from \"./DefaultCard\";\nimport \"../scss/quill.scss\";\nimport Logger from \"../util/Logger\";\nimport { TQuestion, DQuestion } from \"../types\";\nimport CodemirrorWrapper from \"./CodemirrorWrapper\";\n\nclass QuestionCard extends React.Component {\n  // Convert boolean array to numerical array, e.g. [true, false, true] -> [0,2]\n  static convertSelectedAnswersArray(selectedAnswersArray) {\n    if (selectedAnswersArray) {\n      return selectedAnswersArray\n        .map((answer, i) => answer && i)\n        .filter(answer => typeof answer === \"number\");\n    }\n    return [];\n  }\n\n  constructor(props) {\n    super(props);\n    hljs.registerLanguage(\"java\", java);\n    hljs.configure({ languages: [\"java\"] });\n  }\n\n  componentDidUpdate() {\n    const block = document.querySelector(\".ql-syntax\");\n    if (block) {\n      hljs.highlightBlock(block);\n    }\n  }\n\n  render() {\n    const {\n      question,\n      selectedAnswersIdx,\n      disabled,\n      countedAnswers,\n      children,\n      toggleSelectedAnswers,\n      onSendAnswers,\n      isServer,\n      toggleDisabled,\n      highlightSolutions\n    } = this.props;\n\n    let footer;\n    if (question.mode === \"multi\" && !isServer) {\n      footer = (\n        <>\n          <p className=\"text-center text-muted\">\n            Multiple choice question: Select answers and click send.\n          </p>\n          <Button\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => {\n              const selectedAnswers = QuestionCard.convertSelectedAnswersArray(\n                selectedAnswersIdx\n              );\n              Logger.info(\"Sending multi answer \", selectedAnswers);\n              onSendAnswers(selectedAnswers);\n              toggleDisabled();\n            }}\n            block\n          >\n            Send Answers\n          </Button>\n          {children}\n        </>\n      );\n    } else {\n      footer = children;\n    }\n\n    return (\n      <DefaultCard\n        title={isServer ? \"Ask Question\" : \"Answer Question\"}\n        badge={question && question.progress}\n        footer={footer}\n      >\n        {question.text && (\n          <div\n            id=\"code-container\"\n            className=\"text-center my-5 h4\"\n            // eslint-disable-next-line\n            dangerouslySetInnerHTML={{ __html: question.text }}\n          />\n        )}\n        {question.code && (\n          <CodemirrorWrapper content={question.code} readOnly=\"nocursor\" />\n        )}\n\n        {question.answers &&\n          question.answers.map((answer, i) => (\n            <Button\n              outline={\n                !(highlightSolutions && answer.isCorrect) &&\n                !selectedAnswersIdx[i]\n              }\n              id={i}\n              key={answer.id}\n              block\n              onClick={e => {\n                const selectedAnswer = parseInt(e.target.id, 10);\n                toggleSelectedAnswers(selectedAnswer);\n                if (question.mode === \"single\") {\n                  Logger.info(\"Sending single answer \", selectedAnswer);\n                  onSendAnswers([selectedAnswer]);\n                  toggleDisabled();\n                }\n              }}\n              color={\n                highlightSolutions && answer.isCorrect ? \"success\" : \"secondary\"\n              }\n              disabled={disabled}\n            >\n              {answer.text}\n              {countedAnswers && (\n                <Badge\n                  className=\"float-right\"\n                  style={{ lineHeight: 1.5 }}\n                  color=\"secondary\"\n                >\n                  {typeof countedAnswers[i] === \"number\" && countedAnswers[i]}\n                </Badge>\n              )}\n            </Button>\n          ))}\n      </DefaultCard>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  question: TQuestion,\n  selectedAnswersIdx: PropTypes.arrayOf(PropTypes.bool),\n  disabled: PropTypes.bool,\n  countedAnswers: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.number),\n    PropTypes.bool\n  ]),\n  children: PropTypes.node,\n  toggleSelectedAnswers: PropTypes.func,\n  onSendAnswers: PropTypes.func,\n  isServer: PropTypes.bool,\n  toggleDisabled: PropTypes.func,\n  highlightSolutions: PropTypes.bool\n};\nQuestionCard.defaultProps = {\n  question: DQuestion,\n  selectedAnswersIdx: [],\n  disabled: false,\n  countedAnswers: [],\n  children: null,\n  toggleSelectedAnswers: () => console.log(\"Click\"),\n  onSendAnswers: () => console.log(\"Click\"),\n  isServer: false,\n  toggleDisabled: () => console.log(\"Click\"),\n  highlightSolutions: false\n};\n\nexport default QuestionCard;\n","export const isConnected = state => {\n  const {\n    server: { connections }\n  } = state;\n  return connections.length > 0;\n};\n\nexport const hasNextQuestion = state => {\n  const {\n    questionEditor: questions = [],\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return currentQuestionIdx + 1 < questions.length;\n};\n\nexport const hasPreviousQuestion = state => {\n  const {\n    server: { currentQuestionIdx = 0 }\n  } = state;\n  return !(currentQuestionIdx - 1 < 0);\n};\n","import React from \"react\";\nimport { Button, Spinner } from \"reactstrap\";\nimport PlayIcon from \"mdi-react/PlayIcon\";\nimport PauseIcon from \"mdi-react/PauseIcon\";\nimport SkipNextIcon from \"mdi-react/SkipNextIcon\";\n\nconst AskScreenContinueButton = props => {\n  const { hasNextQuestion, nextAskScreenState } = props;\n  const buttonState = {\n    // Waiting for clients, button disabled\n    0: {\n      text: (\n        <>\n          <Spinner size=\"sm\" className=\"mr-2\" /> Waiting for clients\n        </>\n      ),\n      color: \"primary\",\n      additionalButtonProps: {\n        outline: true,\n        disabled: true\n      }\n    },\n    // Clients connected, ready to send first question and accept answers\n    1: {\n      text: (\n        <>\n          <PlayIcon style={{ paddingBottom: \"3px\" }} /> Start Question\n        </>\n      ),\n      color: \"primary\"\n    },\n    // Accepting answers\n    2: {\n      text: (\n        <>\n          <PauseIcon style={{ paddingBottom: \"3px\" }} /> Stop Question\n        </>\n      ),\n      color: \"primary\"\n    },\n    3: {\n      text: (\n        <>\n          <SkipNextIcon style={{ paddingBottom: \"3px\" }} /> Next Question\n        </>\n      ),\n      color: \"secondary\",\n      additionalButtonProps: {\n        disabled: !hasNextQuestion\n      }\n    }\n  };\n\n  const { currentAskScreenState } = props;\n  const currentPhaseObj = buttonState[currentAskScreenState];\n  return (\n    <Button\n      color={currentPhaseObj.color}\n      outline={currentPhaseObj.outline}\n      block\n      onClick={nextAskScreenState}\n      {...currentPhaseObj &&\n        currentPhaseObj.additionalButtonProps &&\n        currentPhaseObj.additionalButtonProps}\n    >\n      {currentPhaseObj.text}\n    </Button>\n  );\n};\n\nexport default AskScreenContinueButton;\n","import { connect } from \"react-redux\";\nimport { nextAskScreenState } from \"../actions/server\";\nimport { isConnected, hasNextQuestion } from \"../selectors/server\";\nimport AskScreenContinueButton from \"./AskScreenContinueButton\";\n\nconst mapStateToProps = state => ({\n  isConnected: isConnected(state),\n  hasNextQuestion: hasNextQuestion(state),\n  currentAskScreenState: state.server.currentAskScreenState\n});\n\nconst mapDispatchToProps = {\n  nextAskScreenState\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AskScreenContinueButton);\n","import React from \"react\";\nimport ChevronRightIcon from \"mdi-react/ChevronRightIcon\";\nimport ChevronLeftIcon from \"mdi-react/ChevronLeftIcon\";\n\nexport const ChevronLeft = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div\n      className=\"text-right align-middle\"\n      onClick={disabled ? null : onClick}\n    >\n      <ChevronLeftIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n\nexport const ChevronRight = props => {\n  const { onClick, disabled } = props;\n  return (\n    <div className=\"text-left align-middle\" onClick={disabled ? null : onClick}>\n      <ChevronRightIcon\n        className={`chevron ${disabled ? \"disabled\" : \"enabled\"}`}\n        size={42}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TerminalWindow extends React.Component {\n  static defaultProps = {\n    messages: [],\n    showTerminal: false\n  };\n\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.string),\n    showTerminal: PropTypes.bool\n  };\n\n  terminalRef = React.createRef();\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    this.terminalRef.current.scrollTop = this.terminalRef.current.scrollHeight;\n  };\n\n  render() {\n    const { showTerminal, messages } = this.props;\n\n    return (\n      <div\n        ref={this.terminalRef}\n        style={{ height: \"300px\", overflow: \"auto\", whiteSpace: \"pre-wrap\" }}\n        id=\"terminal\"\n        className={`border rounded text-white bg-dark p-3 my-3 ${\n          showTerminal ? \"d-block\" : \"d-none\"\n        }`}\n      >\n        {messages.map((msg, i) => (\n          <span key={i}>{msg}</span>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TerminalWindow;\n","// Server Terminal Actions\nexport const ADD_LINE = \"ADD_LINE\";\nexport function addLine(line, addNewLine = true) {\n  return {\n    type: ADD_LINE,\n    payload: {\n      line,\n      addNewLine\n    }\n  };\n}\n\nexport const RESET_TERMINAL = \"RESET_TERMINAL\";\nexport function resetTerminal() {\n  return {\n    type: RESET_TERMINAL\n  };\n}\n","import { connect } from \"react-redux\";\nimport TerminalWindow from \"./TerminalWindow\";\nimport { addLine, resetTerminal } from \"../actions/terminal\";\n\nconst mapDispatchToProps = {\n  addLine,\n  resetTerminal\n};\n\nconst mapStateToProps = state => ({\n  messages: state.terminal\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TerminalWindow);\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport CodeTagsIcon from \"mdi-react/CodeTagsIcon\";\n\nconst ExecuteCodeButton = props => {\n  const { onClick, runCurrentCode } = props;\n\n  return (\n    <Button\n      color=\"primary\"\n      outline\n      block\n      onClick={() => {\n        runCurrentCode();\n        onClick();\n      }}\n    >\n      <CodeTagsIcon /> Execute Interactive Code Snippet\n    </Button>\n  );\n};\n\nexport default ExecuteCodeButton;\n","import { addLine } from \"./terminal\";\nimport { toggleBusy } from \"./server\";\n\nconst Doppio = require(\"doppiojvm\");\nconst BrowserFS = require(\"browserfs\");\n\nconst findPublicStaticClass = source => {\n  const re = /public\\s+class\\s+(\\b[A-Za-z][A-Za-z0-9_]*\\b)/m;\n  const result = re.exec(source);\n  return result ? result[1] : null;\n};\n\nconst writeJavaSourceFileAsync = async (name, source) =>\n  new Promise((resolve, reject) => {\n    const { fs } = window;\n\n    fs.writeFile(`/tmp/${name}.java`, source, err => {\n      if (err) reject(err);\n      resolve();\n    });\n  });\n\nconst setupBrowserFs = async () => {\n  BrowserFS.install(window);\n  await new Promise((resolve, reject) => {\n    BrowserFS.configure(\n      {\n        fs: \"MountableFileSystem\",\n        options: {\n          \"/tmp\": { fs: \"InMemory\" },\n          \"/sys\": {\n            fs: \"XmlHttpRequest\",\n            options: {\n              index: `${process.env.PUBLIC_URL}/doppio/listings.json`\n            }\n          }\n        }\n      },\n      e => {\n        if (e) {\n          // An error happened!\n          reject(e);\n        }\n        // Otherwise, BrowserFS is ready-to-use!\n        window.fs = window.require(\"fs\");\n        resolve();\n      }\n    );\n  });\n};\n\n// Doppio JS Actions\nexport const RUN_CURRENT_CODE = \"RUN_CURRENT_CODE\";\nexport function runCurrentCode() {\n  return async (dispatch, getState) => {\n    const {\n      questionEditor: questions,\n      server: { currentQuestionIdx }\n    } = getState();\n\n    const currentQuestion = questions[currentQuestionIdx];\n\n    if (currentQuestion.code) {\n      dispatch(toggleBusy());\n      const classname = findPublicStaticClass(currentQuestion.code);\n      if (!classname) {\n        dispatch(addLine(\"Could not find a public class to compile.\", false));\n        return;\n      }\n      await setupBrowserFs();\n      const { process } = window;\n      await writeJavaSourceFileAsync(classname, currentQuestion.code);\n      // fs.readdir(\"/tmp\", (err, files) => {\n      //   // handling error\n      //   if (err) {\n      //     return console.log(\"Unable to scan directory: \" + err);\n      //   }\n      //   // listing all files using forEach\n      //   files.forEach(file => {\n      //     // Do whatever you want to do with the file\n      //     console.log(file);\n      //   });\n      // });\n\n      // Only attach listeners once\n      if (process.stdout.listenerCount(\"data\") === 0) {\n        process.stdout.on(\"data\", data =>\n          dispatch(addLine(data.toString(), false))\n        );\n        process.stderr.on(\"data\", data =>\n          dispatch(addLine(data.toString(), false))\n        );\n      }\n\n      dispatch(addLine(\"Starting JVM...\"));\n\n      // Instantiate Doppio JVM\n      // eslint-disable-next-line\n      new Doppio.VM.JVM(\n        {\n          doppioHomePath: \"/sys\",\n          classpath: [\".\", \"/sys/\", \"/tmp/\"]\n        },\n        (err, jvmObject) => {\n          jvmObject.runClass(\"Loader\", [classname], exitCode => {\n            if (exitCode !== 0) {\n              dispatch(addLine(\"JVM exited with an error\"));\n            }\n            dispatch(toggleBusy());\n          });\n        }\n      );\n    }\n  };\n}\n","import { connect } from \"react-redux\";\nimport ExecuteCodeButton from \"./ExecuteCodeButton\";\nimport { runCurrentCode } from \"../actions/doppio\";\n\nconst mapDispatchToProps = {\n  runCurrentCode\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ExecuteCodeButton);\n","import React from \"react\";\nimport TerminalWindowContainer from \"./TerminalWindowContainer\";\nimport ExecuteCodeButtonContainer from \"./ExecuteCodeButtonContainer\";\n\nconst CodeExecutionArea = props => {\n  const { showTerminal, onClickExecute } = props;\n\n  return (\n    <>\n      {!showTerminal && <ExecuteCodeButtonContainer onClick={onClickExecute} />}\n      <TerminalWindowContainer showTerminal={showTerminal} />\n    </>\n  );\n};\n\nexport default CodeExecutionArea;\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport FormatListNumberedIcon from \"mdi-react/FormatListNumberedIcon\";\nimport CheckAllIcon from \"mdi-react/CheckAllIcon\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport AskScreenContinueButtonContainer from \"./AskScreenContinueButtonContainer\";\nimport { ChevronRight, ChevronLeft } from \"../../shared/components/Chevron\";\nimport CodeExecutionArea from \"./CodeExecutionArea\";\nimport { resetTerminal } from \"../actions/terminal\";\n\nclass AskScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      showVoteCount: false,\n      showTerminal: false,\n      highlightSolutions: false,\n      prevQuestion: props.currentQuestion\n    };\n    this.state = this.initialState;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (\n      props.currentQuestion &&\n      props.currentQuestion.text !== state.prevQuestion.text\n    ) {\n      return {\n        prevQuestion: props.currentQuestion,\n        showTerminal: false,\n        showVoteCount: false,\n        highlightSolutions: false\n      };\n    }\n    return null;\n  }\n\n  toggleShowVoteCount = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      showVoteCount: !prevState.showVoteCount\n    }));\n  };\n\n  toggleShowTerminal = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      showTerminal: !prevState.showTerminal\n    }));\n  };\n\n  toggleHighlightSolutions = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      highlightSolutions: !prevState.highlightSolutions\n    }));\n  };\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const {\n      currentQuestion,\n      countedAnswers,\n      receivedAnswersCounter,\n      hasNextQuestion,\n      hasPreviousQuestion,\n      incrementQuestionIdx,\n      decrementQuestionIdx,\n      acceptingAnswers,\n      isBusy,\n      resetTerminal\n    } = this.props;\n\n    const { showVoteCount, highlightSolutions, showTerminal } = this.state;\n\n    const questionHasCodeSnippet = currentQuestion && currentQuestion.code;\n    return (\n      <Row className=\"justify-content-center\">\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronLeft\n            disabled={!hasPreviousQuestion || acceptingAnswers || isBusy}\n            onClick={() => {\n              resetTerminal();\n              decrementQuestionIdx();\n            }}\n          />\n        </Col>\n        <QuestionCard\n          question={currentQuestion}\n          countedAnswers={showVoteCount && countedAnswers}\n          highlightSolutions={highlightSolutions}\n          isServer\n          disabled\n        >\n          <>\n            {receivedAnswersCounter && (\n              <div className=\"d-flex flex-row justify-content-between align-items-center mb-2\">\n                <div className=\"text-muted\">\n                  {receivedAnswersCounter} users have answered\n                </div>\n                <div>\n                  {currentQuestion.type === \"question\" && (\n                    <Button\n                      size=\"sm\"\n                      outline={!highlightSolutions}\n                      onClick={this.toggleHighlightSolutions}\n                      className=\"mr-2\"\n                    >\n                      <CheckAllIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                      {highlightSolutions ? \"Hide\" : \"Show\"} Solutions\n                    </Button>\n                  )}\n\n                  <Button\n                    size=\"sm\"\n                    outline={!showVoteCount}\n                    onClick={this.toggleShowVoteCount}\n                  >\n                    <FormatListNumberedIcon style={{ paddingBottom: \"3px\" }} />{\" \"}\n                    {showVoteCount ? \"Hide\" : \"Show\"} Results\n                  </Button>\n                </div>\n              </div>\n            )}\n            <AskScreenContinueButtonContainer />\n            {questionHasCodeSnippet && (\n              <CodeExecutionArea\n                showTerminal={showTerminal}\n                onClickExecute={this.toggleShowTerminal}\n              />\n            )}\n          </>\n        </QuestionCard>\n        <Col xs=\"2\" className=\"align-self-center\">\n          <ChevronRight\n            disabled={!hasNextQuestion || acceptingAnswers || isBusy}\n            onClick={() => {\n              resetTerminal();\n              incrementQuestionIdx();\n            }}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default AskScreen;\n","export const getAnswerCountForCurrentQuestion = state => {\n  const {\n    server: { currentQuestionIdx },\n    registeredAnswers\n  } = state;\n  if (\n    registeredAnswers.length > 0 &&\n    typeof currentQuestionIdx !== \"undefined\"\n  ) {\n    return registeredAnswers[currentQuestionIdx].map(answer => answer.length);\n  }\n  return [];\n};\n\nexport const getReceivedAnswersCounter = state => {\n  const {\n    server: { connections = [], currentQuestionIdx },\n    registeredAnswers = []\n  } = state;\n\n  const connectionCount = connections.length;\n  if (connectionCount === 0 || !registeredAnswers[currentQuestionIdx])\n    return null;\n\n  const flatRegisteredAnswers = registeredAnswers[currentQuestionIdx].flat(2);\n  const distinctUsers = [...new Set(flatRegisteredAnswers)].length;\n\n  const percentageValue = Math.trunc((distinctUsers / connectionCount) * 100);\n  const percentageString = Number.isNaN(percentageValue)\n    ? \"\"\n    : `(${percentageValue}%)`;\n\n  return `${distinctUsers}/${connectionCount} ${percentageString}`;\n};\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport AskScreen from \"./AskScreen\";\nimport { getCurrentQuestion } from \"../selectors/questions\";\nimport {\n  getAnswerCountForCurrentQuestion,\n  getReceivedAnswersCounter\n} from \"../selectors/answers\";\nimport { incrementQuestionIdx, decrementQuestionIdx } from \"../actions/server\";\nimport { runCurrentCode } from \"../actions/doppio\";\nimport { hasPreviousQuestion, hasNextQuestion } from \"../selectors/server\";\nimport { resetTerminal } from \"../actions/terminal\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: getCurrentQuestion(state),\n  countedAnswers: getAnswerCountForCurrentQuestion(state),\n  receivedAnswersCounter: getReceivedAnswersCounter(state),\n  hasPreviousQuestion: hasPreviousQuestion(state),\n  hasNextQuestion: hasNextQuestion(state),\n  acceptingAnswers: state.server.acceptingAnswers,\n  isBusy: state.server.isBusy\n});\n\nconst mapDispatchToProps = {\n  incrementQuestionIdx,\n  decrementQuestionIdx,\n  runCurrentCode,\n  resetTerminal\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(AskScreen));\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n\nexport const reorderArray = (array, oldIndex, newIndex) => {\n  if (array) {\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  }\n};\n\nexport const updateQuestionIndexes = array =>\n  array.map((element, i) => ({ ...element, questionIdx: i }));\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX,\n  TOGGLE_ACCEPTING_ANSWERS,\n  TOGGLE_ACCEPTING_CONNECTIONS,\n  NEXT_ASK_SCREEN_STATE,\n  SET_ASK_SCREEN_STATE,\n  TOGGLE_BUSY\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestionIdx: 0,\n    currentAskScreenState: 0,\n    acceptingAnswers: false,\n    acceptingConnections: true,\n    isBusy: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return {\n        ...state,\n        currentQuestionIdx:\n          action.payload.questionIdx < 0 ? 0 : action.payload.questionIdx\n      };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    case TOGGLE_ACCEPTING_ANSWERS:\n      return { ...state, acceptingAnswers: !state.acceptingAnswers };\n\n    case TOGGLE_ACCEPTING_CONNECTIONS:\n      return { ...state, acceptingConnections: !state.acceptingConnections };\n\n    case TOGGLE_BUSY:\n      return { ...state, isBusy: !state.isBusy };\n\n    case NEXT_ASK_SCREEN_STATE:\n      return {\n        ...state,\n        currentAskScreenState: (state.currentAskScreenState + 1) % 4\n      };\n\n    case SET_ASK_SCREEN_STATE:\n      return {\n        ...state,\n        currentAskScreenState: action.payload.newState\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { ADD_LINE, RESET_TERMINAL } from \"../actions/terminal\";\n\n// Reducers\n\nexport const terminal = (state = [], action) => {\n  switch (action.type) {\n    case ADD_LINE: {\n      return action.payload.addNewLine\n        ? [...state, action.payload.line + \"\\n\"]\n        : [...state, action.payload.line];\n    }\n\n    case RESET_TERMINAL: {\n      console.log(\"Reset\");\n      return [];\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default terminal;\n","import { REGISTER_ANSWERS, INIT_ANSWERS } from \"../actions/answers\";\n\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\n\n// Reducers\n\nexport const registeredAnswers = (state = [], action) => {\n  switch (action.type) {\n    case INIT_ANSWERS: {\n      return action.payload.array;\n    }\n    case REGISTER_ANSWERS: {\n      const { answerIdxArray, questionIdx, userId } = action.payload;\n\n      const registeredAnswers = changeInArray(state, questionIdx, question =>\n        question.map((answer, i) => {\n          if (answerIdxArray.includes(i)) {\n            return [...answer, userId];\n          }\n          return answer;\n        })\n      );\n\n      return registeredAnswers;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default registeredAnswers;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questions\";\nimport { server } from \"./server\";\nimport { terminal } from \"./terminal\";\nimport { registeredAnswers } from \"./answers\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  registeredAnswers,\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion,\n  terminal\n});\n","import nanoid from \"nanoid\";\nimport {\n  // Question\n  ADD_QUESTION,\n  SORT_QUESTION,\n  DELETE_QUESTION,\n  EDIT_QUESTION_MODE,\n  EDIT_QUESTION_TYPE,\n  EDIT_QUESTION_TEXT,\n  EDIT_QUESTION_CODE,\n  // Answers\n  ADD_ANSWER,\n  SORT_ANSWER,\n  DELETE_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_SINGLE_ANSWER,\n  SET_CORRECT_MULTI_ANSWER,\n  // Current Question\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questions\";\nimport {\n  changeInArray,\n  deleteInArray,\n  reorderArray,\n  updateQuestionIndexes\n} from \"../../shared/util/QuestionHelpers\";\n\nconst newQuestion = (idx = 0) => ({\n  id: nanoid(6),\n  type: \"question\",\n  mode: \"single\",\n  text: \"<p>New question</p>\",\n  questionIdx: idx,\n  code: null,\n  answers: [\n    {\n      id: nanoid(6),\n      text: \"Answer A\",\n      isCorrect: true\n    },\n    {\n      id: nanoid(6),\n      text: \"Answer B\",\n      isCorrect: false\n    }\n  ]\n});\n\nconst newAnswer = () => ({\n  id: nanoid(6),\n  text: \"New answer\",\n  isCorrect: false\n});\n\n// Reducers\n\n// This is the selected question in the questionEditor, don't confuse with\n// selected question in server state\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const questionsCount = state.length;\n      deepClonedState.push(newQuestion(questionsCount));\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_TEXT: {\n      const { questionIdx, text } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        text\n      };\n\n      return deepClonedState;\n    }\n\n    case EDIT_QUESTION_CODE: {\n      const { questionIdx, code } = action.payload;\n\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        code\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_MODE: {\n      const { questionIdx, newMode } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      let firstAnswerFound = false;\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => {\n          if (answer.isCorrect && !firstAnswerFound) {\n            firstAnswerFound = true;\n            return { ...answer, isCorrect: true };\n          }\n\n          return { ...answer, isCorrect: false };\n        }),\n        mode: newMode\n      };\n\n      return deepClonedState;\n    }\n    case EDIT_QUESTION_TYPE: {\n      const { questionIdx, newType, oldType } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      deepClonedState[questionIdx] = {\n        ...deepClonedState[questionIdx],\n        answers: state[questionIdx].answers.map(answer => ({\n          ...answer,\n          isCorrect: false\n        })),\n        type: newType\n      };\n\n      // Make sure, there is at least one correct answer\n      if (newType === \"question\" && oldType === \"vote\") {\n        deepClonedState[questionIdx].answers[0].isCorrect = true;\n      }\n\n      return deepClonedState;\n    }\n    case DELETE_QUESTION: {\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      const updatedQuestions = [\n        ...deepClonedState.slice(0, action.payload.questionIdx),\n        ...deepClonedState.slice(action.payload.questionIdx + 1)\n      ];\n\n      return updatedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n      deepClonedState[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer()]\n      };\n      return deepClonedState;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, text, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      return changeInArray(deepClonedState, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          text\n        }))\n      }));\n    }\n\n    case SET_CORRECT_SINGLE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: true\n              }\n            : {\n                ...answer,\n                isCorrect: false\n              }\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case SET_CORRECT_MULTI_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      const modAnswers = deepClonedState[questionIdx].answers.map(\n        (answer, i) =>\n          i === answerIdx\n            ? {\n                ...answer,\n                isCorrect: !answer.isCorrect\n              }\n            : answer\n      );\n\n      deepClonedState[questionIdx].answers = modAnswers;\n      return deepClonedState;\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    case SORT_QUESTION: {\n      const { newQuestionIdx, oldQuestionIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(deepClonedState, oldQuestionIdx, newQuestionIdx);\n\n      const reindexedArray = updateQuestionIndexes(deepClonedState);\n\n      return reindexedArray;\n    }\n\n    case SORT_ANSWER: {\n      const { questionIdx, newAnswerIdx, oldAnswerIdx } = action.payload;\n      const deepClonedState = JSON.parse(JSON.stringify(state));\n\n      reorderArray(\n        deepClonedState[questionIdx].answers,\n        oldAnswerIdx,\n        newAnswerIdx\n      );\n\n      return deepClonedState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport ConnectFormServerContainer from \"./ConnectFormServerContainer\";\nimport QuestionEditorContainer from \"./QuestionEditorContainer\";\nimport AskScreenContainer from \"./AskScreenContainer\";\nimport mainServerReducer from \"../reducers/main\";\n\nconst serverStore = createStore(\n  mainServerReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={serverStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/server/create\"\n              component={ConnectFormServerContainer}\n            />\n            <Route exact path=\"/server/ask\" component={AskScreenContainer} />\n            <Route\n              exact\n              path=\"/server/editor\"\n              component={QuestionEditorContainer}\n            />\n            <Route\n              path=\"/server\"\n              render={() => <Redirect to=\"/server/editor\" />}\n            />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","import Logger from \"../../shared/util/Logger\";\nimport { setPeer, setConnectionStatus } from \"../../shared/actions/connection\";\nimport createPeer from \"../../shared/util/NetworkHelpers\";\n\n// Client Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\n// TODO: This is probably unnecessary b/c PeerJS keeps its own connection object, however API docs say, one should not rely on the PeerJS Object\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n\nexport function sendAnswers(answerIdxArray) {\n  return (dispatch, getState) => {\n    const {\n      client: { connection = null, currentQuestion = null }\n    } = getState();\n\n    if (\n      connection &&\n      currentQuestion &&\n      typeof answerIdxArray !== \"undefined\"\n    ) {\n      const msg = {\n        type: \"answer\",\n        payload: {\n          questionIdx: currentQuestion.questionIdx,\n          answerIdxArray,\n          userId: connection.provider.id\n        }\n      };\n      connection.send(msg);\n    }\n  };\n}\n\nexport function connectToServer() {\n  return async (dispatch, getState) => {\n    const {\n      client: { remoteServerId = null }\n    } = getState();\n\n    const peer = createPeer();\n\n    const dataHandler = data => {\n      const dataObj = JSON.parse(data);\n      const { type, payload } = dataObj;\n      Logger.info(\"Received Data: \", dataObj);\n      switch (type) {\n        case \"question\":\n          dispatch(setCurrentQuestion(payload));\n          break;\n\n        default:\n          Logger.error(\"ERROR: Client Data Handler Default Case\");\n      }\n    };\n\n    async function openAsync(connection) {\n      return new Promise((resolve, reject) => {\n        connection.on(\"open\", () => {\n          Logger.info(`Successfully connected to server ${connection.peer}`);\n          connection.on(\"data\", data => dataHandler(data));\n          resolve();\n        });\n        peer.on(\"error\", err => reject(err));\n      });\n    }\n\n    dispatch(setPeer(peer));\n\n    const connection = peer.connect(\n      remoteServerId,\n      { reliable: false }\n    );\n    dispatch(addConnection(connection));\n    dispatch(setConnectionStatus(1));\n    await openAsync(connection);\n    dispatch(setConnectionStatus(2));\n\n    peer.on(\"error\", err => {\n      Logger.error(\"ERROR: \", err);\n      dispatch(setConnectionStatus(3));\n    });\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connection: null,\n    remoteServerId: \"\",\n    currentQuestion: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connection: action.payload.connection\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\n\nimport { setRemoteServerId, connectToServer } from \"../actions/client\";\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: () => dispatch(connectToServer())\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId,\n  connectionStatus: state.connection.status\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\",\n  validationError:\n    \"Only alphanumeric characters and '-','_' or spaces are allowed.\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Spinner } from \"reactstrap\";\nimport DefaultCard from \"./DefaultCard\";\nimport { TSpinnerCard, DSpinnerCard } from \"../types\";\n\nconst SpinnerCard = props => {\n  const { title, text } = props;\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <DefaultCard title={title}>\n        <div className=\"d-flex flex-column justify-content-center\">\n          <div style={{ textAlign: \"center\" }}>\n            <Spinner size=\"lg\" />\n          </div>\n          {text && (\n            <div\n              style={{\n                textAlign: \"center\"\n              }}\n              className=\"mt-4 text-muted\"\n            >\n              {text}\n            </div>\n          )}\n        </div>\n      </DefaultCard>\n    </>\n  );\n};\n\nSpinnerCard.propTypes = TSpinnerCard;\nSpinnerCard.defaultProps = DSpinnerCard;\n\nexport default SpinnerCard;\n","const isConnected = state => {\n  const {\n    client: { connection }\n  } = state;\n  return connection && connection.open;\n};\n\nexport default isConnected;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport { changeInArray } from \"../../shared/util/QuestionHelpers\";\nimport { TQuestion, DQuestion } from \"../../shared/types\";\nimport { sendAnswers } from \"../actions/client\";\nimport SpinnerCard from \"../../shared/components/SpinnerCard\";\nimport QuestionCard from \"../../shared/components/QuestionCard\";\nimport isConnected from \"../selectors/client\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  isConnected: isConnected(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSendAnswers: answerIdxArray => dispatch(sendAnswers(answerIdxArray))\n});\n\nclass AnswerScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      disabled: false,\n      selectedAnswersIdx: []\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestion } = this.props;\n    if (currentQuestion !== prevProps.currentQuestion) {\n      this.resetState();\n      this.initSelectedAnswers(currentQuestion.answers.length);\n    }\n  }\n\n  toggleSelectedAnswers = answerIdx => {\n    this.setState(prevState => {\n      const { selectedAnswersIdx } = prevState;\n      return {\n        ...prevState,\n        selectedAnswersIdx: changeInArray(\n          selectedAnswersIdx,\n          answerIdx,\n          e => !e\n        )\n      };\n    });\n  };\n\n  toggleDisabled = () => {\n    this.setState(prevState => ({\n      disabled: !prevState.disabled\n    }));\n  };\n\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  initSelectedAnswers(answerCount) {\n    this.setState({ selectedAnswersIdx: Array(answerCount).fill(false) });\n  }\n\n  render() {\n    const { currentQuestion, onSendAnswers, isConnected } = this.props;\n    const { disabled, selectedAnswersIdx } = this.state;\n    const hasQuestion = Object.keys(currentQuestion).length > 0;\n    const commonProps = {\n      question: currentQuestion,\n      disabled,\n      selectedAnswersIdx,\n      toggleSelectedAnswers: this.toggleSelectedAnswers,\n      toggleDisabled: this.toggleDisabled,\n      onSendAnswers\n    };\n\n    return (\n      <Row className=\"justify-content-center\">\n        {isConnected ? (\n          hasQuestion ? (\n            <QuestionCard {...commonProps} />\n          ) : (\n            <SpinnerCard\n              title=\"Waiting For Question From Server\"\n              text=\"You're connected to the server, but the Quiz Session has not been started yet.\"\n            />\n          )\n        ) : (\n          <SpinnerCard\n            title=\"Connecting to Server\"\n            text=\"Trying to connect to the server.\"\n          />\n        )}\n      </Row>\n    );\n  }\n}\n\nAnswerScreen.propTypes = {\n  currentQuestion: TQuestion\n};\nAnswerScreen.defaultProps = {\n  currentQuestion: DQuestion\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AnswerScreen);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport mainClientReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectFormClientContainer from \"./ConnectFormClientContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst clientStore = createStore(\n  mainClientReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={clientStore}>\n      <>\n        <Header />\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/client/connect/:serverId?\"\n              component={ConnectFormClientContainer}\n            />\n            <Route exact path=\"/client/answer\" component={AnswerScreen} />\n            <Route\n              path=\"/client\"\n              render={() => <Redirect to=\"/client/connect\" />}\n            />\n          </Switch>\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport snarkdown from \"snarkdown\";\nimport raw from \"raw.macro\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow-none\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>\n              <div\n                className=\"markdown-body\"\n                style={{\n                  fontFamily: \"IBM Plex Sans\"\n                }}\n                // eslint-disable-next-line\n                dangerouslySetInnerHTML={{\n                  __html: snarkdown(raw(\"../public/README.MD\"))\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <Card className=\"shadow-none\">\n      <CardHeader>\n        <h4 className=\"my-0\">{header}</h4>\n      </CardHeader>\n      <CardBody className=\"d-flex flex-column\">\n        <CardText>\n          <span\n            role=\"img\"\n            aria-label=\"Student\"\n            className=\"d-block\"\n            style={{ fontSize: \"4em\" }}\n          >\n            {emoji}\n          </span>\n\n          <span>{text}</span>\n        </CardText>\n        {children}\n      </CardBody>\n    </Card>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Button, Container, CardDeck } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./shared/components/SelectBox\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-5 mx-auto text-center mt-5\">\n      <h1 className=\"display-3 font-weight-bold text-dark\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <CardDeck className=\"text-center\">\n        <SelectBox\n          header=\"For Students\"\n          text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n          emoji=\"👩‍🎓\"\n        >\n          <Button\n            tag={Link}\n            to=\"/client/connect\"\n            size=\"lg\"\n            block\n            outline\n            color=\"primary\"\n            className=\"align-self-end mt-auto\"\n          >\n            Join Quiz Session\n          </Button>\n        </SelectBox>\n\n        <SelectBox\n          header=\"For Instructors\"\n          text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n          emoji=\"👩‍🏫\"\n        >\n          <>\n            <div className=\"text-danger mb-3\">\n              <small className=\"text-muted\">\n                This app will load ~60 MB of Java Runtime files.\n              </small>\n            </div>\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              size=\"lg\"\n              block\n              outline\n              color=\"primary\"\n              className=\"align-self-end mt-auto\"\n            >\n              Create Quiz Session\n            </Button>\n          </>\n        </SelectBox>\n      </CardDeck>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./shared/scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 96;"],"sourceRoot":""}