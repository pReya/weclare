{"version":3,"sources":["shared/components/Footer.js","shared/components/ConnectionIndicator.js","shared/components/Header.js","server/components/ServerHeaderContainer.js","shared/components/DefaultCard.js","shared/components/ConnectForm.js","server/actions/server.js","shared/actions/connection.js","server/components/CreatorContainer.js","server/components/QuestionContent.js","server/components/QuestionList.js","server/actions/questionEditor.js","server/components/QuestionEditor.js","server/components/Waiter.js","server/reducers/helpers.js","server/reducers/questionEditor.js","server/reducers/server.js","shared/reducers/connection.js","server/reducers/main.js","server/components/Server.js","client/actions/client.js","client/reducers/client.js","client/reducers/main.js","client/components/ClientHeaderContainer.js","client/components/ConnectorContainer.js","client/components/AnswerScreen.js","client/components/Client.js","About.js","SelectBox.js","StartPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","reactstrap_es","href","GithubCircleIcon_default","ConnectionIndicator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropDown","bind","assertThisInitialized","state","dropdownOpen","setState","_this$props","status","isServer","numberOfClients","ownServerId","value","client","server","concat","includes","addonType","isOpen","toggle","caret","header","divider","style","cursor","QrcodeIcon_default","document","queryCommandSupported","onClick","content","tempInput","body","appendChild","select","execCommand","removeChild","ClipboardTextIcon_default","LinkIcon_default","disabled","React","Component","defaultProps","Header","isClient","Fragment","expand","tag","Link","to","ConnectionIndicator_ConnectionIndicator","connect","connection","peer","keys","connections","length","components_Header","assign","DefaultCard","title","text","children","badge","md","color","pill","ConnectForm","onChangeServerId","onClickConnect","serverId","buttonText","history","location","components_DefaultCard","row","id","type","onChange","e","target","push","ADD_CONNECTION","SET_SERVER_ID","SET_PEER","SET_CONNECTION_STATUS","setServerStatus","newStatus","payload","setPeer","createPeer","dispatch","Peer","debug","secure","on","console","log","data","addConnection","err","staticProps","withRouter","newServerId","newId","components_ConnectForm","QuestionContent","question","selectedQuestion","onEditAnswerText","onEditQuestionText","onAddAnswer","onSetCorrectAnswer","onDeleteAnswer","onDeleteQuestion","for","sm","questionText","answers","map","i","QuestionContent_SingleChoiceAnswer","isCorrectAnswer","correctAnswers","number","answer","answerText","key","outline","block","SingleChoiceAnswer","addon","checked","name","close","QuestionList","questions","onSelectQuestion","onAddQuestion","flush","q","preventDefault","action","active","Add_default","paddingBottom","SELECT_QUESTION","ADD_QUESTION","EDIT_QUESTION_TEXT","DELETE_QUESTION","LOAD_QUESTIONS","selectQuestion","questionIdx","SET_CORRECT_ANSWER","ADD_ANSWER","EDIT_ANSWER_TEXT","DELETE_ANSWER","mapDispatchToProps","addQuestion","getState","questionEditor","editQuestionText","deleteQuestion","addAnswer","editAnswerText","answerIdx","deleteAnswer","setCorrectAnswer","loadQuestions","newQuestions","QuestionEditor","localStorage","getItem","JSON","parse","components_QuestionList","components_QuestionContent","setItem","stringify","setCurrentQuestionIdx","currentQuestionIdx","currentQuestion","hasClients","nextQuestionIdx","Helmet","msg","objectSpread","String","forEach","send","sendCurrentQuestion","changeInArray","array","index","changer","item","newQuestion","questionType","newAnswer","arguments","undefined","toConsumableArray","combineReducers","_action$payload","clonedQuestions","slice","_action$payload2","filter","_action$payload3","_action$payload4","store","createStore","mainReducer","composeWithDevTools","applyMiddleware","thunk","Server","es","ServerHeaderContainer","Route","exact","path","component","CreatorContainer","Waiter","SET_REMOTE_SERVER_ID","SET_CURRENT_QUESTION","remoteServerId","clickConnect","error","reliable","Client","ClientHeaderContainer","ConnectorContainer","AnswerScreen","About","SelectBox","emoji","role","aria-label","fontSize","StartPage","src_SelectBox","App","BrowserRouter","basename","process","titleTemplate","defaultTitle","Switch","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9775834a.chunk.js","sourcesContent":["import React from \"react\";\nimport GithubCircleIcon from \"mdi-react/GithubCircleIcon\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <hr />\n      <footer className=\"container\">\n        <Row>\n          <Col>\n            <p className=\"font-weight-light text-muted\">\n              &copy; 2018 Moritz Stückler – HAW Hamburg\n            </p>\n          </Col>\n          <Col className=\"text-right\">\n            <a href=\"https://github.com/pReya/weclare/\">\n              <GithubCircleIcon />\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\nimport LinkIcon from \"mdi-react/LinkIcon\";\nimport ClipboardTextIcon from \"mdi-react/ClipboardTextIcon\";\nimport QrcodeIcon from \"mdi-react/QrcodeIcon\";\n\nconst copyToClipboard = content => {\n  const tempInput = document.createElement(\"input\");\n  tempInput.style = \"position: absolute; left: -1000px; top: -1000px\";\n  tempInput.value = content;\n  document.body.appendChild(tempInput);\n  tempInput.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(tempInput);\n};\n\nexport default class ConnectionIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropDown() {\n    const { dropdownOpen } = this.state;\n    this.setState({\n      dropdownOpen: !dropdownOpen\n    });\n  }\n\n  // \"<span role='img' aria-label='keyboard'>🎮</span> Ready\",\n  // \"<span role='img' aria-label='questionmark'>❓</span> Waiting for connections\",\n  // `<span role='img' aria-label='success'>✅</span> ${numberOfClients} Clients Connected`,\n  // \"<span role='img' aria-label='cross'>❌</span> Error\"\n\n  render() {\n    const { status, isServer, numberOfClients, ownServerId } = this.props;\n    const { dropdownOpen } = this.state;\n    const statusDescriptions = {\n      client: [\"⌨️ Ready\", \"Trying to connect\", \"✅ Connected\", \"❌ Error\"],\n      server: [\n        \"⌨️ Ready\",\n        \"❓ Waiting for connections\",\n        `✅ ${numberOfClients} Clients Connected`,\n        \"❌ Error\"\n      ]\n    };\n    const componentRole = isServer ? \"server\" : \"client\";\n    const value = statusDescriptions[componentRole][status];\n    return (\n      <InputGroup className=\"justify-content-center col-md-8\">\n        {isServer && [1, 2, 3].includes(status) ? (\n          <InputGroupButtonDropdown\n            addonType=\"prepend\"\n            isOpen={dropdownOpen}\n            toggle={this.toggleDropDown}\n          >\n            <DropdownToggle caret className=\"font-weight-bold\">\n              {`${ownServerId} `}\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Share</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <QrcodeIcon className=\"text-muted\" />\n                {`  `}\n                Show QR Code\n              </DropdownItem>\n              {document.queryCommandSupported(\"copy\") && (\n                <DropdownItem\n                  onClick={() => {\n                    copyToClipboard(ownServerId);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <ClipboardTextIcon className=\"text-muted\" />\n                  {`  `}\n                  Copy ID\n                </DropdownItem>\n              )}\n              <DropdownItem style={{ cursor: \"pointer\" }}>\n                <LinkIcon className=\"text-muted\" />\n                {`  `}\n                Copy Link\n              </DropdownItem>\n            </DropdownMenu>\n          </InputGroupButtonDropdown>\n        ) : null}\n        <Input className=\"text-center col-5\" value={value} disabled />\n      </InputGroup>\n    );\n  }\n}\n\nConnectionIndicator.propTypes = {\n  isServer: PropTypes.bool,\n  status: PropTypes.number.isRequired,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nConnectionIndicator.defaultProps = {\n  isServer: false,\n  numberOfClients: 0,\n  ownServerId: \"\"\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport ConnectionIndicator from \"./ConnectionIndicator\";\n\nconst Header = props => {\n  const { status, numberOfClients, isServer, isClient, ownServerId } = props;\n  return (\n    <>\n      <Navbar\n        expand=\"sm\"\n        className=\"mb-4 border-bottom shadow-sm d-flex flex-row justify-content-between\"\n      >\n        <Container>\n          <NavbarBrand tag={Link} to=\"/\">\n            Weclare\n            {isServer ? \" Server\" : \" Client\"}\n          </NavbarBrand>\n          {(isServer || isClient) && (\n            <ConnectionIndicator\n              isServer={isServer}\n              status={status}\n              numberOfClients={numberOfClients}\n              ownServerId={ownServerId}\n            />\n          )}\n\n          <Nav className=\"flex-row\">\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                Help\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/about\">\n                About\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  isServer: PropTypes.bool,\n  isClient: PropTypes.bool,\n  status: PropTypes.number,\n  numberOfClients: PropTypes.number,\n  ownServerId: PropTypes.string\n};\n\nHeader.defaultProps = {\n  isServer: false,\n  isClient: false,\n  numberOfClients: 0,\n  ownServerId: \"\",\n  status: 0\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status,\n  numberOfClients: state.connection.peer\n    ? Object.keys(state.connection.peer.connections).length\n    : null,\n  ownServerId: state.server.ownServerId\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isServer {...props} />\n));\n","import React from \"react\";\nimport { Card, CardHeader, CardBody, CardText, Col, Badge } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction DefaultCard(props) {\n  const { title, text, children, badge } = props;\n\n  return (\n    <Col md=\"8\">\n      <Card className=\"shadow\">\n        <CardHeader>\n          {badge ? (\n            <h6 className=\"my-0 d-flex justify-content-between\">\n              {title}\n              <Badge color=\"dark\" pill>\n                {badge}\n              </Badge>\n            </h6>\n          ) : (\n            <h6 className=\"my-0\">{title}</h6>\n          )}\n        </CardHeader>\n        <CardBody>\n          {text && <CardText>{text}</CardText>}\n          {children}\n        </CardBody>\n      </Card>\n    </Col>\n  );\n}\n\nDefaultCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  badge: PropTypes.string,\n  children: PropTypes.node\n};\n\nDefaultCard.defaultProps = {\n  text: null,\n  children: null,\n  badge: null\n};\n\nexport default DefaultCard;\n","import React from \"react\";\nimport { Form, FormGroup, Button, Input, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactRouterPropTypes from \"react-router-prop-types\";\nimport DefaultCard from \"./DefaultCard\";\n\nconst ConnectForm = props => {\n  const {\n    onChangeServerId,\n    onClickConnect,\n    serverId,\n    title,\n    text,\n    buttonText,\n    history,\n    location\n  } = props;\n\n  return (\n    <DefaultCard title={title} text={text}>\n      <Form>\n        <FormGroup row className=\"form-row\">\n          <Col md={6}>\n            <Input\n              id=\"serverId\"\n              type=\"text\"\n              value={serverId}\n              onChange={e => onChangeServerId(e.target.value)}\n            />\n          </Col>\n          <Col md={3}>\n            <Button\n              type=\"button\"\n              id=\"connect\"\n              className=\"btn-block\"\n              onClick={() => {\n                onClickConnect(serverId);\n                if (history && location) {\n                  history.push(location);\n                }\n              }}\n            >\n              {buttonText}\n            </Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    </DefaultCard>\n  );\n};\n\nConnectForm.propTypes = {\n  onChangeServerId: PropTypes.func.isRequired,\n  onClickConnect: PropTypes.func.isRequired,\n  serverId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  buttonText: PropTypes.string,\n  history: ReactRouterPropTypes.history.isRequired,\n  location: PropTypes.string.isRequired\n};\n\nConnectForm.defaultProps = {\n  buttonText: \"Connect\"\n};\n\nexport default ConnectForm;\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_SERVER_ID = \"SET_SERVER_ID\";\nexport const SET_CURRENT_QUESTION_IDX = \"SET_CURRENT_QUESTION_IDX\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setServerId(newId) {\n  return {\n    type: SET_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestionIdx(questionIdx) {\n  return {\n    type: \"SET_CURRENT_QUESTION_IDX\",\n    payload: {\n      questionIdx\n    }\n  };\n}\n","export const SET_PEER = \"SET_PEER\";\nexport const SET_CONNECTION_STATUS = \"SET_CONNECTION_STATUS\";\n\nexport function setServerStatus(newStatus) {\n  return {\n    type: SET_CONNECTION_STATUS,\n    payload: {\n      newStatus\n    }\n  };\n}\n\nexport function setPeer(peer) {\n  return {\n    type: SET_PEER,\n    payload: {\n      peer\n    }\n  };\n}\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { addConnection, setServerId } from \"../actions/server\";\nimport { setPeer, setServerStatus } from \"../../shared/actions/connection\";\n\nconst createPeer = (ownServerId, dispatch) => {\n  const peer = new Peer(ownServerId, { debug: 3, secure: true });\n  dispatch(setPeer(peer));\n\n  peer.on(\"open\", () => {\n    console.log(\"Connection Opened\");\n    dispatch(setServerStatus(1));\n  });\n\n  peer.on(\"connection\", connection => {\n    connection.on(\"data\", data => console.log(data));\n    dispatch(setServerStatus(2));\n    dispatch(addConnection(connection));\n  });\n\n  peer.on(\"error\", err => {\n    console.log(\"FEHLER: \", err);\n    dispatch(setServerStatus(3));\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setServerId(newServerId)),\n  onClickConnect: ownServerId => {\n    createPeer(ownServerId, dispatch);\n  }\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.server.ownServerId\n});\n\nconst staticProps = {\n  title: \"Create a New Server Id\",\n  text:\n    \"Please define your individual Server Id that you can give to participants.\",\n  buttonText: \"Create\",\n  location: \"/server/wait\"\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(props => (\n    <Row className=\"justify-content-center\">\n      <ConnectForm {...props} {...staticProps} />\n    </Row>\n  ))\n);\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Form,\n  FormGroup,\n  Button,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Label\n} from \"reactstrap\";\n\nconst QuestionContent = props => {\n  const {\n    question,\n    selectedQuestion,\n    onEditAnswerText,\n    onEditQuestionText,\n    onAddAnswer,\n    onSetCorrectAnswer,\n    onDeleteAnswer,\n    onDeleteQuestion\n  } = props;\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0\">Edit Question</h6>\n      </CardHeader>\n      <CardBody>\n        {selectedQuestion != null ? (\n          <Form>\n            <FormGroup row className=\"form-row\">\n              <Label for=\"question\" sm={2}>\n                Question Text\n              </Label>\n              <Input\n                id=\"question\"\n                type=\"text\"\n                onChange={e =>\n                  onEditQuestionText(selectedQuestion, e.target.value)\n                }\n                value={question.questionText}\n              />\n            </FormGroup>\n            <FormGroup row className=\"form-row\">\n              <Label sm={8}>Answers (Check the correct answer)</Label>\n              {question.answers.map((a, i) => (\n                <SingleChoiceAnswer\n                  isCorrectAnswer={question.correctAnswers === i}\n                  selectedQuestion={selectedQuestion}\n                  number={i}\n                  answer={a.answerText}\n                  key={i}\n                  onEditAnswerText={e => {\n                    onEditAnswerText(selectedQuestion, e.target.value, i);\n                  }}\n                  onSetCorrectAnswer={onSetCorrectAnswer}\n                  onDeleteAnswer={onDeleteAnswer}\n                />\n              ))}\n              <Button\n                outline\n                block\n                color=\"success\"\n                onClick={() => onAddAnswer(selectedQuestion)}\n              >\n                Add answer\n              </Button>\n              <Button\n                outline\n                block\n                color=\"danger\"\n                onClick={() => onDeleteQuestion(selectedQuestion)}\n              >\n                Delete Question\n              </Button>\n            </FormGroup>\n          </Form>\n        ) : (\n          \"No question selected\"\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nQuestionContent.propTypes = {\n  question: PropTypes.shape({\n    questionType: PropTypes.string,\n    questionText: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.object)\n  }),\n  selectedQuestion: PropTypes.number,\n  onEditAnswerText: PropTypes.func.isRequired,\n  onEditQuestionText: PropTypes.func.isRequired,\n  onAddAnswer: PropTypes.func.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired,\n  onDeleteQuestion: PropTypes.func.isRequired\n};\n\nQuestionContent.defaultProps = {\n  question: {},\n  selectedQuestion: 0\n};\n\nconst SingleChoiceAnswer = props => {\n  const {\n    answer,\n    number,\n    selectedQuestion,\n    isCorrectAnswer,\n    onEditAnswerText,\n    onSetCorrectAnswer,\n    onDeleteAnswer\n  } = props;\n  return (\n    <InputGroup className=\"mb-2\">\n      <InputGroupAddon addonType=\"prepend\">\n        <InputGroupText>\n          <Input\n            addon\n            checked={isCorrectAnswer}\n            type=\"radio\"\n            name=\"answer\"\n            onChange={() => {\n              onSetCorrectAnswer(selectedQuestion, number);\n            }}\n          />\n        </InputGroupText>\n      </InputGroupAddon>\n      <Input value={answer} onChange={onEditAnswerText} />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>\n          <Button\n            outline\n            close\n            onClick={() => {\n              onDeleteAnswer(selectedQuestion, number);\n            }}\n          />\n        </InputGroupText>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n};\n\nSingleChoiceAnswer.propTypes = {\n  selectedQuestion: PropTypes.number.isRequired,\n  answer: PropTypes.string.isRequired,\n  onEditAnswerText: PropTypes.func.isRequired,\n  number: PropTypes.number.isRequired,\n  isCorrectAnswer: PropTypes.bool.isRequired,\n  onSetCorrectAnswer: PropTypes.func.isRequired,\n  onDeleteAnswer: PropTypes.func.isRequired\n};\n\nexport default QuestionContent;\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport PropTypes from \"prop-types\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nimport {\n  Badge,\n  Card,\n  CardHeader,\n  CardFooter,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText\n} from \"reactstrap\";\n\nconst QuestionList = props => {\n  const {\n    questions,\n    onSelectQuestion,\n    selectedQuestion,\n    onAddQuestion\n  } = props;\n  return (\n    <Card className=\"shadow\">\n      <CardHeader>\n        <h6 className=\"my-0 d-flex justify-content-between\">\n          Questions{\" \"}\n          <Badge color=\"dark\" pill>\n            {questions.length}\n          </Badge>\n        </h6>\n      </CardHeader>\n\n      <ListGroup flush>\n        {questions.map((q, i) => (\n          <ListGroupItem\n            key={i}\n            tag=\"a\"\n            href=\"#\"\n            onClick={e => {\n              e.preventDefault();\n              onSelectQuestion(i);\n            }}\n            action\n            active={selectedQuestion === i}\n          >\n            <ListGroupItemText className=\"mb-0\">\n              {q.questionText}\n            </ListGroupItemText>\n          </ListGroupItem>\n        ))}\n        {questions.length === 0 && (\n          <ListGroupItem disabled>\n            <ListGroupItemText className=\"mb-0\">No questions</ListGroupItemText>\n          </ListGroupItem>\n        )}\n      </ListGroup>\n      <CardFooter\n        tag=\"button\"\n        className=\"cardFooterButton\"\n        onClick={() => {\n          onAddQuestion();\n        }}\n      >\n        <AddIcon className=\"text-success\" style={{ paddingBottom: \"3px\" }} />\n        Add\n      </CardFooter>\n    </Card>\n  );\n};\n\nQuestionList.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object),\n  selectedQuestion: PropTypes.number,\n  onSelectQuestion: PropTypes.func.isRequired,\n  onAddQuestion: PropTypes.func.isRequired\n};\n\nQuestionList.defaultProps = {\n  questions: [\"No questions\"],\n  selectedQuestion: null\n};\nexport default QuestionList;\n","// Question Editor Actions\nexport const SELECT_QUESTION = \"SELECT_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const EDIT_QUESTION_TEXT = \"EDIT_QUESTION_TEXT\";\nexport const DELETE_QUESTION = \"DELETE_QUESTION\";\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\n\nexport function selectQuestion(questionIdx) {\n  return {\n    type: SELECT_QUESTION,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function addQuestion() {\n  return (dispatch, getState) => {\n    // 1: add question to `questions` state\n    dispatch({ type: ADD_QUESTION });\n\n    // 2: select newest question as `selectedQuestion`\n    const { questionEditor } = getState();\n    dispatch(selectQuestion(questionEditor.length - 1));\n  };\n}\n\nexport function editQuestionText(questionIdx, questionText) {\n  return {\n    type: EDIT_QUESTION_TEXT,\n    payload: {\n      questionIdx,\n      questionText\n    }\n  };\n}\n\nexport function deleteQuestion(questionIdx) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DELETE_QUESTION,\n      payload: {\n        questionIdx\n      }\n    });\n\n    // 2: select newest question as `selectedQuestion`\n    const { selectedQuestion } = getState();\n    dispatch(selectQuestion(selectedQuestion - 1));\n  };\n}\n\nexport function loadQuestions(newQuestions) {\n  return {\n    type: LOAD_QUESTIONS,\n    payload: {\n      newQuestions\n    }\n  };\n}\n\n// Answer Actions\nexport const SET_CORRECT_ANSWER = \"SET_CORRECT_ANSWER\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const EDIT_ANSWER_TEXT = \"EDIT_ANSWER_TEXT\";\nexport const DELETE_ANSWER = \"DELETE_ANSWER\";\n\nexport function setCorrectAnswer(questionIdx, answerIdx) {\n  return {\n    type: SET_CORRECT_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n\nexport function addAnswer(questionIdx) {\n  return {\n    type: ADD_ANSWER,\n    payload: {\n      questionIdx\n    }\n  };\n}\n\nexport function editAnswerText(questionIdx, answerText, answerIdx) {\n  return {\n    type: EDIT_ANSWER_TEXT,\n    payload: {\n      questionIdx,\n      answerText,\n      answerIdx\n    }\n  };\n}\n\nexport function deleteAnswer(questionIdx, answerIdx) {\n  return {\n    type: DELETE_ANSWER,\n    payload: {\n      questionIdx,\n      answerIdx\n    }\n  };\n}\n","import React from \"react\";\nimport { Col, Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionContent from \"./QuestionContent\";\nimport QuestionList from \"./QuestionList\";\nimport {\n  selectQuestion,\n  addQuestion,\n  editQuestionText,\n  deleteQuestion,\n  loadQuestions,\n  setCorrectAnswer,\n  addAnswer,\n  editAnswerText,\n  deleteAnswer\n} from \"../actions/questionEditor\";\n\nconst mapStateToProps = state => ({\n  questions: state.questionEditor,\n  selectedQuestion: state.selectedQuestion\n});\n\nconst mapDispatchToProps = {\n  selectQuestion,\n  addQuestion,\n  editQuestionText,\n  deleteQuestion,\n  addAnswer,\n  editAnswerText,\n  deleteAnswer,\n  setCorrectAnswer,\n  loadQuestions\n};\n\nclass QuestionEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    const { loadQuestions } = this.props;\n    const newQuestions = localStorage.getItem(\"weclare\");\n    if (newQuestions) {\n      loadQuestions(JSON.parse(newQuestions));\n    }\n  }\n\n  render() {\n    const {\n      // props\n      selectedQuestion,\n      questions,\n      history,\n      location,\n      // actions\n      addQuestion,\n      selectQuestion,\n      editQuestionText,\n      deleteQuestion,\n      addAnswer,\n      editAnswerText,\n      deleteAnswer,\n      setCorrectAnswer\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <Row className=\"justify-content-center mb-4\">\n          <Col md=\"4\">\n            <QuestionList\n              questions={questions}\n              selectedQuestion={selectedQuestion}\n              onSelectQuestion={selectQuestion}\n              onAddQuestion={addQuestion}\n            />\n          </Col>\n          <Col md=\"8\">\n            <QuestionContent\n              question={questions[selectedQuestion]}\n              selectedQuestion={selectedQuestion}\n              onEditQuestionText={editQuestionText}\n              onEditAnswerText={editAnswerText}\n              onAddAnswer={addAnswer}\n              onSetCorrectAnswer={setCorrectAnswer}\n              onDeleteAnswer={deleteAnswer}\n              onDeleteQuestion={deleteQuestion}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-end\">\n          <Col md=\"2\">\n            <Button\n              outline\n              block\n              onClick={() => {\n                localStorage.setItem(\"weclare\", JSON.stringify(questions));\n                console.log(\"Saved to Storage\");\n                if (history) {\n                  history.push(\"/server/create\");\n                }\n              }}\n              color=\"success\"\n            >\n              Save & Continue\n            </Button>\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QuestionEditor)\n);\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\nimport { setCurrentQuestionIdx } from \"../actions/server\";\n\nconst sendCurrentQuestion = (connections, questions, currentQuestion) => {\n  console.log({ connections, questions, currentQuestion });\n  const msg = {\n    question: {\n      ...questions[currentQuestion],\n      questionIdx: String(currentQuestion)\n    }\n  };\n  if (connections.length > 0 && questions.length > 0) {\n    connections.forEach(connection => connection.send(JSON.stringify(msg)));\n  }\n  console.log(\"TEST1\");\n};\n\nconst Waiter = props => {\n  const {\n    connections,\n    questions,\n    currentQuestionIdx,\n    setCurrentQuestionIdx\n  } = props;\n  const hasClients = connections.length > 0;\n  const nextQuestionIdx = currentQuestionIdx + 1;\n\n  return (\n    <>\n      <Helmet>\n        <title>Waiting</title>\n      </Helmet>\n      <Row className=\"justify-content-center\">\n        <DefaultCard\n          title={hasClients ? \"Send questions\" : \"Waiting for participants\"}\n          text={\n            hasClients\n              ? \"Do you want to start the quiz?\"\n              : \"Can't start the quiz until there is at least one client connected.\"\n          }\n        >\n          {hasClients && (\n            <Button\n              outline\n              block\n              color=\"success\"\n              onClick={() => {\n                sendCurrentQuestion(connections, questions, currentQuestionIdx);\n                setCurrentQuestionIdx(nextQuestionIdx);\n              }}\n            >\n              Send Next Question\n            </Button>\n          )}\n        </DefaultCard>\n      </Row>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  connections: state.server.connections,\n  questions: state.questionEditor,\n  currentQuestionIdx: state.server.currentQuestion\n});\n\nconst mapDispatchToProps = {\n  setCurrentQuestionIdx\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Waiter);\n","export const changeInArray = (array, index, changer) =>\n  array.map((item, i) => (index === i ? changer(item) : item));\n\nexport const deleteInArray = (array, index) =>\n  array.filter((item, i) => index !== i);\n","import {\n  ADD_QUESTION,\n  EDIT_QUESTION_TEXT,\n  DELETE_QUESTION,\n  ADD_ANSWER,\n  EDIT_ANSWER_TEXT,\n  SET_CORRECT_ANSWER,\n  DELETE_ANSWER,\n  SELECT_QUESTION,\n  LOAD_QUESTIONS\n} from \"../actions/questionEditor\";\n\nimport { changeInArray, deleteInArray } from \"./helpers\";\n\nconst newQuestion = {\n  questionType: \"singleChoice\",\n  questionText: \"New question\",\n  correctAnswers: null,\n  answers: [\n    {\n      answerText: \"Answer A\"\n    },\n    {\n      answerText: \"Answer B\"\n    }\n  ]\n};\n\nconst newAnswer = {\n  answerText: \"New answer\"\n};\n\n// Reducers\n\nexport const selectedQuestion = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_QUESTION:\n      return action.payload.questionIdx;\n\n    default:\n      return state;\n  }\n};\n\nexport const questionEditor = (state = [], action) => {\n  switch (action.type) {\n    case ADD_QUESTION:\n      return [...state, newQuestion];\n\n    case EDIT_QUESTION_TEXT: {\n      // return changeInArray(\n      //   state.questions,\n      //   state.selectedQuestion,\n      //   q => ({\n      //     ...q,\n      //     questionText: action.payload.questionText\n      //   })\n      // );\n\n      const { questionIdx, questionText } = action.payload;\n\n      const clonedQuestions = state.slice();\n      clonedQuestions[questionIdx] = {\n        ...clonedQuestions[questionIdx],\n        questionText\n      };\n\n      return clonedQuestions;\n    }\n    case DELETE_QUESTION: {\n      const clonedQuestions = [\n        ...state.slice(0, action.payload.questionIdx),\n        ...state.slice(action.payload.questionIdx + 1)\n      ];\n\n      return clonedQuestions;\n    }\n\n    case DELETE_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        answers: deleteInArray(q.answers, answerIdx)\n      }));\n    }\n\n    case ADD_ANSWER: {\n      const { questionIdx } = action.payload;\n\n      const clonedQuestions = state.slice();\n      clonedQuestions[questionIdx] = {\n        ...state[questionIdx],\n        answers: [...state[questionIdx].answers, newAnswer]\n      };\n      return clonedQuestions;\n    }\n\n    case EDIT_ANSWER_TEXT: {\n      const { questionIdx, answerText, answerIdx } = action.payload;\n\n      // const clonedQuestions = state.slice();\n      // const clonedQuestion = Object.assign({}, clonedQuestions[questionIdx]);\n      // const clonedAnswers = clonedQuestion.answers.slice();\n      // const clonedAnswer = Object.assign({}, clonedAnswers[answerIdx]);\n      // clonedAnswer.answerText = answerText;\n      // clonedAnswers[answerIdx] = clonedAnswer;\n      // clonedQuestion.answers = clonedAnswers;\n      // clonedQuestions[questionIdx] = clonedQuestion;\n\n      // return clonedQuestions;\n\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        answers: changeInArray(q.answers, answerIdx, a => ({\n          ...a,\n          answerText\n        }))\n      }));\n    }\n\n    case SET_CORRECT_ANSWER: {\n      const { questionIdx, answerIdx } = action.payload;\n      return changeInArray(state, questionIdx, q => ({\n        ...q,\n        correctAnswers: answerIdx\n      }));\n    }\n\n    case LOAD_QUESTIONS: {\n      const { newQuestions } = action.payload;\n      return newQuestions;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import {\n  ADD_CONNECTION,\n  SET_SERVER_ID,\n  SET_CURRENT_QUESTION_IDX\n} from \"../actions/server\";\n\nexport const server = (\n  state = {\n    connections: [],\n    ownServerId: \"\",\n    currentQuestion: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CURRENT_QUESTION_IDX: {\n      return { ...state, currentQuestion: action.payload.questionIdx };\n    }\n\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_SERVER_ID:\n      return { ...state, ownServerId: action.payload.newId };\n\n    default:\n      return state;\n  }\n};\n\nexport default server;\n","import { SET_CONNECTION_STATUS, SET_PEER } from \"../actions/connection\";\n\nexport const connection = (\n  state = {\n    peer: null,\n    status: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_CONNECTION_STATUS:\n      return { ...state, status: action.payload.newStatus };\n\n    case SET_PEER:\n      return { ...state, peer: action.payload.peer };\n\n    default:\n      return state;\n  }\n};\n\nexport default connection;\n","import { combineReducers } from \"redux\";\nimport { questionEditor, selectedQuestion } from \"./questionEditor\";\nimport { server } from \"./server\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  server,\n  questionEditor,\n  selectedQuestion\n});\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ServerHeaderContainer\";\nimport CreatorContainer from \"./CreatorContainer\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport Waiter from \"./Waiter\";\nimport mainReducer from \"../reducers/main\";\n\nconst store = createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default () => (\n  <div>\n    <Provider store={store}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/server/create\" component={CreatorContainer} />\n          <Route exact path=\"/server/editor\" component={QuestionEditor} />\n          <Route exact path=\"/server/wait\" component={Waiter} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n","// Server Actions\nexport const ADD_CONNECTION = \"ADD_CONNECTION\";\nexport const SET_REMOTE_SERVER_ID = \"SET_REMOTE_SERVER_ID\";\nexport const SET_CURRENT_QUESTION = \"SET_CURRENT_QUESTION\";\n\nexport function addConnection(connection) {\n  return {\n    type: ADD_CONNECTION,\n    payload: {\n      connection\n    }\n  };\n}\n\nexport function setRemoteServerId(newId) {\n  return {\n    type: SET_REMOTE_SERVER_ID,\n    payload: {\n      newId\n    }\n  };\n}\n\nexport function setCurrentQuestion(newQuestion) {\n  return {\n    type: SET_CURRENT_QUESTION,\n    payload: {\n      newQuestion\n    }\n  };\n}\n","import {\n  ADD_CONNECTION,\n  SET_REMOTE_SERVER_ID,\n  SET_CURRENT_QUESTION\n} from \"../actions/client\";\n\nexport const client = (\n  state = {\n    connections: [],\n    remoteServerId: \"\",\n    questionIdx: null,\n    currentQuestion: {\n      // questionType: \"singleChoice\",\n      // questionText: \"Hallo Erste Frage?\",\n      // correctAnswers: 1,\n      // answers: [{ answerText: \"Answer A\" }, { answerText: \"Answer B\" }]\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_CONNECTION:\n      return {\n        ...state,\n        connections: [...state.connections, action.payload.connection]\n      };\n\n    case SET_REMOTE_SERVER_ID:\n      return { ...state, remoteServerId: action.payload.newId };\n\n    case SET_CURRENT_QUESTION:\n      return { ...state, currentQuestion: action.payload.newQuestion };\n\n    default:\n      return state;\n  }\n};\n\nexport default client;\n","import { combineReducers } from \"redux\";\nimport { client } from \"./client\";\nimport { connection } from \"../../shared/reducers/connection\";\n\nexport default combineReducers({\n  connection,\n  client\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../shared/components/Header\";\n\nconst mapStateToProps = state => ({\n  status: state.connection.status\n});\n\nexport default connect(mapStateToProps)(props => (\n  <Header isClient {...props} />\n));\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Peer from \"peerjs\";\nimport ConnectForm from \"../../shared/components/ConnectForm\";\nimport { setServerStatus, setPeer } from \"../../shared/actions/connection\";\nimport {\n  addConnection,\n  setRemoteServerId,\n  setCurrentQuestion\n} from \"../actions/client\";\n\nconst clickConnect = (serverId, dispatch) => {\n  const peer = new Peer({ debug: 3, secure: true });\n  dispatch(setPeer(peer));\n\n  peer.on(\"error\", err => {\n    console.error(err);\n    dispatch(setServerStatus(3));\n  });\n\n  const connection = peer.connect(\n    serverId,\n    { reliable: true }\n  );\n  dispatch(addConnection(connection));\n  dispatch(setServerStatus(1));\n\n  connection.on(\"open\", () => {\n    console.log(\"Client Connected\");\n    dispatch(setServerStatus(2));\n    connection.on(\"data\", data => {\n      console.log(\"Received data: \", data);\n      const msg = JSON.parse(data);\n      dispatch(setCurrentQuestion(msg.question));\n    });\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeServerId: newServerId => dispatch(setRemoteServerId(newServerId)),\n  onClickConnect: serverId => clickConnect(serverId, dispatch)\n});\n\nconst mapStateToProps = state => ({\n  serverId: state.client.remoteServerId\n});\n\nconst staticProps = {\n  title: \"Connect to Server\",\n  text:\n    \"Please enter a valid Server ID. You should receive this ID from your instructor.\",\n  buttonText: \"Connect\",\n  location: \"/client/answer\"\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(props => (\n  <Row className=\"justify-content-center\">\n    <ConnectForm {...props} {...staticProps} />\n  </Row>\n));\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport DefaultCard from \"../../shared/components/DefaultCard\";\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.client.currentQuestion,\n  questionIdx: state.client.questionIdx\n});\n\nconst AnswerScreen = props => {\n  const { currentQuestion } = props;\n  return (\n    <>\n      <Helmet>\n        <title>Answer question</title>\n      </Helmet>\n      <Row className=\"justify-content-center\">\n        <DefaultCard\n          title=\"Answer question\"\n          badge={currentQuestion.questionIdx}\n        >\n          <h4 className=\"text-center mb-4\">{currentQuestion.questionText}</h4>\n          {currentQuestion.answers &&\n            currentQuestion.answers.map((question, i) => (\n              <Button outline key={i} block color=\"success\">\n                {question.answerText}\n              </Button>\n            ))}\n        </DefaultCard>\n      </Row>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps)(AnswerScreen);\n","import React from \"react\";\nimport \"../../scss/App.scss\";\nimport { Provider } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { Route } from \"react-router-dom\";\nimport mainReducer from \"../reducers/main\";\nimport Footer from \"../../shared/components/Footer\";\nimport Header from \"./ClientHeaderContainer\";\nimport ConnectorContainer from \"./ConnectorContainer\";\nimport AnswerScreen from \"./AnswerScreen\";\n\nconst store = createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst Client = () => (\n  <div>\n    <Provider store={store}>\n      <>\n        <Header />\n        <Container>\n          <Route exact path=\"/client/connect\" component={ConnectorContainer} />\n          <Route exact path=\"/client/answer\" component={AnswerScreen} />\n          <Footer />\n        </Container>\n      </>\n    </Provider>\n  </div>\n);\n\nexport default Client;\n","import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody, Container } from \"reactstrap\";\nimport Header from \"./shared/components/Header\";\nimport Footer from \"./shared/components/Footer\";\n\nconst About = () => (\n  <>\n    <Header />\n    <Container>\n      <Row>\n        <Col md=\"12\">\n          <Card className=\"shadow\">\n            <CardHeader>\n              <h6 className=\"my-0\">About</h6>\n            </CardHeader>\n            <CardBody>Text123</CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </Container>\n  </>\n);\n\nexport default About;\n","import React from \"react\";\nimport { Card, CardText, CardBody, CardHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst SelectBox = props => {\n  const { header, text, children, emoji } = props;\n  return (\n    <div>\n      <Card className=\"shadow\">\n        <CardHeader>\n          <h4 className=\"my-0\">{header}</h4>\n        </CardHeader>\n        <CardBody>\n          <CardText>\n            <span\n              role=\"img\"\n              aria-label=\"Student\"\n              className=\"d-block\"\n              style={{ fontSize: \"4em\" }}\n            >\n              {emoji}\n            </span>\n\n            <span>{text}</span>\n          </CardText>\n          {children}\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSelectBox.defaultProps = {\n  header: \"\",\n  text: \"\",\n  children: \"\",\n  emoji: \"\"\n};\n\nSelectBox.propTypes = {\n  emoji: PropTypes.string,\n  header: PropTypes.string,\n  text: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default SelectBox;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Footer from \"./shared/components/Footer\";\nimport SelectBox from \"./SelectBox\";\nimport \"./scss/App.scss\";\n\nconst StartPage = () => (\n  <Container>\n    <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n      <h1 className=\"display-4\">Weclare</h1>\n      <p className=\"lead\">\n        A web based, peer-to-peer classroom response system, tailored to\n        computer science education at university level.\n      </p>\n    </div>\n\n    <Row>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Students\"\n            text=\"Start the client app, which allows you to connect to an existing session and answer questions.\"\n            emoji=\"👩‍🎓\"\n          >\n            <Button\n              tag={Link}\n              to=\"/client/connect\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Join Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n      <Col sm=\"6\">\n        <div className=\"card-deck mb-3 text-center\">\n          <SelectBox\n            header=\"For Instructors\"\n            text=\"Start the server app, which allows you to create new question sets and accept connections from students.\"\n            emoji=\"👩‍🏫\"\n          >\n            <Button\n              tag={Link}\n              to=\"/server/editor\"\n              className=\"btn btn-lg btn-block btn-outline-primary\"\n            >\n              Create Quiz\n            </Button>\n          </SelectBox>\n        </div>\n      </Col>\n    </Row>\n    <Footer />\n  </Container>\n);\n\nexport default StartPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Helmet } from \"react-helmet\";\nimport Server from \"./server/components/Server\";\nimport Client from \"./client/components/Client\";\nimport About from \"./About\";\nimport StartPage from \"./StartPage\";\nimport \"./scss/App.scss\";\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <Helmet\n        titleTemplate=\"Weclare | %s\"\n        defaultTitle=\"Weclare – A web based classroom response system\"\n      />\n      <Switch>\n        <Route path=\"/\" exact component={StartPage} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./scss/custom.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}